!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	include/recovery/log_record.h	/^  ABORT,$/;"	m	class:bustub::LogRecordType
AGG_CALL	include/binder/bound_expression.h	/^  AGG_CALL = 6,   \/**< Aggregation function expression type. *\/$/;"	m	class:bustub::ExpressionType
ALIAS	include/binder/bound_expression.h	/^  ALIAS = 10,     \/**< Alias expression type. *\/$/;"	m	class:bustub::ExpressionType
APPLYDELETE	include/recovery/log_record.h	/^  APPLYDELETE,$/;"	m	class:bustub::LogRecordType
ASC	include/binder/bound_order_by.h	/^  ASC = 2,     \/**< Ascending order by type. *\/$/;"	m	class:bustub::OrderByType
Abort	concurrency/transaction_manager.cpp	/^void TransactionManager::Abort(Transaction *txn) {$/;"	f	class:bustub::TransactionManager
Abstract	include/execution/expressions/abstract_expression.h	/^  Abstract,$/;"	m	class:bustub::ExecExpressionType
AbstractExecutor	include/execution/executors/abstract_executor.h	/^  explicit AbstractExecutor(ExecutorContext *exec_ctx) : exec_ctx_{exec_ctx} {}$/;"	f	class:bustub::AbstractExecutor
AbstractExecutor	include/execution/executors/abstract_executor.h	/^class AbstractExecutor {$/;"	c	namespace:bustub
AbstractExecutor	include/execution/executors/aggregation_executor.h	/^  auto GetChildExecutor() const -> const AbstractExecutor *;$/;"	m	class:bustub::AggregationExecutor
AbstractExpression	include/execution/expressions/abstract_expression.h	/^  AbstractExpression(std::vector<AbstractExpressionRef> children, Column ret_type, ExecExpressionType type)$/;"	f	class:bustub::AbstractExpression
AbstractExpression	include/execution/expressions/abstract_expression.h	/^class AbstractExpression {$/;"	c	namespace:bustub
AbstractExpressionRef	include/optimizer/optimizer.h	/^      -> AbstractExpressionRef;$/;"	m	class:bustub::Optimizer
AbstractExpressionRef	include/planner/planner.h	/^                                      AbstractExpressionRef right) -> AbstractExpressionRef;$/;"	m	class:bustub::Planner
AbstractExpressionRef	include/planner/planner.h	/^      -> AbstractExpressionRef;$/;"	m	class:bustub::Planner
AbstractPlanNode	include/execution/plans/abstract_plan.h	/^  AbstractPlanNode(SchemaRef output_schema, std::vector<AbstractPlanNodeRef> children)$/;"	f	class:bustub::AbstractPlanNode
AbstractPlanNode	include/execution/plans/abstract_plan.h	/^class AbstractPlanNode {$/;"	c	namespace:bustub
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto Optimize(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeColumnPruning(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeCustom(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeEliminateTrueFilter(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeMergeFilterNLJ(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeMergeFilterScan(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeMergeProjection(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeNLJAsHashJoin(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeNLJAsIndexJoin(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeOrderByAsIndexScan(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeSeqScanAsIndexScan(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/optimizer/optimizer.h	/^  auto OptimizeSortLimitAsTopN(const AbstractPlanNodeRef &plan) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Optimizer
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanBaseTableRef(const BoundBaseTableRef &table_ref) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanCTERef(const BoundCTERef &table_ref) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanCrossProductRef(const BoundCrossProductRef &table_ref) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanDelete(const DeleteStatement &statement) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanExpressionListRef(const BoundExpressionListRef &table_ref) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanInsert(const InsertStatement &statement) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanJoinRef(const BoundJoinRef &table_ref) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanSelect(const SelectStatement &statement) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanSelectAgg(const SelectStatement &statement, AbstractPlanNodeRef child) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanSelectWindow(const SelectStatement &statement, AbstractPlanNodeRef child) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanSubquery(const BoundSubqueryRef &table_ref, const std::string &alias) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanTableRef(const BoundTableRef &table_ref) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPlanNodeRef	include/planner/planner.h	/^  auto PlanUpdate(const UpdateStatement &statement) -> AbstractPlanNodeRef;$/;"	m	class:bustub::Planner
AbstractPool	include/type/abstract_pool.h	/^class AbstractPool {$/;"	c	namespace:bustub
AccessType	include/buffer/lru_k_replacer.h	/^enum class AccessType { Unknown = 0, Lookup, Scan, Index };$/;"	c	namespace:bustub
Add	include/primer/orset_driver.h	/^  inline void Add(const T &elem) { orset_.Add(elem, driver_->GenerateUid()); }$/;"	f	class:bustub::ORSetNode
Add	primer/orset.cpp	/^void ORSet<T>::Add(const T &elem, uid_t uid) {$/;"	f	class:bustub::ORSet
AddAggCallToContext	planner/plan_expression.cpp	/^void Planner::AddAggCallToContext(BoundExpression &expr) {$/;"	f	class:bustub::Planner
AddAggregation	planner/planner.cpp	/^void PlannerContext::AddAggregation(std::unique_ptr<BoundExpression> expr) {$/;"	f	class:bustub::PlannerContext
AddBlockPageId	storage/page/hash_table_header_page.cpp	/^void HashTableHeaderPage::AddBlockPageId(page_id_t page_id) {}$/;"	f	class:bustub::HashTableHeaderPage
AddCheckExecutor	include/execution/executor_context.h	/^  void AddCheckExecutor(AbstractExecutor *left_exec, AbstractExecutor *right_exec) {$/;"	f	class:bustub::ExecutorContext
AddEdge	concurrency/lock_manager.cpp	/^void LockManager::AddEdge(txn_id_t t1, txn_id_t t2) {}$/;"	f	class:bustub::LockManager
AdjustRoot	storage/index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::AdjustRoot(Context *ctx) {$/;"	f	class:bustub::BPLUSTREE_TYPE
AggregateKey	include/execution/plans/aggregation_plan.h	/^struct AggregateKey {$/;"	s	namespace:bustub
AggregateValue	include/execution/plans/aggregation_plan.h	/^struct AggregateValue {$/;"	s	namespace:bustub
Aggregation	include/execution/plans/abstract_plan.h	/^  Aggregation,$/;"	m	class:bustub::PlanType
AggregationExecutor	execution/aggregation_executor.cpp	/^AggregationExecutor::AggregationExecutor(ExecutorContext *exec_ctx, const AggregationPlanNode *plan,$/;"	f	class:bustub::AggregationExecutor
AggregationExecutor	include/execution/executors/aggregation_executor.h	/^class AggregationExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
AggregationPlanNode	include/execution/plans/aggregation_plan.h	/^  AggregationPlanNode(SchemaRef output_schema, AbstractPlanNodeRef child, std::vector<AbstractExpressionRef> group_bys,$/;"	f	class:bustub::AggregationPlanNode
AggregationPlanNode	include/execution/plans/aggregation_plan.h	/^class AggregationPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
AggregationType	include/execution/plans/aggregation_plan.h	/^enum class AggregationType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate };$/;"	c	namespace:bustub
And	include/execution/expressions/logic_expression.h	/^enum class LogicType { And, Or };$/;"	m	class:bustub::LogicType
AppendScanPredicate	include/concurrency/transaction.h	/^  inline auto AppendScanPredicate(table_oid_t t, const AbstractExpressionRef &predicate) {$/;"	f	class:bustub::Transaction
AppendWriteSet	include/concurrency/transaction.h	/^  inline auto AppendWriteSet(table_oid_t t, RID rid) {$/;"	f	class:bustub::Transaction
Arithmetic	include/execution/expressions/abstract_expression.h	/^  Arithmetic = 0,$/;"	m	class:bustub::ExecExpressionType
ArithmeticExpression	include/execution/expressions/arithmetic_expression.h	/^  ArithmeticExpression(AbstractExpressionRef left, AbstractExpressionRef right, ArithmeticType compute_type)$/;"	f	class:bustub::ArithmeticExpression
ArithmeticExpression	include/execution/expressions/arithmetic_expression.h	/^class ArithmeticExpression : public AbstractExpression {$/;"	c	namespace:bustub
ArithmeticType	include/execution/expressions/arithmetic_expression.h	/^enum class ArithmeticType { Plus, Minus };$/;"	c	namespace:bustub
Array	include/execution/expressions/abstract_expression.h	/^  Array,$/;"	m	class:bustub::ExecExpressionType
ArrayExpression	include/execution/expressions/array_expression.h	/^  explicit ArrayExpression(const std::vector<AbstractExpressionRef> &children)$/;"	f	class:bustub::ArrayExpression
ArrayExpression	include/execution/expressions/array_expression.h	/^class ArrayExpression : public AbstractExpression {$/;"	c	namespace:bustub
BASE_TABLE	include/binder/bound_table_ref.h	/^  BASE_TABLE = 1,      \/**< Base table reference. *\/$/;"	m	class:bustub::TableReferenceType
BEGIN	include/recovery/log_record.h	/^  BEGIN,$/;"	m	class:bustub::LogRecordType
BIGINT	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
BIGINT_COMPARE_FUNC	type/bigint_type.cpp	20;"	d	file:
BIGINT_MODIFY_FUNC	type/bigint_type.cpp	40;"	d	file:
BINARY_OP	include/binder/bound_expression.h	/^  BINARY_OP = 9,  \/**< Binary expression type. *\/$/;"	m	class:bustub::ExpressionType
BINDER	include/binder/statement/explain_statement.h	/^  BINDER = 1,    \/**< Show binder results. *\/$/;"	e	enum:uint8_t
BITSET_CAPACITY	include/primer/hyperloglog.h	13;"	d
BLOCK_ARRAY_SIZE	include/storage/page/hash_table_page_defs.h	31;"	d
BOOLEAN	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
BOOLEAN_COMPARE_FUNC	type/boolean_type.cpp	19;"	d	file:
BPLUSTREE_INDEX_TYPE	include/storage/index/b_plus_tree_index.h	25;"	d
BPLUSTREE_TYPE	include/storage/index/b_plus_tree.h	109;"	d
BPlusTree	include/storage/index/b_plus_tree.h	/^class BPlusTree {$/;"	c	namespace:bustub
BPlusTree	storage/index/b_plus_tree.cpp	/^BPLUSTREE_TYPE::BPlusTree(std::string name, page_id_t header_page_id, BufferPoolManager *buffer_pool_manager,$/;"	f	class:bustub::BPLUSTREE_TYPE
BPlusTreeHeaderPage	include/storage/page/b_plus_tree_header_page.h	/^class BPlusTreeHeaderPage {$/;"	c	namespace:bustub
BPlusTreeIndex	include/catalog/catalog.h	/^enum class IndexType { BPlusTreeIndex, HashTableIndex, STLOrderedIndex, STLUnorderedIndex };$/;"	m	class:bustub::IndexType
BPlusTreeIndex	include/storage/index/b_plus_tree_index.h	/^class BPlusTreeIndex : public Index {$/;"	c	namespace:bustub
BPlusTreeIndex	storage/index/b_plus_tree_index.cpp	/^BPLUSTREE_INDEX_TYPE::BPlusTreeIndex(std::unique_ptr<IndexMetadata> &&metadata, BufferPoolManager *buffer_pool_manager)$/;"	f	class:bustub::BPLUSTREE_INDEX_TYPE
BPlusTreeInternalPage	include/storage/page/b_plus_tree_internal_page.h	/^class BPlusTreeInternalPage : public BPlusTreePage {$/;"	c	namespace:bustub
BPlusTreeLeafPage	include/storage/page/b_plus_tree_leaf_page.h	/^class BPlusTreeLeafPage : public BPlusTreePage {$/;"	c	namespace:bustub
BPlusTreePage	include/storage/page/b_plus_tree_page.h	/^class BPlusTreePage {$/;"	c	namespace:bustub
BUCKET_ARRAY_SIZE	include/storage/page/hash_table_page_defs.h	43;"	d
BUCKET_SIZE	include/common/config.h	/^static constexpr int BUCKET_SIZE = 50;                                               \/\/ size of extendible hash bucket$/;"	m	namespace:bustub
BUFFER_POOL_SIZE	include/common/config.h	/^static constexpr int BUFFER_POOL_SIZE = 128;                                         \/\/ size of buffer pool$/;"	m	namespace:bustub
BUSTUB_ASSERT	include/common/macros.h	21;"	d
BUSTUB_BOOLEAN_MAX	include/type/limits.h	/^static constexpr int8_t BUSTUB_BOOLEAN_MAX = 1;$/;"	m	namespace:bustub
BUSTUB_BOOLEAN_MIN	include/type/limits.h	/^static constexpr int8_t BUSTUB_BOOLEAN_MIN = 0;$/;"	m	namespace:bustub
BUSTUB_BOOLEAN_NULL	include/type/limits.h	/^static constexpr int8_t BUSTUB_BOOLEAN_NULL = SCHAR_MIN;$/;"	m	namespace:bustub
BUSTUB_DATE_MAX	include/type/limits.h	/^static constexpr uint64_t BUSTUB_DATE_MAX = INT_MAX;$/;"	m	namespace:bustub
BUSTUB_DATE_MIN	include/type/limits.h	/^static constexpr uint32_t BUSTUB_DATE_MIN = 0;$/;"	m	namespace:bustub
BUSTUB_DATE_NULL	include/type/limits.h	/^static constexpr uint64_t BUSTUB_DATE_NULL = 0;$/;"	m	namespace:bustub
BUSTUB_DECIMAL_MAX	include/type/limits.h	/^static constexpr double BUSTUB_DECIMAL_MAX = DBL_MAX;$/;"	m	namespace:bustub
BUSTUB_DECIMAL_MIN	include/type/limits.h	/^static constexpr double BUSTUB_DECIMAL_MIN = FLT_LOWEST;$/;"	m	namespace:bustub
BUSTUB_DECIMAL_NULL	include/type/limits.h	/^static constexpr double BUSTUB_DECIMAL_NULL = DBL_LOWEST;$/;"	m	namespace:bustub
BUSTUB_ENSURE	include/common/macros.h	25;"	d
BUSTUB_EXPR_CLONE_WITH_CHILDREN	include/execution/expressions/abstract_expression.h	26;"	d
BUSTUB_INT16_MAX	include/type/limits.h	/^static constexpr int16_t BUSTUB_INT16_MAX = SHRT_MAX;$/;"	m	namespace:bustub
BUSTUB_INT16_MIN	include/type/limits.h	/^static constexpr int16_t BUSTUB_INT16_MIN = (SHRT_MIN + 1);$/;"	m	namespace:bustub
BUSTUB_INT16_NULL	include/type/limits.h	/^static constexpr int16_t BUSTUB_INT16_NULL = SHRT_MIN;$/;"	m	namespace:bustub
BUSTUB_INT32_MAX	include/type/limits.h	/^static constexpr int32_t BUSTUB_INT32_MAX = INT_MAX;$/;"	m	namespace:bustub
BUSTUB_INT32_MIN	include/type/limits.h	/^static constexpr int32_t BUSTUB_INT32_MIN = (INT_MIN + 1);$/;"	m	namespace:bustub
BUSTUB_INT32_NULL	include/type/limits.h	/^static constexpr int32_t BUSTUB_INT32_NULL = INT_MIN;$/;"	m	namespace:bustub
BUSTUB_INT64_MAX	include/type/limits.h	/^static constexpr int64_t BUSTUB_INT64_MAX = LLONG_MAX;$/;"	m	namespace:bustub
BUSTUB_INT64_MIN	include/type/limits.h	/^static constexpr int64_t BUSTUB_INT64_MIN = (LLONG_MIN + 1);$/;"	m	namespace:bustub
BUSTUB_INT64_NULL	include/type/limits.h	/^static constexpr int64_t BUSTUB_INT64_NULL = LLONG_MIN;$/;"	m	namespace:bustub
BUSTUB_INT8_MAX	include/type/limits.h	/^static constexpr int8_t BUSTUB_INT8_MAX = SCHAR_MAX;$/;"	m	namespace:bustub
BUSTUB_INT8_MIN	include/type/limits.h	/^static constexpr int8_t BUSTUB_INT8_MIN = (SCHAR_MIN + 1);$/;"	m	namespace:bustub
BUSTUB_INT8_NULL	include/type/limits.h	/^static constexpr int8_t BUSTUB_INT8_NULL = SCHAR_MIN;$/;"	m	namespace:bustub
BUSTUB_PAGE_SIZE	include/common/config.h	/^static constexpr int BUSTUB_PAGE_SIZE = 4096;                                        \/\/ size of a data page in byte$/;"	m	namespace:bustub
BUSTUB_PLAN_NODE_CLONE_WITH_CHILDREN	include/execution/plans/abstract_plan.h	25;"	d
BUSTUB_TEXT_MAX_LEN	include/type/limits.h	/^static constexpr uint32_t BUSTUB_TEXT_MAX_LEN = 1000000000;$/;"	m	namespace:bustub
BUSTUB_TIMESTAMP_MAX	include/type/limits.h	/^static constexpr uint64_t BUSTUB_TIMESTAMP_MAX = 11231999986399999999U;$/;"	m	namespace:bustub
BUSTUB_TIMESTAMP_MIN	include/type/limits.h	/^static constexpr uint64_t BUSTUB_TIMESTAMP_MIN = 0;$/;"	m	namespace:bustub
BUSTUB_TIMESTAMP_NULL	include/type/limits.h	/^static constexpr uint64_t BUSTUB_TIMESTAMP_NULL = ULLONG_MAX;$/;"	m	namespace:bustub
BUSTUB_UINT64_MAX	include/type/limits.h	/^static constexpr uint64_t BUSTUB_UINT64_MAX = ULLONG_MAX - 1;$/;"	m	namespace:bustub
BUSTUB_VALUE_NULL	include/type/limits.h	/^static constexpr uint32_t BUSTUB_VALUE_NULL = UINT_MAX;$/;"	m	namespace:bustub
BUSTUB_VARCHAR_MAX_LEN	include/type/limits.h	/^static constexpr uint32_t BUSTUB_VARCHAR_MAX_LEN = UINT_MAX;$/;"	m	namespace:bustub
B_PLUS_TREE_INTERNAL_PAGE_TYPE	include/storage/page/b_plus_tree_internal_page.h	21;"	d
B_PLUS_TREE_LEAF_PAGE_TYPE	include/storage/page/b_plus_tree_leaf_page.h	21;"	d
BatchOpsFromFile	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::BatchOpsFromFile(const std::filesystem::path &file_name) {$/;"	f	class:bustub::BPLUSTREE_TYPE
BeginCheckpoint	recovery/checkpoint_manager.cpp	/^void CheckpointManager::BeginCheckpoint() {$/;"	f	class:bustub::CheckpointManager
BigintType	include/type/bigint_type.h	/^class BigintType : public IntegerParentType {$/;"	c	namespace:bustub
BigintType	type/bigint_type.cpp	/^BigintType::BigintType() : IntegerParentType(BIGINT) {}$/;"	f	class:bustub::BigintType
Binder	binder/binder.cpp	/^Binder::Binder(const Catalog &catalog) : catalog_(catalog) {}$/;"	f	class:bustub::Binder
Binder	include/binder/binder.h	/^class Binder {$/;"	c	namespace:bustub
BooleanType	include/type/boolean_type.h	/^class BooleanType : public Type {$/;"	c	namespace:bustub
BooleanType	type/boolean_type.cpp	/^BooleanType::BooleanType() : Type(TypeId::BOOLEAN) {}$/;"	f	class:bustub::BooleanType
BoundAggCall	include/binder/expressions/bound_agg_call.h	/^  explicit BoundAggCall(std::string func_name, bool is_distinct, std::vector<std::unique_ptr<BoundExpression>> args)$/;"	f	class:bustub::BoundAggCall
BoundAggCall	include/binder/expressions/bound_agg_call.h	/^class BoundAggCall : public BoundExpression {$/;"	c	namespace:bustub
BoundAlias	include/binder/expressions/bound_alias.h	/^  explicit BoundAlias(std::string alias, std::unique_ptr<BoundExpression> child)$/;"	f	class:bustub::BoundAlias
BoundAlias	include/binder/expressions/bound_alias.h	/^class BoundAlias : public BoundExpression {$/;"	c	namespace:bustub
BoundBaseTableRef	include/binder/table_ref/bound_base_table_ref.h	/^  explicit BoundBaseTableRef(std::string table, table_oid_t oid, std::optional<std::string> alias, Schema schema)$/;"	f	class:bustub::BoundBaseTableRef
BoundBaseTableRef	include/binder/table_ref/bound_base_table_ref.h	/^class BoundBaseTableRef : public BoundTableRef {$/;"	c	namespace:bustub
BoundBinaryOp	include/binder/expressions/bound_binary_op.h	/^  explicit BoundBinaryOp(std::string op_name, std::unique_ptr<BoundExpression> larg,$/;"	f	class:bustub::BoundBinaryOp
BoundBinaryOp	include/binder/expressions/bound_binary_op.h	/^class BoundBinaryOp : public BoundExpression {$/;"	c	namespace:bustub
BoundCTERef	include/binder/table_ref/bound_cte_ref.h	/^  explicit BoundCTERef(std::string cte_name, std::string alias)$/;"	f	class:bustub::BoundCTERef
BoundCTERef	include/binder/table_ref/bound_cte_ref.h	/^class BoundCTERef : public BoundTableRef {$/;"	c	namespace:bustub
BoundColumnRef	include/binder/expressions/bound_column_ref.h	/^  explicit BoundColumnRef(std::vector<std::string> col_name)$/;"	f	class:bustub::BoundColumnRef
BoundColumnRef	include/binder/expressions/bound_column_ref.h	/^class BoundColumnRef : public BoundExpression {$/;"	c	namespace:bustub
BoundConstant	include/binder/expressions/bound_constant.h	/^  explicit BoundConstant(const Value &val) : BoundExpression(ExpressionType::CONSTANT), val_(val) {}$/;"	f	class:bustub::BoundConstant
BoundConstant	include/binder/expressions/bound_constant.h	/^class BoundConstant : public BoundExpression {$/;"	c	namespace:bustub
BoundCrossProductRef	include/binder/table_ref/bound_cross_product_ref.h	/^  explicit BoundCrossProductRef(std::unique_ptr<BoundTableRef> left, std::unique_ptr<BoundTableRef> right)$/;"	f	class:bustub::BoundCrossProductRef
BoundCrossProductRef	include/binder/table_ref/bound_cross_product_ref.h	/^class BoundCrossProductRef : public BoundTableRef {$/;"	c	namespace:bustub
BoundExpression	include/binder/bound_expression.h	/^  explicit BoundExpression(ExpressionType type) : type_(type) {}$/;"	f	class:bustub::BoundExpression
BoundExpression	include/binder/bound_expression.h	/^class BoundExpression {$/;"	c	namespace:bustub
BoundExpressionListRef	include/binder/table_ref/bound_expression_list_ref.h	/^  explicit BoundExpressionListRef(std::vector<std::vector<std::unique_ptr<BoundExpression>>> values,$/;"	f	class:bustub::BoundExpressionListRef
BoundExpressionListRef	include/binder/table_ref/bound_expression_list_ref.h	/^class BoundExpressionListRef : public BoundTableRef {$/;"	c	namespace:bustub
BoundFuncCall	include/binder/expressions/bound_func_call.h	/^  explicit BoundFuncCall(std::string func_name, std::vector<std::unique_ptr<BoundExpression>> args)$/;"	f	class:bustub::BoundFuncCall
BoundFuncCall	include/binder/expressions/bound_func_call.h	/^class BoundFuncCall : public BoundExpression {$/;"	c	namespace:bustub
BoundJoinRef	include/binder/table_ref/bound_join_ref.h	/^  explicit BoundJoinRef(JoinType join_type, std::unique_ptr<BoundTableRef> left, std::unique_ptr<BoundTableRef> right,$/;"	f	class:bustub::JoinType::BoundJoinRef
BoundJoinRef	include/binder/table_ref/bound_join_ref.h	/^class BoundJoinRef : public BoundTableRef {$/;"	c	class:bustub::JoinType
BoundOrderBy	include/binder/bound_order_by.h	/^  explicit BoundOrderBy(OrderByType type, std::unique_ptr<BoundExpression> expr)$/;"	f	class:bustub::BoundOrderBy
BoundOrderBy	include/binder/bound_order_by.h	/^class BoundOrderBy {$/;"	c	namespace:bustub
BoundStar	include/binder/expressions/bound_star.h	/^  BoundStar() : BoundExpression(ExpressionType::STAR) {}$/;"	f	class:bustub::BoundStar
BoundStar	include/binder/expressions/bound_star.h	/^class BoundStar : public BoundExpression {$/;"	c	namespace:bustub
BoundStatement	binder/bound_statement.cpp	/^BoundStatement::BoundStatement(StatementType type) : type_(type) {}$/;"	f	class:bustub::BoundStatement
BoundStatement	include/binder/bound_statement.h	/^class BoundStatement {$/;"	c	namespace:bustub
BoundSubqueryRef	include/binder/table_ref/bound_subquery_ref.h	/^  explicit BoundSubqueryRef(std::unique_ptr<SelectStatement> subquery,$/;"	f	class:bustub::BoundSubqueryRef
BoundSubqueryRef	include/binder/table_ref/bound_subquery_ref.h	/^class BoundSubqueryRef : public BoundTableRef {$/;"	c	namespace:bustub
BoundTableRef	include/binder/bound_table_ref.h	/^  explicit BoundTableRef(TableReferenceType type) : type_(type) {}$/;"	f	class:bustub::TableReferenceType::BoundTableRef
BoundTableRef	include/binder/bound_table_ref.h	/^class BoundTableRef {$/;"	c	class:bustub::TableReferenceType
BoundUnaryOp	include/binder/expressions/bound_unary_op.h	/^  explicit BoundUnaryOp(std::string op_name, std::unique_ptr<BoundExpression> arg)$/;"	f	class:bustub::BoundUnaryOp
BoundUnaryOp	include/binder/expressions/bound_unary_op.h	/^class BoundUnaryOp : public BoundExpression {$/;"	c	namespace:bustub
BoundWindow	include/binder/expressions/bound_window.h	/^  explicit BoundWindow(std::string func_name, std::vector<std::unique_ptr<BoundExpression>> args,$/;"	f	class:bustub::WindowBoundary::BoundWindow
BoundWindow	include/binder/expressions/bound_window.h	/^class BoundWindow : public BoundExpression {$/;"	c	class:bustub::WindowBoundary
BufferPoolManager	buffer/buffer_pool_manager.cpp	/^BufferPoolManager::BufferPoolManager(size_t num_frames, DiskManager *disk_manager, size_t k_dist,$/;"	f	class:bustub::BufferPoolManager
BufferPoolManager	include/buffer/buffer_pool_manager.h	/^class BufferPoolManager {$/;"	c	namespace:bustub
BusTubInstance	common/bustub_instance.cpp	/^BusTubInstance::BusTubInstance(const std::filesystem::path &db_file_name, size_t bpm_size) {$/;"	f	class:bustub::BusTubInstance
BusTubInstance	common/bustub_instance.cpp	/^BusTubInstance::BusTubInstance(size_t bpm_size) {$/;"	f	class:bustub::BusTubInstance
BusTubInstance	include/common/bustub_instance.h	/^class BusTubInstance {$/;"	c	namespace:bustub
CASE_1_YOUR_ANSWER	include/primer/trie_answer.h	/^const uint32_t CASE_1_YOUR_ANSWER = 0;$/;"	v
CASE_2_YOUR_ANSWER	include/primer/trie_answer.h	/^const uint32_t CASE_2_YOUR_ANSWER = 0;$/;"	v
CASE_3_YOUR_ANSWER	include/primer/trie_answer.h	/^const uint32_t CASE_3_YOUR_ANSWER = 0;$/;"	v
COLUMN_REF	include/binder/bound_expression.h	/^  COLUMN_REF = 3, \/**< A column in a table. *\/$/;"	m	class:bustub::ExpressionType
COMMIT	include/recovery/log_record.h	/^  COMMIT,$/;"	m	class:bustub::LogRecordType
COMMITTED	include/concurrency/transaction.h	/^enum class TransactionState { RUNNING = 0, TAINTED, COMMITTED = 100, ABORTED };$/;"	m	class:bustub::TransactionState
CONSTANT	include/binder/bound_expression.h	/^  CONSTANT = 1,   \/**< Constant expression type. *\/$/;"	m	class:bustub::ExpressionType
CONSTANT	include/primer/hyperloglog.h	/^  static constexpr double CONSTANT = 0.79402;$/;"	m	class:bustub::HyperLogLog
CONSTANT	include/primer/hyperloglog_presto.h	/^  static constexpr double CONSTANT = 0.79402;$/;"	m	class:bustub::HyperLogLogPresto
CONVERSION	include/common/exception.h	/^  CONVERSION = 2,$/;"	m	class:bustub::ExceptionType
CREATE_STATEMENT	include/common/enums/statement_type.h	/^  CREATE_STATEMENT,         \/\/ create statement type$/;"	m	class:bustub::StatementType
CROSS_PRODUCT	include/binder/bound_table_ref.h	/^  CROSS_PRODUCT = 4,   \/**< Output of cartesian product. *\/$/;"	m	class:bustub::TableReferenceType
CTE	include/binder/bound_table_ref.h	/^  CTE = 7,             \/**< CTE. *\/$/;"	m	class:bustub::TableReferenceType
CURRENT_ROW_RANGE	include/binder/expressions/bound_window.h	/^  CURRENT_ROW_RANGE = 3,$/;"	m	class:bustub::WindowBoundary
CURRENT_ROW_ROWS	include/binder/expressions/bound_window.h	/^  CURRENT_ROW_ROWS = 4,$/;"	m	class:bustub::WindowBoundary
Catalog	include/catalog/catalog.h	/^  Catalog(BufferPoolManager *bpm, LockManager *lock_manager, LogManager *log_manager)$/;"	f	class:bustub::Catalog
Catalog	include/catalog/catalog.h	/^class Catalog {$/;"	c	namespace:bustub
ChangeSizeBy	storage/page/b_plus_tree_page.cpp	/^void BPlusTreePage::ChangeSizeBy(int amount) {$/;"	f	class:bustub::BPlusTreePage
Channel	include/common/channel.h	/^  Channel(Channel &&other) {$/;"	f	class:bustub::Channel
Channel	include/common/channel.h	/^class Channel {$/;"	c	namespace:bustub
CheckOption	include/execution/check_options.h	/^enum class CheckOption : uint8_t {$/;"	c	namespace:bustub
CheckOptions	include/execution/check_options.h	/^class CheckOptions {$/;"	c	namespace:bustub
CheckOrderByCompatible	planner/plan_window_function.cpp	/^void CheckOrderByCompatible(const std::vector<std::vector<OrderBy>> &order_by_exprs) {$/;"	f	namespace:bustub
CheckpointManager	include/recovery/checkpoint_manager.h	/^  CheckpointManager(TransactionManager *transaction_manager, LogManager *log_manager,$/;"	f	class:bustub::CheckpointManager
CheckpointManager	include/recovery/checkpoint_manager.h	/^class CheckpointManager {$/;"	c	namespace:bustub
Clear	include/execution/executors/aggregation_executor.h	/^  void Clear() { ht_.clear(); }$/;"	f	class:bustub::SimpleAggregationHashTable
Clear	include/execution/executors/hash_join_executor.h	/^  void Clear() { ht_.clear(); }$/;"	f	class:bustub::SimpleHashJoinHashTable
ClockReplacer	buffer/clock_replacer.cpp	/^ClockReplacer::ClockReplacer(size_t num_pages) {}$/;"	f	class:bustub::ClockReplacer
ClockReplacer	include/buffer/clock_replacer.h	/^class ClockReplacer : public Replacer {$/;"	c	namespace:bustub
CmdDbgMvcc	common/bustub_instance.cpp	/^void BusTubInstance::CmdDbgMvcc(const std::vector<std::string> &params, ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
CmdDisplayHelp	common/bustub_instance.cpp	/^void BusTubInstance::CmdDisplayHelp(ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
CmdDisplayIndices	common/bustub_instance.cpp	/^void BusTubInstance::CmdDisplayIndices(ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
CmdDisplayTables	common/bustub_instance.cpp	/^void BusTubInstance::CmdDisplayTables(ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
CmdTxn	common/bustub_instance.cpp	/^void BusTubInstance::CmdTxn(const std::vector<std::string> &params, ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
CmpBool	include/type/type.h	/^  virtual auto CompareEquals(const Value &left, const Value &right) const -> CmpBool;$/;"	m	class:bustub::CmpBool::Type
CmpBool	include/type/type.h	/^  virtual auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool;$/;"	m	class:bustub::CmpBool::Type
CmpBool	include/type/type.h	/^  virtual auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool;$/;"	m	class:bustub::CmpBool::Type
CmpBool	include/type/type.h	/^  virtual auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool;$/;"	m	class:bustub::CmpBool::Type
CmpBool	include/type/type.h	/^  virtual auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool;$/;"	m	class:bustub::CmpBool::Type
CmpBool	include/type/type.h	/^  virtual auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool;$/;"	m	class:bustub::CmpBool::Type
CmpBool	include/type/type.h	/^enum class CmpBool { CmpFalse = 0, CmpTrue = 1, CmpNull = 2 };$/;"	c	namespace:bustub
CmpFalse	include/type/type.h	/^enum class CmpBool { CmpFalse = 0, CmpTrue = 1, CmpNull = 2 };$/;"	m	class:bustub::CmpBool
CmpNull	include/type/type.h	/^enum class CmpBool { CmpFalse = 0, CmpTrue = 1, CmpNull = 2 };$/;"	m	class:bustub::CmpBool
CmpTrue	include/type/type.h	/^enum class CmpBool { CmpFalse = 0, CmpTrue = 1, CmpNull = 2 };$/;"	m	class:bustub::CmpBool
Column	include/binder/binder.h	/^  auto BindColumnDefinition(duckdb_libpgquery::PGColumnDef *cdef) -> Column;$/;"	m	class:bustub::Binder
Column	include/catalog/column.h	/^  Column(std::string column_name, TypeId type)$/;"	f	class:bustub::Column
Column	include/catalog/column.h	/^  Column(std::string column_name, TypeId type, uint32_t length)$/;"	f	class:bustub::Column
Column	include/catalog/column.h	/^  Column(std::string column_name, const Column &column)$/;"	f	class:bustub::Column
Column	include/catalog/column.h	/^class Column {$/;"	c	namespace:bustub
Column	include/type/value.h	/^  auto GetColumn() const -> Column;$/;"	m	class:bustub::Value
ColumnInsertMeta	include/catalog/table_generator.h	/^    ColumnInsertMeta(const char *name, const TypeId type, bool nullable, Dist dist, uint64_t min, uint64_t max)$/;"	f	struct:bustub::TableGenerator::ColumnInsertMeta
ColumnInsertMeta	include/catalog/table_generator.h	/^  struct ColumnInsertMeta {$/;"	s	class:bustub::TableGenerator
ColumnValue	include/execution/expressions/abstract_expression.h	/^  ColumnValue,$/;"	m	class:bustub::ExecExpressionType
ColumnValueExpression	include/execution/expressions/column_value_expression.h	/^  ColumnValueExpression(uint32_t tuple_idx, uint32_t col_idx, Column ret_type)$/;"	f	class:bustub::ColumnValueExpression
ColumnValueExpression	include/execution/expressions/column_value_expression.h	/^class ColumnValueExpression : public AbstractExpression {$/;"	c	namespace:bustub
CombineAggregateValues	include/execution/executors/aggregation_executor.h	/^  void CombineAggregateValues(AggregateValue *result, const AggregateValue &input) {$/;"	f	class:bustub::SimpleAggregationHashTable
CompareTuple	include/execution/executors/sort_executor.h	/^  CompareTuple(const std::vector<std::pair<OrderByType, AbstractExpressionRef>> *order_bys, const Schema *schema) {$/;"	f	class:bustub::CompareTuple
CompareTuple	include/execution/executors/sort_executor.h	/^class CompareTuple {$/;"	c	namespace:bustub
Comparison	include/execution/expressions/abstract_expression.h	/^  Comparison,$/;"	m	class:bustub::ExecExpressionType
ComparisonExpression	include/execution/expressions/comparison_expression.h	/^  ComparisonExpression(AbstractExpressionRef left, AbstractExpressionRef right, ComparisonType comp_type)$/;"	f	class:bustub::ComparisonExpression
ComparisonExpression	include/execution/expressions/comparison_expression.h	/^class ComparisonExpression : public AbstractExpression {$/;"	c	namespace:bustub
ComparisonType	include/execution/expressions/comparison_expression.h	/^enum class ComparisonType { Equal, NotEqual, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual };$/;"	c	namespace:bustub
ConstantValueExpression	include/execution/expressions/constant_value_expression.h	/^  explicit ConstantValueExpression(const Value &val)$/;"	f	class:bustub::ConstantValueExpression
ConstantValueExpression	include/execution/expressions/constant_value_expression.h	/^class ConstantValueExpression : public AbstractExpression {$/;"	c	namespace:bustub
Context	include/storage/index/b_plus_tree.h	/^class Context {$/;"	c	namespace:bustub
ContextGuard	include/binder/binder.h	/^    explicit ContextGuard(const BoundTableRef **scope, const CTEList **cte_scope) {$/;"	f	class:bustub::Binder::ContextGuard
ContextGuard	include/binder/binder.h	/^  class ContextGuard {$/;"	c	class:bustub::Binder
ContextGuard	include/planner/planner.h	/^    explicit ContextGuard(PlannerContext *ctx) : old_ctx_(std::move(*ctx)), ctx_ptr_(ctx) {$/;"	f	class:bustub::Planner::ContextGuard
ContextGuard	include/planner/planner.h	/^  class ContextGuard {$/;"	c	class:bustub::Planner
CountAggregate	include/execution/plans/aggregation_plan.h	/^enum class AggregationType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate };$/;"	m	class:bustub::AggregationType
CountAggregate	include/execution/plans/window_plan.h	/^enum class WindowFunctionType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate, Rank };$/;"	m	class:bustub::WindowFunctionType
CountStarAggregate	include/execution/plans/aggregation_plan.h	/^enum class AggregationType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate };$/;"	m	class:bustub::AggregationType
CountStarAggregate	include/execution/plans/window_plan.h	/^enum class WindowFunctionType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate, Rank };$/;"	m	class:bustub::WindowFunctionType
CreateStatement	binder/statement/create_statement.cpp	/^CreateStatement::CreateStatement(std::string table, std::vector<Column> columns, std::vector<std::string> primary_key)$/;"	f	class:bustub::CreateStatement
CreateStatement	include/binder/statement/create_statement.h	/^class CreateStatement : public BoundStatement {$/;"	c	namespace:bustub
DBL_LOWEST	include/type/limits.h	/^static constexpr double DBL_LOWEST = std::numeric_limits<double>::lowest();$/;"	m	namespace:bustub
DECIMAL	include/common/exception.h	/^  DECIMAL = 4,$/;"	m	class:bustub::ExceptionType
DECIMAL	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
DECIMAL_COMPARE_FUNC	type/decimal_type.cpp	22;"	d	file:
DECIMAL_MODIFY_FUNC	type/decimal_type.cpp	42;"	d	file:
DEFAULT	include/binder/bound_order_by.h	/^  DEFAULT = 1, \/**< Default order by type. *\/$/;"	m	class:bustub::OrderByType
DEFAULT_DB_IO_SIZE	include/common/config.h	/^static constexpr int DEFAULT_DB_IO_SIZE = 16;                                        \/\/ starting size of file on disk$/;"	m	namespace:bustub
DELETE_STATEMENT	include/common/enums/statement_type.h	/^  DELETE_STATEMENT,         \/\/ delete statement type$/;"	m	class:bustub::StatementType
DENSE_BUCKET_SIZE	include/primer/hyperloglog_presto.h	15;"	d
DESC	include/binder/bound_order_by.h	/^  DESC = 3,    \/**< Descending order by type. *\/$/;"	m	class:bustub::OrderByType
DIRECTORY_ARRAY_SIZE	include/storage/page/hash_table_page_defs.h	52;"	d
DISABLE_CHECKPOINT_MANAGER	include/common/config.h	20;"	d
DISABLE_LOCK_MANAGER	include/common/config.h	19;"	d
DISALLOW_COPY	include/common/macros.h	34;"	d
DISALLOW_COPY_AND_MOVE	include/common/macros.h	42;"	d
DISALLOW_MOVE	include/common/macros.h	38;"	d
DIVIDE_BY_ZERO	include/common/exception.h	/^  DIVIDE_BY_ZERO = 6,$/;"	m	class:bustub::ExceptionType
DROP_STATEMENT	include/common/enums/statement_type.h	/^  DROP_STATEMENT,           \/\/ drop statement type$/;"	m	class:bustub::StatementType
DeallocatePage	include/storage/disk/disk_scheduler.h	/^  void DeallocatePage(page_id_t page_id) { disk_manager_->DeletePage(page_id); }$/;"	f	class:bustub::DiskScheduler
DecimalType	include/type/decimal_type.h	/^class DecimalType : public NumericType {$/;"	c	namespace:bustub
DecimalType	type/decimal_type.cpp	/^DecimalType::DecimalType() : NumericType(TypeId::DECIMAL) {}$/;"	f	class:bustub::DecimalType
DecrGlobalDepth	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::DecrGlobalDepth() {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
DecrGlobalDepth	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::DecrGlobalDepth() { global_depth_--; }$/;"	f	class:bustub::HashTableDirectoryPage
DecrLocalDepth	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::DecrLocalDepth(uint32_t bucket_idx) {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
DecrLocalDepth	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::DecrLocalDepth(uint32_t bucket_idx) {}$/;"	f	class:bustub::HashTableDirectoryPage
Delete	include/execution/plans/abstract_plan.h	/^  Delete,$/;"	m	class:bustub::PlanType
DeleteEntry	storage/index/b_plus_tree_index.cpp	/^void BPLUSTREE_INDEX_TYPE::DeleteEntry(const Tuple &key, RID rid, Transaction *transaction) {$/;"	f	class:bustub::BPLUSTREE_INDEX_TYPE
DeleteEntry	storage/index/extendible_hash_table_index.cpp	/^void HASH_TABLE_INDEX_TYPE::DeleteEntry(const Tuple &key, RID rid, Transaction *transaction) {$/;"	f	class:bustub::HASH_TABLE_INDEX_TYPE
DeleteEntry	storage/index/linear_probe_hash_table_index.cpp	/^void HASH_TABLE_INDEX_TYPE::DeleteEntry(const Tuple &key, RID rid, Transaction *transaction) {$/;"	f	class:bustub::HASH_TABLE_INDEX_TYPE
DeleteExecutor	execution/delete_executor.cpp	/^DeleteExecutor::DeleteExecutor(ExecutorContext *exec_ctx, const DeletePlanNode *plan,$/;"	f	class:bustub::DeleteExecutor
DeleteExecutor	include/execution/executors/delete_executor.h	/^class DeleteExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
DeletePage	storage/disk/disk_manager.cpp	/^void DiskManager::DeletePage(page_id_t page_id) { num_deletes_ += 1; }$/;"	f	class:bustub::DiskManager
DeletePlanNode	include/execution/plans/delete_plan.h	/^  DeletePlanNode(SchemaRef output, AbstractPlanNodeRef child, table_oid_t table_oid)$/;"	f	class:bustub::DeletePlanNode
DeletePlanNode	include/execution/plans/delete_plan.h	/^class DeletePlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
DeleteStatement	binder/statement/delete_statement.cpp	/^DeleteStatement::DeleteStatement(std::unique_ptr<BoundBaseTableRef> table, std::unique_ptr<BoundExpression> expr)$/;"	f	class:bustub::DeleteStatement
DeleteStatement	include/binder/statement/delete_statement.h	/^class DeleteStatement : public BoundStatement {$/;"	c	namespace:bustub
DeserializeFrom	storage/table/tuple.cpp	/^void Tuple::DeserializeFrom(const char *storage) {$/;"	f	class:bustub::Tuple
DiskExtendibleHashTable	container/disk/hash/disk_extendible_hash_table.cpp	/^DiskExtendibleHashTable<K, V, KC>::DiskExtendibleHashTable(const std::string &name, BufferPoolManager *bpm,$/;"	f	class:bustub::DiskExtendibleHashTable
DiskExtendibleHashTable	include/container/disk/hash/disk_extendible_hash_table.h	/^class DiskExtendibleHashTable {$/;"	c	namespace:bustub
DiskHashTable	include/container/disk/hash/disk_hash_table.h	/^class DiskHashTable {$/;"	c	namespace:bustub
DiskManager	include/storage/disk/disk_manager.h	/^class DiskManager {$/;"	c	namespace:bustub
DiskManager	storage/disk/disk_manager.cpp	/^DiskManager::DiskManager(const std::filesystem::path &db_file) : file_name_(db_file) {$/;"	f	class:bustub::DiskManager
DiskManagerMemory	include/storage/disk/disk_manager_memory.h	/^class DiskManagerMemory : public DiskManager {$/;"	c	namespace:bustub
DiskManagerMemory	storage/disk/disk_manager_memory.cpp	/^DiskManagerMemory::DiskManagerMemory(size_t pages) : pages_(pages) { memory_ = new char[pages * BUSTUB_PAGE_SIZE]; }$/;"	f	class:bustub::DiskManagerMemory
DiskManagerUnlimitedMemory	include/storage/disk/disk_manager_memory.h	/^  DiskManagerUnlimitedMemory() {$/;"	f	class:bustub::DiskManagerUnlimitedMemory
DiskManagerUnlimitedMemory	include/storage/disk/disk_manager_memory.h	/^class DiskManagerUnlimitedMemory : public DiskManager {$/;"	c	namespace:bustub
DiskRequest	include/storage/disk/disk_scheduler.h	/^struct DiskRequest {$/;"	s	namespace:bustub
DiskScheduler	include/storage/disk/disk_scheduler.h	/^class DiskScheduler {$/;"	c	namespace:bustub
DiskScheduler	storage/disk/disk_scheduler.cpp	/^DiskScheduler::DiskScheduler(DiskManager *disk_manager) : disk_manager_(disk_manager) {$/;"	f	class:bustub::DiskScheduler
Dist	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	c	class:bustub::TableGenerator
Draw	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::Draw(BufferPoolManager *bpm, const std::filesystem::path &outf) {$/;"	f	class:bustub::BPLUSTREE_TYPE
Drop	storage/page/page_guard.cpp	/^void ReadPageGuard::Drop() {$/;"	f	class:bustub::ReadPageGuard
Drop	storage/page/page_guard.cpp	/^void WritePageGuard::Drop() {$/;"	f	class:bustub::WritePageGuard
EMPTY	include/binder/bound_table_ref.h	/^  EMPTY = 8            \/**< Placeholder for empty FROM. *\/$/;"	m	class:bustub::TableReferenceType
ENABLE_NLJ_CHECK	include/execution/check_options.h	/^  ENABLE_NLJ_CHECK = 0,$/;"	m	class:bustub::CheckOption
ENABLE_TOPN_CHECK	include/execution/check_options.h	/^  ENABLE_TOPN_CHECK = 1,$/;"	m	class:bustub::CheckOption
EXCLUSIVE	include/concurrency/lock_manager.h	/^  enum class LockMode { SHARED, EXCLUSIVE, INTENTION_SHARED, INTENTION_EXCLUSIVE, SHARED_INTENTION_EXCLUSIVE };$/;"	m	class:bustub::LockManager::LockMode
EXECUTION	include/common/exception.h	/^  EXECUTION = 12,$/;"	m	class:bustub::ExceptionType
EXPLAIN_STATEMENT	include/common/enums/statement_type.h	/^  EXPLAIN_STATEMENT,        \/\/ explain statement type$/;"	m	class:bustub::StatementType
EXPRESSION_LIST	include/binder/bound_table_ref.h	/^  EXPRESSION_LIST = 5, \/**< Values clause. *\/$/;"	m	class:bustub::TableReferenceType
EXPR_FOLLOWING_RANGE	include/binder/expressions/bound_window.h	/^  EXPR_FOLLOWING_RANGE = 8$/;"	m	class:bustub::WindowBoundary
EXPR_FOLLOWING_ROWS	include/binder/expressions/bound_window.h	/^  EXPR_FOLLOWING_ROWS = 6,$/;"	m	class:bustub::WindowBoundary
EXPR_PRECEDING_RANGE	include/binder/expressions/bound_window.h	/^  EXPR_PRECEDING_RANGE = 7,$/;"	m	class:bustub::WindowBoundary
EXPR_PRECEDING_ROWS	include/binder/expressions/bound_window.h	/^  EXPR_PRECEDING_ROWS = 5,$/;"	m	class:bustub::WindowBoundary
EnableLatencySimulator	include/storage/disk/disk_manager_memory.h	/^  void EnableLatencySimulator(bool enabled) { latency_simulator_enabled_ = enabled; }$/;"	f	class:bustub::DiskManagerUnlimitedMemory
EnableManagedTxn	common/bustub_instance.cpp	/^void BusTubInstance::EnableManagedTxn() { managed_txn_mode_ = true; }$/;"	f	class:bustub::BusTubInstance
EndCheckpoint	recovery/checkpoint_manager.cpp	/^void CheckpointManager::EndCheckpoint() {$/;"	f	class:bustub::CheckpointManager
Equal	include/execution/expressions/comparison_expression.h	/^enum class ComparisonType { Equal, NotEqual, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual };$/;"	m	class:bustub::ComparisonType
EraseLastKV	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::EraseLastKV() {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
Exception	include/common/exception.h	/^  Exception(ExceptionType exception_type, const std::string &message, bool print = true)$/;"	f	class:bustub::Exception
Exception	include/common/exception.h	/^  explicit Exception(const std::string &message, bool print = true)$/;"	f	class:bustub::Exception
Exception	include/common/exception.h	/^class Exception : public std::runtime_error {$/;"	c	namespace:bustub
ExceptionType	include/common/exception.h	/^enum class ExceptionType {$/;"	c	namespace:bustub
ExecExpressionType	include/execution/expressions/abstract_expression.h	/^enum class ExecExpressionType : uint8_t {$/;"	c	namespace:bustub
ExecutionEngine	include/execution/execution_engine.h	/^  ExecutionEngine(BufferPoolManager *bpm, TransactionManager *txn_mgr, Catalog *catalog)$/;"	f	class:bustub::ExecutionEngine
ExecutionEngine	include/execution/execution_engine.h	/^class ExecutionEngine {$/;"	c	namespace:bustub
ExecutionException	include/common/exception.h	/^  explicit ExecutionException(const std::string &msg) : Exception(ExceptionType::EXECUTION, msg, true) {}$/;"	f	class:bustub::ExecutionException
ExecutionException	include/common/exception.h	/^class ExecutionException : public Exception {$/;"	c	namespace:bustub
ExecutorContext	include/execution/executor_context.h	/^  ExecutorContext(Transaction *transaction, Catalog *catalog, BufferPoolManager *bpm, TransactionManager *txn_mgr,$/;"	f	class:bustub::ExecutorContext
ExecutorContext	include/execution/executor_context.h	/^class ExecutorContext {$/;"	c	namespace:bustub
ExecutorFactory	include/execution/executor_factory.h	/^class ExecutorFactory {$/;"	c	namespace:bustub
ExplainStatement	binder/statement/explain_statement.cpp	/^ExplainStatement::ExplainStatement(std::unique_ptr<BoundStatement> statement, uint8_t options)$/;"	f	class:bustub::ExplainStatement
ExplainStatement	include/binder/statement/explain_statement.h	/^class ExplainStatement : public BoundStatement {$/;"	c	namespace:bustub
ExpressionType	include/binder/bound_expression.h	/^enum class ExpressionType : uint8_t {$/;"	c	namespace:bustub
ExtendibleHTableBucketPage	include/storage/page/extendible_htable_bucket_page.h	/^class ExtendibleHTableBucketPage {$/;"	c	namespace:bustub
ExtendibleHTableDirectoryPage	include/storage/page/extendible_htable_directory_page.h	/^class ExtendibleHTableDirectoryPage {$/;"	c	namespace:bustub
ExtendibleHTableHeaderPage	include/storage/page/extendible_htable_header_page.h	/^class ExtendibleHTableHeaderPage {$/;"	c	namespace:bustub
ExtendibleHashTableIndex	include/storage/index/extendible_hash_table_index.h	/^class ExtendibleHashTableIndex : public Index {$/;"	c	namespace:bustub
ExtendibleHashTableIndex	storage/index/extendible_hash_table_index.cpp	/^HASH_TABLE_INDEX_TYPE::ExtendibleHashTableIndex(std::unique_ptr<IndexMetadata> &&metadata,$/;"	f	class:bustub::HASH_TABLE_INDEX_TYPE
ExternalMergeSortExecutor	execution/external_merge_sort_executor.cpp	/^ExternalMergeSortExecutor<K>::ExternalMergeSortExecutor(ExecutorContext *exec_ctx, const SortPlanNode *plan,$/;"	f	class:bustub::ExternalMergeSortExecutor
ExternalMergeSortExecutor	include/execution/executors/external_merge_sort_executor.h	/^class ExternalMergeSortExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
FLT_LOWEST	include/type/limits.h	/^static constexpr double FLT_LOWEST = std::numeric_limits<float>::lowest();$/;"	m	namespace:bustub
FUNCTION	include/binder/bound_expression.h	/^  FUNCTION = 5,   \/**< Function expression type. *\/$/;"	m	class:bustub::ExpressionType
FUNC_CALL	include/binder/bound_expression.h	/^  FUNC_CALL = 11, \/**< Function call expression type. *\/$/;"	m	class:bustub::ExpressionType
FetchAdd	buffer/buffer_pool_manager.cpp	/^void FrameHeader::FetchAdd() { pin_count_.fetch_add(1); }$/;"	f	class:bustub::FrameHeader
FetchSub	buffer/buffer_pool_manager.cpp	/^void FrameHeader::FetchSub() { pin_count_.fetch_sub(1); }$/;"	f	class:bustub::FrameHeader
FillTable	catalog/table_generator.cpp	/^void TableGenerator::FillTable(const std::shared_ptr<TableInfo> &info, TableInsertMeta *table_meta) {$/;"	f	class:bustub::TableGenerator
Filter	include/execution/plans/abstract_plan.h	/^  Filter,$/;"	m	class:bustub::PlanType
FilterExecutor	execution/filter_executor.cpp	/^FilterExecutor::FilterExecutor(ExecutorContext *exec_ctx, const FilterPlanNode *plan,$/;"	f	class:bustub::FilterExecutor
FilterExecutor	include/execution/executors/filter_executor.h	/^class FilterExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
FilterPlanNode	include/execution/plans/filter_plan.h	/^  FilterPlanNode(SchemaRef output, AbstractExpressionRef predicate, AbstractPlanNodeRef child)$/;"	f	class:bustub::FilterPlanNode
FilterPlanNode	include/execution/plans/filter_plan.h	/^class FilterPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
FlushAllPages	buffer/buffer_pool_manager.cpp	/^void BufferPoolManager::FlushAllPages() {$/;"	f	class:bustub::BufferPoolManager
FlushBufferToRun	execution/external_merge_sort_executor.cpp	/^void ExternalMergeSortExecutor<K>::FlushBufferToRun(std::vector<SortEntry> &buffer, BufferPoolManager *bpm,$/;"	f	class:bustub::ExternalMergeSortExecutor
Format	common/util/string_util.cpp	/^std::string StringUtil::Format(std::string fmt_str, ...) {$/;"	f	class:bustub::StringUtil
FortTableWriter	include/common/bustub_instance.h	/^class FortTableWriter : public ResultWriter {$/;"	c	namespace:bustub
FrameHeader	buffer/buffer_pool_manager.cpp	/^FrameHeader::FrameHeader(frame_id_t frame_id) : frame_id_(frame_id), data_(BUSTUB_PAGE_SIZE, 0) { Reset(); }$/;"	f	class:bustub::FrameHeader
FrameHeader	include/buffer/buffer_pool_manager.h	/^class FrameHeader {$/;"	c	namespace:bustub
GRAPH_NODE_CNT	execution/mock_scan_executor.cpp	/^static const int GRAPH_NODE_CNT = 10;$/;"	m	namespace:bustub	file:
GarbageCollection	concurrency/transaction_manager.cpp	/^void TransactionManager::GarbageCollection() { UNIMPLEMENTED("not implemented"); }$/;"	f	class:bustub::TransactionManager
GenerateMockTable	common/bustub_instance.cpp	/^void BusTubInstance::GenerateMockTable() {$/;"	f	class:bustub::BusTubInstance
GenerateTestTable	common/bustub_instance.cpp	/^void BusTubInstance::GenerateTestTable() {$/;"	f	class:bustub::BusTubInstance
GenerateTestTables	catalog/table_generator.cpp	/^void TableGenerator::GenerateTestTables() {$/;"	f	class:bustub::TableGenerator
GenericComparator	include/storage/index/generic_key.h	/^  GenericComparator(const GenericComparator &other) : key_schema_{other.key_schema_} {}$/;"	f	class:bustub::GenericComparator
GenericComparator	include/storage/index/generic_key.h	/^  explicit GenericComparator(Schema *key_schema) : key_schema_(key_schema) {}$/;"	f	class:bustub::GenericComparator
GenericComparator	include/storage/index/generic_key.h	/^class GenericComparator {$/;"	c	namespace:bustub
GenericKey	include/storage/index/generic_key.h	/^class GenericKey {$/;"	c	namespace:bustub
GetCardinality	include/primer/hyperloglog.h	/^  auto GetCardinality() { return cardinality_; }$/;"	f	class:bustub::HyperLogLog
GetOverflowBucketofIndex	include/primer/hyperloglog_presto.h	/^  auto GetOverflowBucketofIndex(uint16_t idx) { return overflow_bucket_[idx]; }$/;"	f	class:bustub::HyperLogLogPresto
GetSizeOf	execution/mock_scan_executor.cpp	/^    : AbstractExecutor{exec_ctx}, plan_{plan}, func_(GetFunctionOf(plan)), size_(GetSizeOf(plan)) {$/;"	f	namespace:bustub
GreaterThan	include/execution/expressions/comparison_expression.h	/^enum class ComparisonType { Equal, NotEqual, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual };$/;"	m	class:bustub::ComparisonType
HASH_TABLE_BLOCK_TYPE	include/container/disk/hash/linear_probe_hash_table.h	/^  auto GetBlockPage(page_id_t block_page_id) -> HASH_TABLE_BLOCK_TYPE *;$/;"	m	class:bustub::LinearProbeHashTable
HASH_TABLE_BLOCK_TYPE	include/storage/page/hash_table_page_defs.h	22;"	d
HASH_TABLE_BUCKET_TYPE	include/storage/page/hash_table_page_defs.h	36;"	d
HASH_TABLE_INDEX_TYPE	include/storage/index/extendible_hash_table_index.h	26;"	d
HASH_TABLE_INDEX_TYPE	include/storage/index/linear_probe_hash_table_index.h	26;"	d
HASH_TABLE_TYPE	include/container/disk/hash/linear_probe_hash_table.h	27;"	d
HEADER_SIZE	include/recovery/log_record.h	/^  static const int HEADER_SIZE = 20;$/;"	m	class:bustub::LogRecord
HSTOREDEBUGLOG_H	include/common/logger.h	25;"	d
HTABLE_BUCKET_PAGE_METADATA_SIZE	include/storage/page/extendible_htable_bucket_page.h	/^static constexpr uint64_t HTABLE_BUCKET_PAGE_METADATA_SIZE = sizeof(uint32_t) * 2;$/;"	m	namespace:bustub
HTABLE_DIRECTORY_ARRAY_SIZE	include/storage/page/extendible_htable_directory_page.h	/^static constexpr uint64_t HTABLE_DIRECTORY_ARRAY_SIZE = 1 << HTABLE_DIRECTORY_MAX_DEPTH;$/;"	m	namespace:bustub
HTABLE_DIRECTORY_MAX_DEPTH	include/storage/page/extendible_htable_directory_page.h	/^static constexpr uint64_t HTABLE_DIRECTORY_MAX_DEPTH = 9;$/;"	m	namespace:bustub
HTABLE_DIRECTORY_PAGE_METADATA_SIZE	include/storage/page/extendible_htable_directory_page.h	/^static constexpr uint64_t HTABLE_DIRECTORY_PAGE_METADATA_SIZE = sizeof(uint32_t) * 2;$/;"	m	namespace:bustub
HTABLE_HEADER_ARRAY_SIZE	include/storage/page/extendible_htable_header_page.h	/^static constexpr uint64_t HTABLE_HEADER_ARRAY_SIZE = 1 << HTABLE_HEADER_MAX_DEPTH;$/;"	m	namespace:bustub
HTABLE_HEADER_MAX_DEPTH	include/storage/page/extendible_htable_header_page.h	/^static constexpr uint64_t HTABLE_HEADER_MAX_DEPTH = 9;$/;"	m	namespace:bustub
HTABLE_HEADER_PAGE_METADATA_SIZE	include/storage/page/extendible_htable_header_page.h	/^static constexpr uint64_t HTABLE_HEADER_PAGE_METADATA_SIZE = sizeof(uint32_t);$/;"	m	namespace:bustub
HandleCreateStatement	common/bustub_ddl.cpp	/^void BusTubInstance::HandleCreateStatement(Transaction *txn, const CreateStatement &stmt, ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
HandleExplainStatement	common/bustub_ddl.cpp	/^void BusTubInstance::HandleExplainStatement(Transaction *txn, const ExplainStatement &stmt, ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
HandleIndexStatement	common/bustub_ddl.cpp	/^void BusTubInstance::HandleIndexStatement(Transaction *txn, const IndexStatement &stmt, ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
HandleTxnStatement	common/bustub_ddl.cpp	/^void BusTubInstance::HandleTxnStatement(Transaction *txn, const TransactionStatement &stmt, ResultWriter &writer) {$/;"	f	class:bustub::BusTubInstance
HandleVariableSetStatement	common/bustub_ddl.cpp	/^void BusTubInstance::HandleVariableSetStatement(Transaction *txn, const VariableSetStatement &stmt,$/;"	f	class:bustub::BusTubInstance
HandleVariableShowStatement	common/bustub_ddl.cpp	/^void BusTubInstance::HandleVariableShowStatement(Transaction *txn, const VariableShowStatement &stmt,$/;"	f	class:bustub::BusTubInstance
HashComparator	include/storage/index/hash_comparator.h	/^class HashComparator {$/;"	c	namespace:bustub
HashFunction	include/container/hash/hash_function.h	/^class HashFunction {$/;"	c	namespace:bustub
HashJoin	include/execution/plans/abstract_plan.h	/^  HashJoin,$/;"	m	class:bustub::PlanType
HashJoinExecutor	execution/hash_join_executor.cpp	/^HashJoinExecutor::HashJoinExecutor(ExecutorContext *exec_ctx, const HashJoinPlanNode *plan,$/;"	f	class:bustub::HashJoinExecutor
HashJoinExecutor	include/execution/executors/hash_join_executor.h	/^class HashJoinExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
HashJoinKey	include/execution/executors/hash_join_executor.h	/^struct HashJoinKey {$/;"	s	namespace:bustub
HashJoinPlanNode	include/execution/plans/hash_join_plan.h	/^  HashJoinPlanNode(SchemaRef output_schema, AbstractPlanNodeRef left, AbstractPlanNodeRef right,$/;"	f	class:bustub::HashJoinPlanNode
HashJoinPlanNode	include/execution/plans/hash_join_plan.h	/^class HashJoinPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
HashTable	include/container/hash/hash_table.h	/^class HashTable {$/;"	c	namespace:bustub
HashTableBlockPage	include/storage/page/hash_table_block_page.h	/^class HashTableBlockPage {$/;"	c	namespace:bustub
HashTableBucketPage	include/storage/page/hash_table_bucket_page.h	/^class HashTableBucketPage {$/;"	c	namespace:bustub
HashTableDirectoryPage	include/storage/page/hash_table_directory_page.h	/^class HashTableDirectoryPage {$/;"	c	namespace:bustub
HashTableHeaderPage	include/container/disk/hash/linear_probe_hash_table.h	/^  auto GetHeaderPage() -> HashTableHeaderPage *;$/;"	m	class:bustub::LinearProbeHashTable
HashTableHeaderPage	include/storage/page/hash_table_header_page.h	/^class HashTableHeaderPage {$/;"	c	namespace:bustub
HashTableIndex	include/catalog/catalog.h	/^enum class IndexType { BPlusTreeIndex, HashTableIndex, STLOrderedIndex, STLUnorderedIndex };$/;"	m	class:bustub::IndexType
HashUtil	include/common/util/hash_util.h	/^class HashUtil {$/;"	c	namespace:bustub
HtmlWriter	include/common/bustub_instance.h	/^class HtmlWriter : public ResultWriter {$/;"	c	namespace:bustub
HyperLogLog	include/primer/hyperloglog.h	/^class HyperLogLog {$/;"	c	namespace:bustub
HyperLogLog	primer/hyperloglog.cpp	/^HyperLogLog<KeyType>::HyperLogLog(int16_t n_bits) : cardinality_(0) {}$/;"	f	class:bustub::HyperLogLog
HyperLogLogPresto	include/primer/hyperloglog_presto.h	/^class HyperLogLogPresto {$/;"	c	namespace:bustub
HyperLogLogPresto	primer/hyperloglog_presto.cpp	/^HyperLogLogPresto<KeyType>::HyperLogLogPresto(int16_t n_leading_bits) : cardinality_(0) {}$/;"	f	class:bustub::HyperLogLogPresto
INCOMPATIBLE_TYPE	include/common/exception.h	/^  INCOMPATIBLE_TYPE = 8,$/;"	m	class:bustub::ExceptionType
INDEXITERATOR_TYPE	include/storage/index/b_plus_tree.h	/^  auto Begin() -> INDEXITERATOR_TYPE;$/;"	m	class:bustub::BPlusTree
INDEXITERATOR_TYPE	include/storage/index/b_plus_tree.h	/^  auto Begin(const KeyType &key) -> INDEXITERATOR_TYPE;$/;"	m	class:bustub::BPlusTree
INDEXITERATOR_TYPE	include/storage/index/b_plus_tree.h	/^  auto End() -> INDEXITERATOR_TYPE;$/;"	m	class:bustub::BPlusTree
INDEXITERATOR_TYPE	include/storage/index/b_plus_tree_index.h	/^  auto GetBeginIterator() -> INDEXITERATOR_TYPE;$/;"	m	class:bustub::BPlusTreeIndex
INDEXITERATOR_TYPE	include/storage/index/b_plus_tree_index.h	/^  auto GetBeginIterator(const KeyType &key) -> INDEXITERATOR_TYPE;$/;"	m	class:bustub::BPlusTreeIndex
INDEXITERATOR_TYPE	include/storage/index/b_plus_tree_index.h	/^  auto GetEndIterator() -> INDEXITERATOR_TYPE;$/;"	m	class:bustub::BPlusTreeIndex
INDEXITERATOR_TYPE	include/storage/index/index_iterator.h	24;"	d
INDEX_STATEMENT	include/common/enums/statement_type.h	/^  INDEX_STATEMENT,          \/\/ index statement type$/;"	m	class:bustub::StatementType
INDEX_TEMPLATE_ARGUMENTS	include/storage/page/b_plus_tree_page.h	25;"	d
INDEX_TEMPLATE_ARGUMENTS	include/storage/page/hash_table_page_defs.h	17;"	d
INNER	include/binder/table_ref/bound_join_ref.h	/^  INNER = 4,   \/**< Inner join. *\/$/;"	m	class:bustub::JoinType
INSERT	include/recovery/log_record.h	/^  INSERT,$/;"	m	class:bustub::LogRecordType
INSERT	include/storage/index/b_plus_tree.h	/^  INSERT,$/;"	m	class:bustub::Operation
INSERT_STATEMENT	include/common/enums/statement_type.h	/^  INSERT_STATEMENT,         \/\/ insert statement type$/;"	m	class:bustub::StatementType
INTEGER	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
INTENTION_EXCLUSIVE	include/concurrency/lock_manager.h	/^  enum class LockMode { SHARED, EXCLUSIVE, INTENTION_SHARED, INTENTION_EXCLUSIVE, SHARED_INTENTION_EXCLUSIVE };$/;"	m	class:bustub::LockManager::LockMode
INTENTION_SHARED	include/concurrency/lock_manager.h	/^  enum class LockMode { SHARED, EXCLUSIVE, INTENTION_SHARED, INTENTION_EXCLUSIVE, SHARED_INTENTION_EXCLUSIVE };$/;"	m	class:bustub::LockManager::LockMode
INTERNAL_PAGE_HEADER_SIZE	include/storage/page/b_plus_tree_internal_page.h	22;"	d
INTERNAL_PAGE_SLOT_CNT	include/storage/page/b_plus_tree_internal_page.h	23;"	d
INT_COMPARE_FUNC	type/integer_type.cpp	21;"	d	file:
INT_MODIFY_FUNC	type/integer_type.cpp	41;"	d	file:
INVALID	include/binder/bound_expression.h	/^  INVALID = 0,    \/**< Invalid expression type. *\/$/;"	m	class:bustub::ExpressionType
INVALID	include/binder/bound_order_by.h	/^  INVALID = 0, \/**< Invalid order by type. *\/$/;"	m	class:bustub::OrderByType
INVALID	include/binder/bound_table_ref.h	/^  INVALID = 0,         \/**< Invalid table reference type. *\/$/;"	m	class:bustub::TableReferenceType
INVALID	include/binder/expressions/bound_window.h	/^  INVALID = 0,$/;"	m	class:bustub::WindowBoundary
INVALID	include/binder/statement/explain_statement.h	/^  INVALID = 0,   \/**< Default explain mode *\/$/;"	e	enum:uint8_t
INVALID	include/binder/table_ref/bound_join_ref.h	/^  INVALID = 0, \/**< Invalid join type. *\/$/;"	m	class:bustub::JoinType
INVALID	include/common/exception.h	/^  INVALID = 0,$/;"	m	class:bustub::ExceptionType
INVALID	include/recovery/log_record.h	/^  INVALID = 0,$/;"	m	class:bustub::LogRecordType
INVALID	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
INVALID_FRAME_ID	include/common/config.h	/^static constexpr int INVALID_FRAME_ID = -1;  \/\/ invalid frame id$/;"	m	namespace:bustub
INVALID_INDEX_PAGE	include/storage/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	m	class:bustub::IndexPageType
INVALID_LSN	include/common/config.h	/^static constexpr int INVALID_LSN = -1;       \/\/ invalid log sequence number$/;"	m	namespace:bustub
INVALID_PAGE_ID	include/common/config.h	/^static constexpr int INVALID_PAGE_ID = -1;   \/\/ invalid page id$/;"	m	namespace:bustub
INVALID_STATEMENT	include/common/enums/statement_type.h	/^  INVALID_STATEMENT,        \/\/ invalid statement type$/;"	m	class:bustub::StatementType
INVALID_TS	include/storage/table/tuple.h	/^const timestamp_t INVALID_TS = -1;$/;"	m	namespace:bustub
INVALID_TXN_ID	include/common/config.h	/^static constexpr int INVALID_TXN_ID = -1;    \/\/ invalid transaction id$/;"	m	namespace:bustub
IncrGlobalDepth	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::IncrGlobalDepth() {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
IncrGlobalDepth	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::IncrGlobalDepth() {}$/;"	f	class:bustub::HashTableDirectoryPage
IncrLocalDepth	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::IncrLocalDepth(uint32_t bucket_idx) {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
IncrLocalDepth	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::IncrLocalDepth(uint32_t bucket_idx) {}$/;"	f	class:bustub::HashTableDirectoryPage
IncreaseDiskSpace	include/storage/disk/disk_scheduler.h	/^  void IncreaseDiskSpace(size_t pages) { disk_manager_->IncreaseDiskSpace(pages); }$/;"	f	class:bustub::DiskScheduler
IncreaseDiskSpace	storage/disk/disk_manager.cpp	/^void DiskManager::IncreaseDiskSpace(size_t pages) {$/;"	f	class:bustub::DiskManager
IncreaseDiskSpace	storage/disk/disk_manager_memory.cpp	/^void DiskManagerMemory::IncreaseDiskSpace(size_t pages) {$/;"	f	class:bustub::DiskManagerMemory
IncreaseSize	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::IncreaseSize(int amount) { SetSize(GetSize() + amount); }$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
IncreaseSize	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::IncreaseSize(int amount) { SetSize(GetSize() + amount); }$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
Index	include/storage/index/index.h	/^  explicit Index(std::unique_ptr<IndexMetadata> &&metadata) : metadata_{std::move(metadata)} {}$/;"	f	class:bustub::Index
Index	include/storage/index/index.h	/^class Index {$/;"	c	namespace:bustub
IndexInfo	include/catalog/catalog.h	/^  IndexInfo(Schema key_schema, std::string name, std::unique_ptr<Index> &&index, index_oid_t index_oid,$/;"	f	struct:bustub::IndexInfo
IndexInfo	include/catalog/catalog.h	/^struct IndexInfo {$/;"	s	namespace:bustub
IndexIterator	include/storage/index/index_iterator.h	/^  auto operator++() -> IndexIterator &;$/;"	m	class:bustub::IndexIterator
IndexIterator	include/storage/index/index_iterator.h	/^class IndexIterator {$/;"	c	namespace:bustub
IndexIterator	storage/index/index_iterator.cpp	/^INDEXITERATOR_TYPE::IndexIterator(BufferPoolManager *bpm, std::optional<ReadPageGuard> &&leaf_page_guard, int index)$/;"	f	class:bustub::INDEXITERATOR_TYPE
IndexMetadata	include/storage/index/index.h	/^  IndexMetadata(std::string index_name, std::string table_name, const Schema *tuple_schema,$/;"	f	class:bustub::IndexMetadata
IndexMetadata	include/storage/index/index.h	/^class IndexMetadata {$/;"	c	namespace:bustub
IndexPageType	include/storage/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	c	namespace:bustub
IndexScan	include/execution/plans/abstract_plan.h	/^  IndexScan,$/;"	m	class:bustub::PlanType
IndexScanExecutor	execution/index_scan_executor.cpp	/^IndexScanExecutor::IndexScanExecutor(ExecutorContext *exec_ctx, const IndexScanPlanNode *plan)$/;"	f	class:bustub::IndexScanExecutor
IndexScanExecutor	include/execution/executors/index_scan_executor.h	/^class IndexScanExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
IndexScanPlanNode	include/execution/plans/index_scan_plan.h	/^  IndexScanPlanNode(SchemaRef output, table_oid_t table_oid, index_oid_t index_oid,$/;"	f	class:bustub::IndexScanPlanNode
IndexScanPlanNode	include/execution/plans/index_scan_plan.h	/^class IndexScanPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
IndexStatement	binder/statement/index_statement.cpp	/^IndexStatement::IndexStatement(std::string index_name, std::unique_ptr<BoundBaseTableRef> table,$/;"	f	class:bustub::IndexStatement
IndexStatement	include/binder/statement/index_statement.h	/^class IndexStatement : public BoundStatement {$/;"	c	namespace:bustub
IndexType	include/catalog/catalog.h	/^enum class IndexType { BPlusTreeIndex, HashTableIndex, STLOrderedIndex, STLUnorderedIndex };$/;"	c	namespace:bustub
Init	execution/aggregation_executor.cpp	/^void AggregationExecutor::Init() {$/;"	f	class:bustub::AggregationExecutor
Init	execution/delete_executor.cpp	/^void DeleteExecutor::Init() { child_executor_->Init(); }$/;"	f	class:bustub::DeleteExecutor
Init	execution/external_merge_sort_executor.cpp	/^void ExternalMergeSortExecutor<K>::Init() {$/;"	f	class:bustub::ExternalMergeSortExecutor
Init	execution/filter_executor.cpp	/^void FilterExecutor::Init() {$/;"	f	class:bustub::FilterExecutor
Init	execution/hash_join_executor.cpp	/^void HashJoinExecutor::Init() {$/;"	f	class:bustub::HashJoinExecutor
Init	execution/index_scan_executor.cpp	/^void IndexScanExecutor::Init() {$/;"	f	class:bustub::IndexScanExecutor
Init	execution/init_check_executor.cpp	/^void InitCheckExecutor::Init() {$/;"	f	class:bustub::InitCheckExecutor
Init	execution/insert_executor.cpp	/^void InsertExecutor::Init() { child_executor_->Init(); }$/;"	f	class:bustub::InsertExecutor
Init	execution/limit_executor.cpp	/^void LimitExecutor::Init() {$/;"	f	class:bustub::LimitExecutor
Init	execution/mock_scan_executor.cpp	/^void MockScanExecutor::Init() {$/;"	f	class:bustub::MockScanExecutor
Init	execution/nested_index_join_executor.cpp	/^void NestIndexJoinExecutor::Init() {$/;"	f	class:bustub::NestIndexJoinExecutor
Init	execution/nested_loop_join_executor.cpp	/^void NestedLoopJoinExecutor::Init() {$/;"	f	class:bustub::NestedLoopJoinExecutor
Init	execution/projection_executor.cpp	/^void ProjectionExecutor::Init() {$/;"	f	class:bustub::ProjectionExecutor
Init	execution/seq_scan_executor.cpp	/^void SeqScanExecutor::Init() {$/;"	f	class:bustub::SeqScanExecutor
Init	execution/sort_executor.cpp	/^void SortExecutor::Init() {$/;"	f	class:bustub::SortExecutor
Init	execution/topn_check_executor.cpp	/^void TopNCheckExecutor::Init() {$/;"	f	class:bustub::TopNCheckExecutor
Init	execution/topn_executor.cpp	/^void TopNExecutor::Init() { throw NotImplementedException("TopNExecutor is not implemented"); }$/;"	f	class:bustub::TopNExecutor
Init	execution/topn_per_group_executor.cpp	/^void TopNPerGroupExecutor::Init() { throw NotImplementedException("TopNPerGroupExecutor is not implemented"); }$/;"	f	class:bustub::TopNPerGroupExecutor
Init	execution/update_executor.cpp	/^void UpdateExecutor::Init() {$/;"	f	class:bustub::UpdateExecutor
Init	execution/values_executor.cpp	/^void ValuesExecutor::Init() { cursor_ = 0; }$/;"	f	class:bustub::ValuesExecutor
Init	execution/window_function_executor.cpp	/^void WindowFunctionExecutor::Init() { throw NotImplementedException("WindowFunctionExecutor is not implemented"); }$/;"	f	class:bustub::WindowFunctionExecutor
Init	include/execution/executors/external_merge_sort_executor.h	/^  void Init(uint32_t max_size, uint32_t tuple_length) {$/;"	f	class:bustub::SortPage
Init	include/storage/page/tmp_tuple_page.h	/^  void Init(page_id_t page_id, uint32_t page_size) {$/;"	f	class:bustub::TmpTuplePage
Init	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::Init(int max_size) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
Init	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::Init(int max_size) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
Init	storage/page/extendible_htable_bucket_page.cpp	/^void ExtendibleHTableBucketPage<K, V, KC>::Init(uint32_t max_size) {$/;"	f	class:bustub::ExtendibleHTableBucketPage
Init	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::Init(uint32_t max_depth) {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
Init	storage/page/extendible_htable_header_page.cpp	/^void ExtendibleHTableHeaderPage::Init(uint32_t max_depth) {$/;"	f	class:bustub::ExtendibleHTableHeaderPage
Init	storage/page/table_page.cpp	/^void TablePage::Init() {$/;"	f	class:bustub::TablePage
InitCheck	include/execution/plans/abstract_plan.h	/^  InitCheck,$/;"	m	class:bustub::PlanType
InitCheckExecutor	execution/init_check_executor.cpp	/^InitCheckExecutor::InitCheckExecutor(ExecutorContext *exec_ctx, AbstractPlanNodeRef plan,$/;"	f	class:bustub::InitCheckExecutor
InitCheckExecutor	include/execution/executors/init_check_executor.h	/^class InitCheckExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
InitCheckOptions	include/execution/executor_context.h	/^  void InitCheckOptions(std::shared_ptr<CheckOptions> &&check_options) {$/;"	f	class:bustub::ExecutorContext
Insert	include/execution/executors/hash_join_executor.h	/^  void Insert(const HashJoinKey &join_key, const Tuple &tuple) {$/;"	f	class:bustub::SimpleHashJoinHashTable
Insert	include/execution/plans/abstract_plan.h	/^  Insert,$/;"	m	class:bustub::PlanType
InsertAllNodeAfterFrom	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::InsertAllNodeAfterFrom(BPlusTreeInternalPage *node,$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
InsertAllNodeAfterFrom	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::InsertAllNodeAfterFrom(BPlusTreeLeafPage *node) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
InsertAllNodeBefore	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::InsertAllNodeBefore(BPlusTreeLeafPage *node) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
InsertCombine	include/execution/executors/aggregation_executor.h	/^  void InsertCombine(const AggregateKey &agg_key, const AggregateValue &agg_val) {$/;"	f	class:bustub::SimpleAggregationHashTable
InsertEmptyCombine	include/execution/executors/aggregation_executor.h	/^  void InsertEmptyCombine() { ht_.insert({{std::vector<Value>()}, GenerateInitialAggregateValue()}); }$/;"	f	class:bustub::SimpleAggregationHashTable
InsertExecutor	execution/insert_executor.cpp	/^InsertExecutor::InsertExecutor(ExecutorContext *exec_ctx, const InsertPlanNode *plan,$/;"	f	class:bustub::InsertExecutor
InsertExecutor	include/execution/executors/insert_executor.h	/^class InsertExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
InsertFromFile	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::InsertFromFile(const std::filesystem::path &file_name) {$/;"	f	class:bustub::BPLUSTREE_TYPE
InsertIntoParent	storage/index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::InsertIntoParent(Context *ctx, page_id_t old_node_id, const KeyType &key, page_id_t new_node_id,$/;"	f	class:bustub::BPLUSTREE_TYPE
InsertKeyAfter	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::InsertKeyAfter(const KeyType &key, const KeyComparator &comparator) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
InsertNodeAfter	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::InsertNodeAfter(const KeyType &key, const ValueType &new_node_id) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
InsertNodeAfter	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::InsertNodeAfter(const KeyType &key, const ValueType &value) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
InsertNodeBefore	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::InsertNodeBefore(const KeyType &key, const ValueType &new_node_id) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
InsertNodeBefore	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::InsertNodeBefore(const KeyType &key, const ValueType &value) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
InsertPlanNode	include/execution/plans/insert_plan.h	/^  InsertPlanNode(SchemaRef output, AbstractPlanNodeRef child, table_oid_t table_oid)$/;"	f	class:bustub::InsertPlanNode
InsertPlanNode	include/execution/plans/insert_plan.h	/^class InsertPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
InsertStatement	binder/statement/insert_statement.cpp	/^InsertStatement::InsertStatement(std::unique_ptr<BoundBaseTableRef> table, std::unique_ptr<SelectStatement> select)$/;"	f	class:bustub::InsertStatement
InsertStatement	include/binder/statement/insert_statement.h	/^class InsertStatement : public BoundStatement {$/;"	c	namespace:bustub
IntComparator	include/storage/index/int_comparator.h	/^class IntComparator {$/;"	c	namespace:bustub
Integer	primer/trie.cpp	/^template auto Trie::Get(std::string_view key) const -> const Integer *;$/;"	m	namespace:bustub	file:
IntegerParentType	include/type/integer_parent_type.h	/^class IntegerParentType : public NumericType {$/;"	c	namespace:bustub
IntegerParentType	type/integer_parent_type.cpp	/^IntegerParentType::IntegerParentType(TypeId type) : NumericType(type) {}$/;"	f	class:bustub::IntegerParentType
IntegerType	include/type/integer_type.h	/^class IntegerType : public IntegerParentType {$/;"	c	namespace:bustub
IntegerType	type/integer_type.cpp	/^IntegerType::IntegerType(TypeId type) : IntegerParentType(type) {}$/;"	f	class:bustub::IntegerType
IsTupleContentEqual	include/storage/table/tuple.h	/^  friend inline auto IsTupleContentEqual(const Tuple &a, const Tuple &b) { return a.data_ == b.data_; }$/;"	f	class:bustub::Tuple
IsolationLevel	include/concurrency/transaction.h	/^enum class IsolationLevel { READ_UNCOMMITTED, SNAPSHOT_ISOLATION, SERIALIZABLE };$/;"	c	namespace:bustub
Iterator	include/execution/executors/aggregation_executor.h	/^    explicit Iterator(std::unordered_map<AggregateKey, AggregateValue>::const_iterator iter) : iter_{iter} {}$/;"	f	class:bustub::SimpleAggregationHashTable::Iterator
Iterator	include/execution/executors/aggregation_executor.h	/^  class Iterator {$/;"	c	class:bustub::SimpleAggregationHashTable
Iterator	include/execution/executors/external_merge_sort_executor.h	/^    Iterator(const Iterator &other) {$/;"	f	class:bustub::MergeSortRun::Iterator
Iterator	include/execution/executors/external_merge_sort_executor.h	/^    Iterator(const MergeSortRun *run, BufferPoolManager *bpm) : run_(run), bpm_(bpm) {$/;"	f	class:bustub::MergeSortRun::Iterator
Iterator	include/execution/executors/external_merge_sort_executor.h	/^    auto operator=(const Iterator &other) -> Iterator & = default;$/;"	m	class:bustub::MergeSortRun::Iterator
Iterator	include/execution/executors/external_merge_sort_executor.h	/^    explicit Iterator(const MergeSortRun *run) : run_(run) {}$/;"	f	class:bustub::MergeSortRun::Iterator
Iterator	include/execution/executors/external_merge_sort_executor.h	/^  class Iterator {$/;"	c	class:bustub::MergeSortRun
Iterator	include/execution/executors/hash_join_executor.h	/^    explicit Iterator(std::unordered_map<HashJoinKey, std::vector<Tuple>>::const_iterator iter) : iter_{iter} {}$/;"	f	class:bustub::SimpleHashJoinHashTable::Iterator
Iterator	include/execution/executors/hash_join_executor.h	/^  class Iterator {$/;"	c	class:bustub::SimpleHashJoinHashTable
JOIN	include/binder/bound_table_ref.h	/^  JOIN = 3,            \/**< Output of join. *\/$/;"	m	class:bustub::TableReferenceType
JoinType	include/binder/table_ref/bound_join_ref.h	/^enum class JoinType : uint8_t {$/;"	c	namespace:bustub
KEYWORD_RESERVED	include/binder/simplified_token.h	/^enum class KeywordCategory : uint8_t { KEYWORD_RESERVED, KEYWORD_UNRESERVED, KEYWORD_TYPE_FUNC, KEYWORD_COL_NAME };$/;"	m	class:bustub::KeywordCategory
KEYWORD_TYPE_FUNC	include/binder/simplified_token.h	/^enum class KeywordCategory : uint8_t { KEYWORD_RESERVED, KEYWORD_UNRESERVED, KEYWORD_TYPE_FUNC, KEYWORD_COL_NAME };$/;"	m	class:bustub::KeywordCategory
KEYWORD_UNRESERVED	include/binder/simplified_token.h	/^enum class KeywordCategory : uint8_t { KEYWORD_RESERVED, KEYWORD_UNRESERVED, KEYWORD_TYPE_FUNC, KEYWORD_COL_NAME };$/;"	m	class:bustub::KeywordCategory
K_USECS_PER_DATE	include/type/timestamp_type.h	/^  static constexpr uint64_t K_USECS_PER_DATE = 86400000000UL;$/;"	m	class:bustub::TimestampType
KeyType	include/storage/page/b_plus_tree_internal_page.h	/^  auto KeyAt(int index) const -> KeyType;$/;"	m	class:bustub::BPlusTreeInternalPage
KeyType	include/storage/page/b_plus_tree_leaf_page.h	/^  auto KeyAt(int index) const -> KeyType;$/;"	m	class:bustub::BPlusTreeLeafPage
KeyType	include/storage/page/extendible_htable_bucket_page.h	/^  auto KeyAt(uint32_t bucket_idx) const -> KeyType;$/;"	m	class:bustub::ExtendibleHTableBucketPage
KeyType	include/storage/page/hash_table_block_page.h	/^  auto KeyAt(slot_offset_t bucket_ind) const -> KeyType;$/;"	m	class:bustub::HashTableBlockPage
KeyType	include/storage/page/hash_table_bucket_page.h	/^  auto KeyAt(uint32_t bucket_idx) const -> KeyType;$/;"	m	class:bustub::HashTableBucketPage
KeywordCategory	include/binder/simplified_token.h	/^enum class KeywordCategory : uint8_t { KEYWORD_RESERVED, KEYWORD_UNRESERVED, KEYWORD_TYPE_FUNC, KEYWORD_COL_NAME };$/;"	c	namespace:bustub
KeywordHelper	include/binder/keyword_helper.h	/^class KeywordHelper {$/;"	c	namespace:bustub
LEAF_PAGE	include/storage/page/b_plus_tree_page.h	/^enum class IndexPageType { INVALID_INDEX_PAGE = 0, LEAF_PAGE, INTERNAL_PAGE };$/;"	m	class:bustub::IndexPageType
LEAF_PAGE_HEADER_SIZE	include/storage/page/b_plus_tree_leaf_page.h	22;"	d
LEAF_PAGE_SLOT_CNT	include/storage/page/b_plus_tree_leaf_page.h	23;"	d
LEFT	include/binder/table_ref/bound_join_ref.h	/^  LEFT = 1,    \/**< Left join. *\/$/;"	m	class:bustub::JoinType
LOG_BUFFER_SIZE	include/common/config.h	/^static constexpr int LOG_BUFFER_SIZE = ((BUFFER_POOL_SIZE + 1) * BUSTUB_PAGE_SIZE);  \/\/ size of a log buffer in byte$/;"	m	namespace:bustub
LOG_DEBUG	include/common/logger.h	146;"	d
LOG_DEBUG	include/common/logger.h	152;"	d
LOG_DEBUG_ENABLED	include/common/logger.h	141;"	d
LOG_DEBUG_ENABLED	include/common/logger.h	144;"	d
LOG_ERROR	include/common/logger.h	101;"	d
LOG_ERROR	include/common/logger.h	107;"	d
LOG_ERROR_ENABLED	include/common/logger.h	96;"	d
LOG_ERROR_ENABLED	include/common/logger.h	99;"	d
LOG_INFO	include/common/logger.h	131;"	d
LOG_INFO	include/common/logger.h	137;"	d
LOG_INFO_ENABLED	include/common/logger.h	126;"	d
LOG_INFO_ENABLED	include/common/logger.h	129;"	d
LOG_LEVEL	include/common/logger.h	74;"	d
LOG_LEVEL	include/common/logger.h	78;"	d
LOG_LEVEL_ALL	include/common/logger.h	63;"	d
LOG_LEVEL_DEBUG	include/common/logger.h	61;"	d
LOG_LEVEL_ERROR	include/common/logger.h	58;"	d
LOG_LEVEL_INFO	include/common/logger.h	60;"	d
LOG_LEVEL_OFF	include/common/logger.h	57;"	d
LOG_LEVEL_TRACE	include/common/logger.h	62;"	d
LOG_LEVEL_WARN	include/common/logger.h	59;"	d
LOG_LOG_TIME_FORMAT	include/common/logger.h	65;"	d
LOG_OUTPUT_STREAM	include/common/logger.h	66;"	d
LOG_TRACE	include/common/logger.h	161;"	d
LOG_TRACE	include/common/logger.h	167;"	d
LOG_TRACE_ENABLED	include/common/logger.h	156;"	d
LOG_TRACE_ENABLED	include/common/logger.h	159;"	d
LOG_WARN	include/common/logger.h	116;"	d
LOG_WARN	include/common/logger.h	122;"	d
LOG_WARN_ENABLED	include/common/logger.h	111;"	d
LOG_WARN_ENABLED	include/common/logger.h	114;"	d
LRUKNode	buffer/lru_k_replacer.cpp	/^LRUKNode::LRUKNode(size_t k, frame_id_t fid) : k_(k), fid_(fid) {}$/;"	f	class:bustub::LRUKNode
LRUKNode	buffer/lru_k_replacer.cpp	/^LRUKNode::LRUKNode(size_t k, frame_id_t fid, size_t current_timestamp) : k_(k), fid_(fid) {$/;"	f	class:bustub::LRUKNode
LRUKNode	include/buffer/lru_k_replacer.h	/^class LRUKNode {$/;"	c	namespace:bustub
LRUKReplacer	buffer/lru_k_replacer.cpp	/^LRUKReplacer::LRUKReplacer(size_t num_frames, size_t k) : replacer_size_(num_frames), k_(k) {}$/;"	f	class:bustub::LRUKReplacer
LRUKReplacer	include/buffer/lru_k_replacer.h	/^class LRUKReplacer {$/;"	c	namespace:bustub
LRUK_REPLACER_K	include/common/config.h	/^static constexpr int LRUK_REPLACER_K = 10;                                           \/\/ backward k-distance for lru-k$/;"	m	namespace:bustub
LRUReplacer	buffer/lru_replacer.cpp	/^LRUReplacer::LRUReplacer(size_t num_pages) {}$/;"	f	class:bustub::LRUReplacer
LRUReplacer	include/buffer/lru_replacer.h	/^class LRUReplacer : public Replacer {$/;"	c	namespace:bustub
LTrim	common/util/string_util.cpp	/^void StringUtil::LTrim(std::string *str) {$/;"	f	class:bustub::StringUtil
LessThan	include/execution/expressions/comparison_expression.h	/^enum class ComparisonType { Equal, NotEqual, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual };$/;"	m	class:bustub::ComparisonType
LessThanOrEqual	include/execution/expressions/comparison_expression.h	/^enum class ComparisonType { Equal, NotEqual, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual };$/;"	m	class:bustub::ComparisonType
Limit	include/execution/plans/abstract_plan.h	/^  Limit,$/;"	m	class:bustub::PlanType
LimitExecutor	execution/limit_executor.cpp	/^LimitExecutor::LimitExecutor(ExecutorContext *exec_ctx, const LimitPlanNode *plan,$/;"	f	class:bustub::LimitExecutor
LimitExecutor	include/execution/executors/limit_executor.h	/^class LimitExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
LimitPlanNode	include/execution/plans/limit_plan.h	/^  LimitPlanNode(SchemaRef output, AbstractPlanNodeRef child, std::size_t limit)$/;"	f	class:bustub::LimitPlanNode
LimitPlanNode	include/execution/plans/limit_plan.h	/^class LimitPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
LinearProbeHashTable	container/disk/hash/linear_probe_hash_table.cpp	/^HASH_TABLE_TYPE::LinearProbeHashTable(const std::string &name, BufferPoolManager *buffer_pool_manager,$/;"	f	class:bustub::HASH_TABLE_TYPE
LinearProbeHashTable	include/container/disk/hash/linear_probe_hash_table.h	/^class LinearProbeHashTable {$/;"	c	namespace:bustub
LinearProbeHashTableIndex	include/storage/index/linear_probe_hash_table_index.h	/^class LinearProbeHashTableIndex : public Index {$/;"	c	namespace:bustub
LinearProbeHashTableIndex	storage/index/linear_probe_hash_table_index.cpp	/^HASH_TABLE_INDEX_TYPE::LinearProbeHashTableIndex(std::unique_ptr<IndexMetadata> &&metadata,$/;"	f	class:bustub::HASH_TABLE_INDEX_TYPE
Load	primer/orset_driver.cpp	/^void ORSetNode<T>::Load() {$/;"	f	class:bustub::ORSetNode
LockManager	include/concurrency/lock_manager.h	/^class LockManager {$/;"	c	namespace:bustub
LockMode	include/concurrency/lock_manager.h	/^  enum class LockMode { SHARED, EXCLUSIVE, INTENTION_SHARED, INTENTION_EXCLUSIVE, SHARED_INTENTION_EXCLUSIVE };$/;"	c	class:bustub::LockManager
LockRequest	include/concurrency/lock_manager.h	/^    LockRequest(txn_id_t txn_id, LockMode lock_mode, table_oid_t oid) \/** Table lock request *\/$/;"	f	class:bustub::LockManager::LockRequest
LockRequest	include/concurrency/lock_manager.h	/^    LockRequest(txn_id_t txn_id, LockMode lock_mode, table_oid_t oid, RID rid) \/** Row lock request *\/$/;"	f	class:bustub::LockManager::LockRequest
LockRequest	include/concurrency/lock_manager.h	/^  class LockRequest {$/;"	c	class:bustub::LockManager
LockRequestQueue	include/concurrency/lock_manager.h	/^  class LockRequestQueue {$/;"	c	class:bustub::LockManager
LogManager	include/recovery/log_manager.h	/^  explicit LogManager(DiskManager *disk_manager)$/;"	f	class:bustub::LogManager
LogManager	include/recovery/log_manager.h	/^class LogManager {$/;"	c	namespace:bustub
LogRecord	include/recovery/log_record.h	/^  LogRecord(txn_id_t txn_id, lsn_t prev_lsn, LogRecordType log_record_type)$/;"	f	class:bustub::LogRecord
LogRecord	include/recovery/log_record.h	/^  LogRecord(txn_id_t txn_id, lsn_t prev_lsn, LogRecordType log_record_type, const RID &rid, const Tuple &tuple)$/;"	f	class:bustub::LogRecord
LogRecord	include/recovery/log_record.h	/^  LogRecord(txn_id_t txn_id, lsn_t prev_lsn, LogRecordType log_record_type, const RID &update_rid,$/;"	f	class:bustub::LogRecord
LogRecord	include/recovery/log_record.h	/^  LogRecord(txn_id_t txn_id, lsn_t prev_lsn, LogRecordType log_record_type, page_id_t prev_page_id, page_id_t page_id)$/;"	f	class:bustub::LogRecord
LogRecord	include/recovery/log_record.h	/^class LogRecord {$/;"	c	namespace:bustub
LogRecordType	include/recovery/log_record.h	/^enum class LogRecordType {$/;"	c	namespace:bustub
LogRecovery	include/recovery/log_recovery.h	/^  LogRecovery(DiskManager *disk_manager, BufferPoolManager *buffer_pool_manager)$/;"	f	class:bustub::LogRecovery
LogRecovery	include/recovery/log_recovery.h	/^class LogRecovery {$/;"	c	namespace:bustub
Logic	include/execution/expressions/abstract_expression.h	/^  Logic,$/;"	m	class:bustub::ExecExpressionType
LogicExpression	include/execution/expressions/logic_expression.h	/^  LogicExpression(AbstractExpressionRef left, AbstractExpressionRef right, LogicType logic_type)$/;"	f	class:bustub::LogicExpression
LogicExpression	include/execution/expressions/logic_expression.h	/^class LogicExpression : public AbstractExpression {$/;"	c	namespace:bustub
LogicType	include/execution/expressions/logic_expression.h	/^enum class LogicType { And, Or };$/;"	c	namespace:bustub
Lookup	include/buffer/lru_k_replacer.h	/^enum class AccessType { Unknown = 0, Lookup, Scan, Index };$/;"	m	class:bustub::AccessType
Lower	include/execution/expressions/string_expression.h	/^enum class StringExecExpressionType { Lower, Upper };$/;"	m	class:bustub::StringExecExpressionType
MARKDELETE	include/recovery/log_record.h	/^  MARKDELETE,$/;"	m	class:bustub::LogRecordType
MISMATCH_TYPE	include/common/exception.h	/^  MISMATCH_TYPE = 5,$/;"	m	class:bustub::ExceptionType
MappingType	include/storage/page/b_plus_tree_page.h	23;"	d
MappingType	include/storage/page/hash_table_page_defs.h	15;"	d
MaxAggregate	include/execution/plans/window_plan.h	/^enum class WindowFunctionType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate, Rank };$/;"	m	class:bustub::WindowFunctionType
Merge	include/primer/orset_driver.h	/^  inline void Merge(const ORSet<T> to_be_merged) { orset_.Merge(to_be_merged); }$/;"	f	class:bustub::ORSetNode
Merge	primer/orset.cpp	/^void ORSet<T>::Merge(const ORSet<T> &other) {$/;"	f	class:bustub::ORSet
MergeSortRun	include/execution/executors/external_merge_sort_executor.h	/^                  size_t tuple_length) -> MergeSortRun;$/;"	m	class:bustub::ExternalMergeSortExecutor
MergeSortRun	include/execution/executors/external_merge_sort_executor.h	/^  MergeSortRun(std::vector<page_id_t> pages, BufferPoolManager *bpm) : pages_(std::move(pages)), bpm_(bpm) {}$/;"	f	class:bustub::MergeSortRun
MergeSortRun	include/execution/executors/external_merge_sort_executor.h	/^class MergeSortRun {$/;"	c	namespace:bustub
MinAggregate	include/execution/plans/aggregation_plan.h	/^enum class AggregationType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate };$/;"	m	class:bustub::AggregationType
MinAggregate	include/execution/plans/window_plan.h	/^enum class WindowFunctionType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate, Rank };$/;"	m	class:bustub::WindowFunctionType
MockScan	include/execution/plans/abstract_plan.h	/^  MockScan,$/;"	m	class:bustub::PlanType
MockScanExecutor	execution/mock_scan_executor.cpp	/^MockScanExecutor::MockScanExecutor(ExecutorContext *exec_ctx, const MockScanPlanNode *plan)$/;"	f	class:bustub::MockScanExecutor
MockScanExecutor	include/execution/executors/mock_scan_executor.h	/^class MockScanExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
MockScanPlanNode	include/execution/plans/mock_scan_plan.h	/^  MockScanPlanNode(SchemaRef output, std::string table)$/;"	f	class:bustub::MockScanPlanNode
MockScanPlanNode	include/execution/plans/mock_scan_plan.h	/^class MockScanPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
ModifyUndoLog	include/concurrency/transaction.h	/^  inline auto ModifyUndoLog(int log_idx, UndoLog new_log) {$/;"	f	class:bustub::Transaction
MoveBlocked	include/primer/trie.h	/^  auto operator=(const MoveBlocked &) -> MoveBlocked & = delete;$/;"	m	class:bustub::MoveBlocked
MoveBlocked	include/primer/trie.h	/^  explicit MoveBlocked(std::future<int> wait) : wait_(std::move(wait)) {}$/;"	f	class:bustub::MoveBlocked
MoveBlocked	include/primer/trie.h	/^class MoveBlocked {$/;"	c	namespace:bustub
MoveBlocked	primer/trie.cpp	/^template auto Trie::Get(std::string_view key) const -> const MoveBlocked *;$/;"	m	namespace:bustub	file:
MoveFirstToEndOf	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveFirstToEndOf(BPlusTreeInternalPage *recipient) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
MoveFirstToEndOf	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveFirstToEndOf(BPlusTreeLeafPage *split_node) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
MoveHalfTo	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveHalfTo(BPlusTreeLeafPage *recipient) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
MoveHalfValueTo	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveHalfValueTo(BPlusTreeInternalPage *recipient) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
MoveKVForward	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveKVForward() {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
MoveLastToFrontOf	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::MoveLastToFrontOf(BPlusTreeInternalPage *recipient) {$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
MoveLastToFrontOf	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::MoveLastToFrontOf(BPlusTreeLeafPage *split_node) {$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
NEWPAGE	include/recovery/log_record.h	/^  NEWPAGE,$/;"	m	class:bustub::LogRecordType
NOT_IMPLEMENTED	include/common/exception.h	/^  NOT_IMPLEMENTED = 11,$/;"	m	class:bustub::ExceptionType
NestIndexJoinExecutor	execution/nested_index_join_executor.cpp	/^NestIndexJoinExecutor::NestIndexJoinExecutor(ExecutorContext *exec_ctx, const NestedIndexJoinPlanNode *plan,$/;"	f	class:bustub::NestIndexJoinExecutor
NestIndexJoinExecutor	include/execution/executors/nested_index_join_executor.h	/^class NestIndexJoinExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
NestedIndexJoin	include/execution/plans/abstract_plan.h	/^  NestedIndexJoin,$/;"	m	class:bustub::PlanType
NestedIndexJoinPlanNode	include/execution/plans/nested_index_join_plan.h	/^  NestedIndexJoinPlanNode(SchemaRef output, AbstractPlanNodeRef child, AbstractExpressionRef key_predicate,$/;"	f	class:bustub::NestedIndexJoinPlanNode
NestedIndexJoinPlanNode	include/execution/plans/nested_index_join_plan.h	/^class NestedIndexJoinPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
NestedLoopJoin	include/execution/plans/abstract_plan.h	/^  NestedLoopJoin,$/;"	m	class:bustub::PlanType
NestedLoopJoinExecutor	execution/nested_loop_join_executor.cpp	/^NestedLoopJoinExecutor::NestedLoopJoinExecutor(ExecutorContext *exec_ctx, const NestedLoopJoinPlanNode *plan,$/;"	f	class:bustub::NestedLoopJoinExecutor
NestedLoopJoinExecutor	include/execution/executors/nested_loop_join_executor.h	/^class NestedLoopJoinExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
NestedLoopJoinPlanNode	include/execution/plans/nested_loop_join_plan.h	/^  NestedLoopJoinPlanNode(SchemaRef output_schema, AbstractPlanNodeRef left, AbstractPlanNodeRef right,$/;"	f	class:bustub::NestedLoopJoinPlanNode
NestedLoopJoinPlanNode	include/execution/plans/nested_loop_join_plan.h	/^class NestedLoopJoinPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
NoopWriter	include/common/bustub_instance.h	/^class NoopWriter : public ResultWriter {$/;"	c	namespace:bustub
NotEqual	include/execution/expressions/comparison_expression.h	/^enum class ComparisonType { Equal, NotEqual, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual };$/;"	m	class:bustub::ComparisonType
NotImplementedException	include/common/exception.h	/^  explicit NotImplementedException(const std::string &msg) : Exception(ExceptionType::NOT_IMPLEMENTED, msg) {}$/;"	f	class:bustub::NotImplementedException
NotImplementedException	include/common/exception.h	/^class NotImplementedException : public Exception {$/;"	c	namespace:bustub
NumericType	include/type/numeric_type.h	/^  explicit NumericType(TypeId type) : Type(type) {}$/;"	f	class:bustub::NumericType
NumericType	include/type/numeric_type.h	/^class NumericType : public Type {$/;"	c	namespace:bustub
OBJECTLENGTH_NULL	include/type/limits.h	/^static constexpr int OBJECTLENGTH_NULL = -1;$/;"	m	namespace:bustub
OFFSET_LSN	include/storage/page/page.h	/^  static constexpr size_t OFFSET_LSN = 4;$/;"	m	class:bustub::Page
OFFSET_PAGE_START	include/storage/page/page.h	/^  static constexpr size_t OFFSET_PAGE_START = 0;$/;"	m	class:bustub::Page
OPTIMIZER	include/binder/statement/explain_statement.h	/^  OPTIMIZER = 4, \/**< Show optimizer results. *\/$/;"	e	enum:uint8_t
ORSet	include/primer/orset.h	/^class ORSet {$/;"	c	namespace:bustub
ORSetDriver	include/primer/orset_driver.h	/^class ORSetDriver {$/;"	c	namespace:bustub
ORSetDriver	primer/orset_driver.cpp	/^ORSetDriver<T>::ORSetDriver(size_t num_orset_node) : version_counter_(num_orset_node) {$/;"	f	class:bustub::ORSetDriver
ORSetNode	include/primer/orset_driver.h	/^  explicit ORSetNode(ORSetDriver<T> *driver, size_t node_id, size_t n)$/;"	f	class:bustub::ORSetNode
ORSetNode	include/primer/orset_driver.h	/^class ORSetNode {$/;"	c	namespace:bustub
OUTER	include/binder/table_ref/bound_join_ref.h	/^  OUTER = 5    \/**< Outer join. *\/$/;"	m	class:bustub::JoinType
OUT_OF_MEMORY	include/common/exception.h	/^  OUT_OF_MEMORY = 9,$/;"	m	class:bustub::ExceptionType
OUT_OF_RANGE	include/common/exception.h	/^  OUT_OF_RANGE = 1,$/;"	m	class:bustub::ExceptionType
OVERFLOW_BUCKET_SIZE	include/primer/hyperloglog_presto.h	17;"	d
OneCell	include/common/bustub_instance.h	/^  virtual void OneCell(const std::string &cell) {$/;"	f	class:bustub::ResultWriter
Operation	include/storage/index/b_plus_tree.h	/^enum class Operation : int8_t {$/;"	c	namespace:bustub
OptiRemove	storage/index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::OptiRemove(Context *ctx, const KeyType &key) {$/;"	f	class:bustub::BPLUSTREE_TYPE
Optimizer	include/optimizer/optimizer.h	/^  explicit Optimizer(const Catalog &catalog, bool force_starter_rule)$/;"	f	class:bustub::Optimizer
Optimizer	include/optimizer/optimizer.h	/^class Optimizer {$/;"	c	namespace:bustub
OptimizerHelperFunction	optimizer/optimizer_internal.cpp	/^void OptimizerHelperFunction() {}$/;"	f	namespace:bustub
OrderByType	include/binder/bound_order_by.h	/^enum class OrderByType : uint8_t {$/;"	c	namespace:bustub
OutputLogHeader	include/common/logger.h	/^inline void OutputLogHeader(const char *file, int line, const char *func, int level) {$/;"	f	namespace:bustub
PLANNER	include/binder/statement/explain_statement.h	/^  PLANNER = 2,   \/**< Show planner results. *\/$/;"	e	enum:uint8_t
PRIME_FACTOR	include/common/util/hash_util.h	/^  static const hash_t PRIME_FACTOR = 10000019;$/;"	m	class:bustub::HashUtil
Page	include/storage/page/page.h	/^  Page() : data_(static_cast<size_t>(BUSTUB_PAGE_SIZE), 0), page_id_(INVALID_PAGE_ID) {$/;"	f	class:bustub::Page
Page	include/storage/page/page.h	/^class Page {$/;"	c	namespace:bustub
PageVersionInfo	include/concurrency/transaction_manager.h	/^  struct PageVersionInfo {$/;"	s	class:bustub::TransactionManager
ParseAndExpression	optimizer/nlj_as_hash_join.cpp	/^void ParseAndExpression(const AbstractExpressionRef &expr, std::vector<AbstractExpressionRef> &left_exprs,$/;"	f	namespace:bustub
ParseAndSave	binder/binder.cpp	/^void Binder::ParseAndSave(const std::string &query) {$/;"	f	class:bustub::Binder
ParserKeyword	include/binder/simplified_token.h	/^struct ParserKeyword {$/;"	s	namespace:bustub
PerformChecks	include/execution/execution_engine.h	/^  void PerformChecks(ExecutorContext *exec_ctx) {$/;"	f	class:bustub::ExecutionEngine
Pin	buffer/clock_replacer.cpp	/^void ClockReplacer::Pin(frame_id_t frame_id) {}$/;"	f	class:bustub::ClockReplacer
Pin	buffer/lru_replacer.cpp	/^void LRUReplacer::Pin(frame_id_t frame_id) {}$/;"	f	class:bustub::LRUReplacer
PlanQuery	planner/planner.cpp	/^void Planner::PlanQuery(const BoundStatement &statement) {$/;"	f	class:bustub::Planner
PlanType	include/execution/plans/abstract_plan.h	/^  virtual auto GetType() const -> PlanType = 0;$/;"	m	class:bustub::AbstractPlanNode
PlanType	include/execution/plans/abstract_plan.h	/^enum class PlanType {$/;"	c	namespace:bustub
Planner	include/planner/planner.h	/^  explicit Planner(const Catalog &catalog) : catalog_(catalog) {}$/;"	f	class:bustub::Planner
Planner	include/planner/planner.h	/^class Planner {$/;"	c	namespace:bustub
PlannerContext	include/planner/planner.h	/^class PlannerContext {$/;"	c	namespace:bustub
Plus	include/execution/expressions/arithmetic_expression.h	/^enum class ArithmeticType { Plus, Minus };$/;"	m	class:bustub::ArithmeticType
PollExecutor	include/execution/execution_engine.h	/^  static void PollExecutor(AbstractExecutor *executor, const AbstractPlanNodeRef &plan,$/;"	f	class:bustub::ExecutionEngine
PopulateNewRoot	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::PopulateNewRoot(const ValueType &old_node_id, const KeyType &new_key,$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
PostProcessLatency	include/storage/disk/disk_manager_memory.h	/^  void PostProcessLatency(page_id_t page_id) {$/;"	f	class:bustub::DiskManagerUnlimitedMemory
Print	include/storage/index/b_plus_tree.h	/^  void Print() {$/;"	f	class:bustub::Context
Print	include/storage/index/b_plus_tree.h	/^  void Print(std::ostream &out_buf) {$/;"	f	struct:bustub::PrintableBPlusTree
Print	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::Print(BufferPoolManager *bpm) {$/;"	f	class:bustub::BPLUSTREE_TYPE
PrintBucket	storage/page/extendible_htable_page_utils.cpp	/^void ExtendibleHTableBucketPage<K, V, KC>::PrintBucket() const {$/;"	f	class:bustub::ExtendibleHTableBucketPage
PrintBucket	storage/page/hash_table_bucket_page.cpp	/^void HASH_TABLE_BUCKET_TYPE::PrintBucket() {$/;"	f	class:bustub::HASH_TABLE_BUCKET_TYPE
PrintDirectory	storage/page/extendible_htable_page_utils.cpp	/^void ExtendibleHTableDirectoryPage::PrintDirectory() const {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
PrintDirectory	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::PrintDirectory() {$/;"	f	class:bustub::HashTableDirectoryPage
PrintHT	container/disk/hash/disk_extendible_hash_table_utils.cpp	/^void DiskExtendibleHashTable<K, V, KC>::PrintHT() const {$/;"	f	class:bustub::DiskExtendibleHashTable
PrintHeader	storage/page/extendible_htable_page_utils.cpp	/^void ExtendibleHTableHeaderPage::PrintHeader() const {$/;"	f	class:bustub::ExtendibleHTableHeaderPage
PrintTree	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::PrintTree(page_id_t page_id, const BPlusTreePage *page) {$/;"	f	class:bustub::BPLUSTREE_TYPE
PrintableBPlusTree	include/storage/index/b_plus_tree.h	/^  auto ToPrintableBPlusTree(page_id_t root_id) -> PrintableBPlusTree;$/;"	m	class:bustub::BPlusTree
PrintableBPlusTree	include/storage/index/b_plus_tree.h	/^struct PrintableBPlusTree {$/;"	s	namespace:bustub
ProcessLatency	include/storage/disk/disk_manager_memory.h	/^  void ProcessLatency(page_id_t page_id) {$/;"	f	class:bustub::DiskManagerUnlimitedMemory
Projection	include/execution/plans/abstract_plan.h	/^  Projection,$/;"	m	class:bustub::PlanType
ProjectionExecutor	execution/projection_executor.cpp	/^ProjectionExecutor::ProjectionExecutor(ExecutorContext *exec_ctx, const ProjectionPlanNode *plan,$/;"	f	class:bustub::ProjectionExecutor
ProjectionExecutor	include/execution/executors/projection_executor.h	/^class ProjectionExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
ProjectionPlanNode	include/execution/plans/projection_plan.h	/^  ProjectionPlanNode(SchemaRef output, std::vector<AbstractExpressionRef> expressions, AbstractPlanNodeRef child)$/;"	f	class:bustub::ProjectionPlanNode
ProjectionPlanNode	include/execution/plans/projection_plan.h	/^class ProjectionPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
Put	include/common/channel.h	/^  void Put(T element) {$/;"	f	class:bustub::Channel
Put	primer/trie_store.cpp	/^void TrieStore::Put(std::string_view key, T value) {$/;"	f	class:bustub::TrieStore
READ_UNCOMMITTED	include/concurrency/transaction.h	/^enum class IsolationLevel { READ_UNCOMMITTED, SNAPSHOT_ISOLATION, SERIALIZABLE };$/;"	m	class:bustub::IsolationLevel
REMOVE	include/storage/index/b_plus_tree.h	/^  REMOVE,$/;"	m	class:bustub::Operation
RID	include/common/rid.h	/^  RID(page_id_t page_id, uint32_t slot_num) : page_id_(page_id), slot_num_(slot_num) {}$/;"	f	class:bustub::RID
RID	include/common/rid.h	/^  explicit RID(int64_t rid) : page_id_(static_cast<page_id_t>(rid >> 32)), slot_num_(static_cast<uint32_t>(rid)) {}$/;"	f	class:bustub::RID
RID	include/common/rid.h	/^class RID {$/;"	c	namespace:bustub
RID	include/execution/executors/mock_scan_executor.h	/^  static auto MakeDummyRID() -> RID;$/;"	m	class:bustub::MockScanExecutor
RID	include/storage/table/table_iterator.h	/^  auto GetRID() -> RID;$/;"	m	class:bustub::TableIterator
RIGHT	include/binder/table_ref/bound_join_ref.h	/^  RIGHT = 3,   \/**< Right join. *\/$/;"	m	class:bustub::JoinType
RLatch	include/storage/page/page.h	/^  inline void RLatch() { rwlatch_.lock_shared(); }$/;"	f	class:bustub::Page
RLock	include/common/rwlatch.h	/^  void RLock() { mutex_.lock_shared(); }$/;"	f	class:bustub::ReaderWriterLatch
ROLLBACKDELETE	include/recovery/log_record.h	/^  ROLLBACKDELETE,$/;"	m	class:bustub::LogRecordType
RTrim	common/util/string_util.cpp	/^void StringUtil::RTrim(std::string *str) {$/;"	f	class:bustub::StringUtil
RUNNING	include/concurrency/transaction.h	/^enum class TransactionState { RUNNING = 0, TAINTED, COMMITTED = 100, ABORTED };$/;"	m	class:bustub::TransactionState
RUnlatch	include/storage/page/page.h	/^  inline void RUnlatch() { rwlatch_.unlock_shared(); }$/;"	f	class:bustub::Page
RUnlock	include/common/rwlatch.h	/^  void RUnlock() { mutex_.unlock_shared(); }$/;"	f	class:bustub::ReaderWriterLatch
ReadPage	storage/disk/disk_manager.cpp	/^void DiskManager::ReadPage(page_id_t page_id, char *page_data) {$/;"	f	class:bustub::DiskManager
ReadPage	storage/disk/disk_manager_memory.cpp	/^void DiskManagerMemory::ReadPage(page_id_t page_id, char *page_data) {$/;"	f	class:bustub::DiskManagerMemory
ReadPageGuard	include/buffer/buffer_pool_manager.h	/^  auto ReadPage(page_id_t page_id, AccessType access_type = AccessType::Unknown) -> ReadPageGuard;$/;"	m	class:bustub::BufferPoolManager
ReadPageGuard	include/storage/page/page_guard.h	/^  auto operator=(const ReadPageGuard &) -> ReadPageGuard & = delete;$/;"	m	class:bustub::ReadPageGuard
ReadPageGuard	include/storage/page/page_guard.h	/^class ReadPageGuard {$/;"	c	namespace:bustub
ReadPageGuard	include/storage/table/table_heap.h	/^  auto AcquireTablePageReadLock(RID rid) -> ReadPageGuard;$/;"	m	class:bustub::TableHeap
ReadPageGuard	storage/page/page_guard.cpp	/^ReadPageGuard::ReadPageGuard(page_id_t page_id, std::shared_ptr<FrameHeader> frame,$/;"	f	class:bustub::ReadPageGuard
ReaderWriterLatch	include/common/rwlatch.h	/^class ReaderWriterLatch {$/;"	c	namespace:bustub
RecordAccess	buffer/lru_k_replacer.cpp	/^void LRUKReplacer::RecordAccess(frame_id_t frame_id, [[maybe_unused]] AccessType access_type) {$/;"	f	class:bustub::LRUKReplacer
ReleaseAllLatch	include/storage/index/b_plus_tree.h	/^  void ReleaseAllLatch() {$/;"	f	class:bustub::Context
ReleaseWriteLatchExceptLast	include/storage/index/b_plus_tree.h	/^  void ReleaseWriteLatchExceptLast() {$/;"	f	class:bustub::Context
Remove	buffer/lru_k_replacer.cpp	/^void LRUKReplacer::Remove(frame_id_t frame_id) {$/;"	f	class:bustub::LRUKReplacer
Remove	include/primer/orset_driver.h	/^  inline void Remove(const T &elem) { orset_.Remove(elem); }$/;"	f	class:bustub::ORSetNode
Remove	primer/orset.cpp	/^void ORSet<T>::Remove(const T &elem) {$/;"	f	class:bustub::ORSet
Remove	primer/trie_store.cpp	/^void TrieStore::Remove(std::string_view key) {$/;"	f	class:bustub::TrieStore
Remove	storage/index/b_plus_tree.cpp	/^void BPLUSTREE_TYPE::Remove(const KeyType &key) {$/;"	f	class:bustub::BPLUSTREE_TYPE
Remove	storage/page/hash_table_block_page.cpp	/^void HASH_TABLE_BLOCK_TYPE::Remove(slot_offset_t bucket_ind) {}$/;"	f	class:bustub::HASH_TABLE_BLOCK_TYPE
RemoveAt	storage/page/extendible_htable_bucket_page.cpp	/^void ExtendibleHTableBucketPage<K, V, KC>::RemoveAt(uint32_t bucket_idx) {$/;"	f	class:bustub::ExtendibleHTableBucketPage
RemoveAt	storage/page/hash_table_bucket_page.cpp	/^void HASH_TABLE_BUCKET_TYPE::RemoveAt(uint32_t bucket_idx) {}$/;"	f	class:bustub::HASH_TABLE_BUCKET_TYPE
RemoveEdge	concurrency/lock_manager.cpp	/^void LockManager::RemoveEdge(txn_id_t t1, txn_id_t t2) {}$/;"	f	class:bustub::LockManager
RemoveFromFile	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::RemoveFromFile(const std::filesystem::path &file_name) {$/;"	f	class:bustub::BPLUSTREE_TYPE
Replacer	include/buffer/replacer.h	/^class Replacer {$/;"	c	namespace:bustub
Reset	buffer/buffer_pool_manager.cpp	/^void FrameHeader::Reset() {$/;"	f	class:bustub::FrameHeader
ResetMemory	include/storage/page/page.h	/^  inline void ResetMemory() {$/;"	f	class:bustub::Page
Resize	container/disk/hash/linear_probe_hash_table.cpp	/^void HASH_TABLE_TYPE::Resize(size_t initial_size) {}$/;"	f	class:bustub::HASH_TABLE_TYPE
ResultWriter	include/common/bustub_instance.h	/^class ResultWriter {$/;"	c	namespace:bustub
RunCycleDetection	concurrency/lock_manager.cpp	/^void LockManager::RunCycleDetection() {$/;"	f	class:bustub::LockManager
RunFlushThread	recovery/log_manager.cpp	/^void LogManager::RunFlushThread() {}$/;"	f	class:bustub::LogManager
SCHEMA	include/binder/statement/explain_statement.h	/^  SCHEMA = 8,    \/**< Show schema. *\/$/;"	e	enum:uint8_t
SEARCH	include/storage/index/b_plus_tree.h	/^  SEARCH = 0,$/;"	m	class:bustub::Operation
SELECT_STATEMENT	include/common/enums/statement_type.h	/^  SELECT_STATEMENT,         \/\/ select statement type$/;"	m	class:bustub::StatementType
SHARED	include/concurrency/lock_manager.h	/^  enum class LockMode { SHARED, EXCLUSIVE, INTENTION_SHARED, INTENTION_EXCLUSIVE, SHARED_INTENTION_EXCLUSIVE };$/;"	m	class:bustub::LockManager::LockMode
SIMPLIFIED_TOKEN_IDENTIFIER	include/binder/simplified_token.h	/^  SIMPLIFIED_TOKEN_IDENTIFIER,$/;"	m	class:bustub::SimplifiedTokenType
SIMPLIFIED_TOKEN_KEYWORD	include/binder/simplified_token.h	/^  SIMPLIFIED_TOKEN_KEYWORD,$/;"	m	class:bustub::SimplifiedTokenType
SIMPLIFIED_TOKEN_NUMERIC_CONSTANT	include/binder/simplified_token.h	/^  SIMPLIFIED_TOKEN_NUMERIC_CONSTANT,$/;"	m	class:bustub::SimplifiedTokenType
SIMPLIFIED_TOKEN_OPERATOR	include/binder/simplified_token.h	/^  SIMPLIFIED_TOKEN_OPERATOR,$/;"	m	class:bustub::SimplifiedTokenType
SIMPLIFIED_TOKEN_STRING_CONSTANT	include/binder/simplified_token.h	/^  SIMPLIFIED_TOKEN_STRING_CONSTANT,$/;"	m	class:bustub::SimplifiedTokenType
SIZE_PAGE_HEADER	include/storage/page/page.h	/^  static constexpr size_t SIZE_PAGE_HEADER = 8;$/;"	m	class:bustub::Page
SMALLINT	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
SMALLINT_COMPARE_FUNC	type/smallint_type.cpp	21;"	d	file:
SMALLINT_MODIFY_FUNC	type/smallint_type.cpp	41;"	d	file:
SNAPSHOT_ISOLATION	include/concurrency/transaction.h	/^enum class IsolationLevel { READ_UNCOMMITTED, SNAPSHOT_ISOLATION, SERIALIZABLE };$/;"	m	class:bustub::IsolationLevel
SORT_PAGE_HEADER_SIZE	include/execution/executors/external_merge_sort_executor.h	27;"	d
STAR	include/binder/bound_expression.h	/^  STAR = 7,       \/**< Star expression type, will be rewritten by binder and won't appear in plan. *\/$/;"	m	class:bustub::ExpressionType
STLOrderedIndex	include/catalog/catalog.h	/^enum class IndexType { BPlusTreeIndex, HashTableIndex, STLOrderedIndex, STLUnorderedIndex };$/;"	m	class:bustub::IndexType
STLOrderedIndex	include/storage/index/stl_ordered.h	/^  STLOrderedIndex(std::unique_ptr<IndexMetadata> &&metadata, BufferPoolManager *buffer_pool_manager)$/;"	f	class:bustub::STLOrderedIndex
STLOrderedIndex	include/storage/index/stl_ordered.h	/^class STLOrderedIndex : public Index {$/;"	c	namespace:bustub
STLOrderedIndexIterator	include/storage/index/stl_ordered.h	/^  STLOrderedIndexIterator(const std::map<KT, VT, StlComparatorWrapper<KT, Cmp>> *map,$/;"	f	class:bustub::STLOrderedIndexIterator
STLOrderedIndexIterator	include/storage/index/stl_ordered.h	/^class STLOrderedIndexIterator {$/;"	c	namespace:bustub
STLUnorderedIndex	include/storage/index/stl_unordered.h	/^  STLUnorderedIndex(std::unique_ptr<IndexMetadata> &&metadata, BufferPoolManager *buffer_pool_manager,$/;"	f	class:bustub::STLUnorderedIndex
STLUnorderedIndex	include/storage/index/stl_unordered.h	/^class STLUnorderedIndex : public Index {$/;"	c	namespace:bustub
SUBQUERY	include/binder/bound_table_ref.h	/^  SUBQUERY = 6,        \/**< Subquery. *\/$/;"	m	class:bustub::TableReferenceType
Save	primer/orset_driver.cpp	/^void ORSetNode<T>::Save() {$/;"	f	class:bustub::ORSetNode
SaveParseTree	binder/transformer.cpp	/^void Binder::SaveParseTree(duckdb_libpgquery::PGList *tree) {$/;"	f	class:bustub::Binder
Scan	include/buffer/lru_k_replacer.h	/^enum class AccessType { Unknown = 0, Lookup, Scan, Index };$/;"	m	class:bustub::AccessType
ScanKey	storage/index/b_plus_tree_index.cpp	/^void BPLUSTREE_INDEX_TYPE::ScanKey(const Tuple &key, std::vector<RID> *result, Transaction *transaction) {$/;"	f	class:bustub::BPLUSTREE_INDEX_TYPE
ScanKey	storage/index/extendible_hash_table_index.cpp	/^void HASH_TABLE_INDEX_TYPE::ScanKey(const Tuple &key, std::vector<RID> *result, Transaction *transaction) {$/;"	f	class:bustub::HASH_TABLE_INDEX_TYPE
ScanKey	storage/index/linear_probe_hash_table_index.cpp	/^void HASH_TABLE_INDEX_TYPE::ScanKey(const Tuple &key, std::vector<RID> *result, Transaction *transaction) {$/;"	f	class:bustub::HASH_TABLE_INDEX_TYPE
Schedule	storage/disk/disk_scheduler.cpp	/^void DiskScheduler::Schedule(DiskRequest r) { request_queue_.Put(std::move(r)); }$/;"	f	class:bustub::DiskScheduler
Schema	catalog/schema.cpp	/^Schema::Schema(const std::vector<Column> &columns) {$/;"	f	class:bustub::Schema
Schema	include/catalog/schema.h	/^class Schema {$/;"	c	namespace:bustub
Schema	include/execution/executors/abstract_executor.h	/^  virtual auto GetOutputSchema() const -> const Schema & = 0;$/;"	m	class:bustub::AbstractExecutor
Schema	include/execution/executors/mock_scan_executor.h	/^auto GetMockTableSchemaOf(const std::string &table) -> Schema;$/;"	m	namespace:bustub
Schema	include/execution/plans/aggregation_plan.h	/^                             const std::vector<AggregationType> &agg_types) -> Schema;$/;"	m	class:bustub::AggregationPlanNode
Schema	include/execution/plans/nested_loop_join_plan.h	/^  static auto InferJoinSchema(const AbstractPlanNode &left, const AbstractPlanNode &right) -> Schema;$/;"	m	class:bustub::NestedLoopJoinPlanNode
Schema	include/execution/plans/projection_plan.h	/^  static auto InferProjectionSchema(const std::vector<AbstractExpressionRef> &expressions) -> Schema;$/;"	m	class:bustub::ProjectionPlanNode
Schema	include/execution/plans/projection_plan.h	/^  static auto RenameSchema(const Schema &schema, const std::vector<std::string> &col_names) -> Schema;$/;"	m	class:bustub::ProjectionPlanNode
Schema	include/execution/plans/seq_scan_plan.h	/^  static auto InferScanSchema(const BoundBaseTableRef &table_ref) -> Schema;$/;"	m	class:bustub::SeqScanPlanNode
Schema	include/execution/plans/window_plan.h	/^  static auto InferWindowSchema(const std::vector<AbstractExpressionRef> &columns) -> Schema;$/;"	m	class:bustub::WindowFunctionPlanNode
SchemaRef	include/planner/planner.h	/^  auto MakeOutputSchema(const std::vector<std::pair<std::string, TypeId>> &exprs) -> SchemaRef;$/;"	m	class:bustub::Planner
SelectStatement	include/binder/statement/select_statement.h	/^  explicit SelectStatement(std::unique_ptr<BoundTableRef> table,$/;"	f	class:bustub::SelectStatement
SelectStatement	include/binder/statement/select_statement.h	/^class SelectStatement : public BoundStatement {$/;"	c	namespace:bustub
SeqScan	include/execution/plans/abstract_plan.h	/^  SeqScan,$/;"	m	class:bustub::PlanType
SeqScanExecutor	execution/seq_scan_executor.cpp	/^SeqScanExecutor::SeqScanExecutor(ExecutorContext *exec_ctx, const SeqScanPlanNode *plan)$/;"	f	class:bustub::SeqScanExecutor
SeqScanExecutor	include/execution/executors/seq_scan_executor.h	/^class SeqScanExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
SeqScanPlanNode	include/execution/plans/seq_scan_plan.h	/^  SeqScanPlanNode(SchemaRef output, table_oid_t table_oid, std::string table_name,$/;"	f	class:bustub::SeqScanPlanNode
SeqScanPlanNode	include/execution/plans/seq_scan_plan.h	/^class SeqScanPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
Serial	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	m	class:bustub::TableGenerator::Dist
SerializeTo	include/type/value.h	/^  inline void SerializeTo(char *storage) const { Type::GetInstance(type_id_)->SerializeTo(*this, storage); }$/;"	f	class:bustub::Value
SerializeTo	storage/table/tuple.cpp	/^void Tuple::SerializeTo(char *storage) const {$/;"	f	class:bustub::Tuple
SerializeTo	type/bigint_type.cpp	/^void BigintType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::BigintType
SerializeTo	type/boolean_type.cpp	/^void BooleanType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::BooleanType
SerializeTo	type/decimal_type.cpp	/^void DecimalType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::DecimalType
SerializeTo	type/integer_type.cpp	/^void IntegerType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::IntegerType
SerializeTo	type/smallint_type.cpp	/^void SmallintType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::SmallintType
SerializeTo	type/timestamp_type.cpp	/^void TimestampType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::TimestampType
SerializeTo	type/tinyint_type.cpp	/^void TinyintType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::TinyintType
SerializeTo	type/type.cpp	/^void Type::SerializeTo(const Value &val __attribute__((unused)), char *storage __attribute__((unused))) const {$/;"	f	class:bustub::Type
SerializeTo	type/varlen_type.cpp	/^void VarlenType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::VarlenType
SerializeTo	type/vector_type.cpp	/^void VectorType::SerializeTo(const Value &val, char *storage) const {$/;"	f	class:bustub::VectorType
Set	include/common/rid.h	/^  inline void Set(page_id_t page_id, uint32_t slot_num) {$/;"	f	class:bustub::RID
SetBucketPageId	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::SetBucketPageId(uint32_t bucket_idx, page_id_t bucket_page_id) {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
SetBucketPageId	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::SetBucketPageId(uint32_t bucket_idx, page_id_t bucket_page_id) {}$/;"	f	class:bustub::HashTableDirectoryPage
SetChildExecutor	include/execution/executors/topn_executor.h	/^  void SetChildExecutor(std::unique_ptr<AbstractExecutor> &&child_executor) {$/;"	f	class:bustub::TopNExecutor
SetCurrPageId	include/buffer/buffer_pool_manager.h	/^  void SetCurrPageId(page_id_t page_id) { current_page_id_ = page_id; }$/;"	f	class:bustub::FrameHeader
SetDirectoryPageId	storage/page/extendible_htable_header_page.cpp	/^void ExtendibleHTableHeaderPage::SetDirectoryPageId(uint32_t directory_idx, page_id_t directory_page_id) {$/;"	f	class:bustub::ExtendibleHTableHeaderPage
SetEnd	include/binder/expressions/bound_window.h	/^  auto SetEnd(WindowBoundary end) { end_ = end; }$/;"	f	class:bustub::WindowBoundary::BoundWindow
SetEvictable	buffer/lru_k_replacer.cpp	/^void LRUKReplacer::SetEvictable(frame_id_t frame_id, bool set_evictable) {$/;"	f	class:bustub::LRUKReplacer
SetEvictable	include/buffer/lru_k_replacer.h	/^  void SetEvictable(bool set_evictable) { is_evictable_ = set_evictable; }$/;"	f	class:bustub::LRUKNode
SetFlushLogFuture	include/storage/disk/disk_manager.h	/^  inline void SetFlushLogFuture(std::future<void> *f) { flush_log_f_ = f; }$/;"	f	class:bustub::DiskManager
SetFromInteger	include/storage/index/generic_key.h	/^  inline void SetFromInteger(int64_t key) {$/;"	f	class:bustub::GenericKey
SetFromKey	include/storage/index/generic_key.h	/^  inline void SetFromKey(const Tuple &tuple) {$/;"	f	class:bustub::GenericKey
SetKeyAt	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::SetKeyAt(int index, const KeyType &key) { key_array_[index] = key; }$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
SetLSN	include/storage/page/page.h	/^  inline void SetLSN(lsn_t lsn) { memcpy(GetData() + OFFSET_LSN, &lsn, sizeof(lsn_t)); }$/;"	f	class:bustub::Page
SetLSN	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::SetLSN(lsn_t lsn) { lsn_ = lsn; }$/;"	f	class:bustub::HashTableDirectoryPage
SetLSN	storage/page/hash_table_header_page.cpp	/^void HashTableHeaderPage::SetLSN(lsn_t lsn) {}$/;"	f	class:bustub::HashTableHeaderPage
SetLocalDepth	storage/page/extendible_htable_directory_page.cpp	/^void ExtendibleHTableDirectoryPage::SetLocalDepth(uint32_t bucket_idx, uint8_t local_depth) {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
SetLocalDepth	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::SetLocalDepth(uint32_t bucket_idx, uint8_t local_depth) {}$/;"	f	class:bustub::HashTableDirectoryPage
SetMaxSize	storage/page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetMaxSize(int size) {$/;"	f	class:bustub::BPlusTreePage
SetNextPageId	include/storage/page/table_page.h	/^  void SetNextPageId(page_id_t next_page_id) { next_page_id_ = next_page_id; }$/;"	f	class:bustub::TablePage
SetNextPageId	storage/page/b_plus_tree_leaf_page.cpp	/^void B_PLUS_TREE_LEAF_PAGE_TYPE::SetNextPageId(page_id_t next_page_id) { next_page_id_ = next_page_id; }$/;"	f	class:bustub::B_PLUS_TREE_LEAF_PAGE_TYPE
SetOccupied	storage/page/hash_table_bucket_page.cpp	/^void HASH_TABLE_BUCKET_TYPE::SetOccupied(uint32_t bucket_idx) {}$/;"	f	class:bustub::HASH_TABLE_BUCKET_TYPE
SetPageId	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::SetPageId(bustub::page_id_t page_id) { page_id_ = page_id; }$/;"	f	class:bustub::HashTableDirectoryPage
SetPageId	storage/page/hash_table_header_page.cpp	/^void HashTableHeaderPage::SetPageId(bustub::page_id_t page_id) {}$/;"	f	class:bustub::HashTableHeaderPage
SetPageType	storage/page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetPageType(IndexPageType page_type) { page_type_ = page_type; }$/;"	f	class:bustub::BPlusTreePage
SetPersistentLSN	include/recovery/log_manager.h	/^  inline void SetPersistentLSN(lsn_t lsn) { persistent_lsn_ = lsn; }$/;"	f	class:bustub::LogManager
SetReadable	storage/page/hash_table_bucket_page.cpp	/^void HASH_TABLE_BUCKET_TYPE::SetReadable(uint32_t bucket_idx) {}$/;"	f	class:bustub::HASH_TABLE_BUCKET_TYPE
SetRid	include/storage/table/tuple.h	/^  inline auto SetRid(RID rid) { rid_ = rid; }$/;"	f	class:bustub::Tuple
SetSize	storage/page/b_plus_tree_page.cpp	/^void BPlusTreePage::SetSize(int size) {$/;"	f	class:bustub::BPlusTreePage
SetSize	storage/page/hash_table_header_page.cpp	/^void HashTableHeaderPage::SetSize(size_t size) {}$/;"	f	class:bustub::HashTableHeaderPage
SetStart	include/binder/expressions/bound_window.h	/^  auto SetStart(WindowBoundary start) { start_ = start; }$/;"	f	class:bustub::WindowBoundary::BoundWindow
SetTainted	concurrency/transaction_manager_impl.cpp	/^void Transaction::SetTainted() {$/;"	f	class:bustub::Transaction
SetValueAt	storage/page/b_plus_tree_internal_page.cpp	/^void B_PLUS_TREE_INTERNAL_PAGE_TYPE::SetValueAt(int index, const ValueType &value) { page_id_array_[index] = value; }$/;"	f	class:bustub::B_PLUS_TREE_INTERNAL_PAGE_TYPE
ShutDown	storage/disk/disk_manager.cpp	/^void DiskManager::ShutDown() {$/;"	f	class:bustub::DiskManager
SimpleAggregationHashTable	include/execution/executors/aggregation_executor.h	/^  SimpleAggregationHashTable(const std::vector<AbstractExpressionRef> &agg_exprs,$/;"	f	class:bustub::SimpleAggregationHashTable
SimpleAggregationHashTable	include/execution/executors/aggregation_executor.h	/^class SimpleAggregationHashTable {$/;"	c	namespace:bustub
SimpleHashJoinHashTable	include/execution/executors/hash_join_executor.h	/^class SimpleHashJoinHashTable {$/;"	c	namespace:bustub
SimpleStreamWriter	include/common/bustub_instance.h	/^  explicit SimpleStreamWriter(std::ostream &stream, bool disable_header = false, const char *separator = "\\t")$/;"	f	class:bustub::SimpleStreamWriter
SimpleStreamWriter	include/common/bustub_instance.h	/^class SimpleStreamWriter : public ResultWriter {$/;"	c	namespace:bustub
SimplifiedToken	include/binder/simplified_token.h	/^struct SimplifiedToken {$/;"	s	namespace:bustub
SimplifiedTokenType	include/binder/simplified_token.h	/^enum class SimplifiedTokenType : uint8_t {$/;"	c	namespace:bustub
SmallintType	include/type/smallint_type.h	/^class SmallintType : public IntegerParentType {$/;"	c	namespace:bustub
SmallintType	type/smallint_type.cpp	/^SmallintType::SmallintType() : IntegerParentType(TypeId::SMALLINT) {}$/;"	f	class:bustub::SmallintType
Sort	include/execution/plans/abstract_plan.h	/^  Sort,$/;"	m	class:bustub::PlanType
SortExecutor	execution/sort_executor.cpp	/^SortExecutor::SortExecutor(ExecutorContext *exec_ctx, const SortPlanNode *plan,$/;"	f	class:bustub::SortExecutor
SortExecutor	include/execution/executors/sort_executor.h	/^class SortExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
SortKey	include/execution/execution_common.h	/^auto GenerateSortKey(const Tuple &tuple, const std::vector<OrderBy> &order_bys, const Schema &schema) -> SortKey;$/;"	m	namespace:bustub
SortPage	include/execution/executors/external_merge_sort_executor.h	/^class SortPage {$/;"	c	namespace:bustub
SortPlanNode	include/execution/plans/sort_plan.h	/^  SortPlanNode(SchemaRef output, AbstractPlanNodeRef child, std::vector<OrderBy> order_bys)$/;"	f	class:bustub::SortPlanNode
SortPlanNode	include/execution/plans/sort_plan.h	/^class SortPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
SplitRet	include/storage/index/b_plus_tree.h	/^  auto SplitInternal(Context *ctx, int recursive_level) -> SplitRet;$/;"	m	class:bustub::BPlusTree
SplitRet	include/storage/index/b_plus_tree.h	/^  auto SplitLeaf(Context *ctx) -> SplitRet;$/;"	m	class:bustub::BPlusTree
SplitRet	include/storage/index/b_plus_tree.h	/^  struct SplitRet {$/;"	s	class:bustub::BPlusTree
StartDeadlockDetection	include/concurrency/lock_manager.h	/^  void StartDeadlockDetection() {$/;"	f	class:bustub::LockManager
StartWorkerThread	storage/disk/disk_scheduler.cpp	/^void DiskScheduler::StartWorkerThread() {$/;"	f	class:bustub::DiskScheduler
StatementType	include/common/enums/statement_type.h	/^enum class StatementType : uint8_t {$/;"	c	namespace:bustub
StlComparatorWrapper	include/storage/index/stl_comparator_wrapper.h	/^  explicit StlComparatorWrapper(const KeyComparator &cmp) : cmp_{cmp} {}$/;"	f	class:bustub::StlComparatorWrapper
StlComparatorWrapper	include/storage/index/stl_comparator_wrapper.h	/^class StlComparatorWrapper {$/;"	c	namespace:bustub
StlEqualWrapper	include/storage/index/stl_equal_wrapper.h	/^  explicit StlEqualWrapper(const KC &cmp) : cmp_{cmp} {}$/;"	f	class:bustub::StlEqualWrapper
StlEqualWrapper	include/storage/index/stl_equal_wrapper.h	/^class StlEqualWrapper {$/;"	c	namespace:bustub
StlHasherWrapper	include/storage/index/stl_hasher_wrapper.h	/^  explicit StlHasherWrapper(const HashFunction<K> &hash_fn) : hash_fn_{hash_fn} {}$/;"	f	class:bustub::StlHasherWrapper
StlHasherWrapper	include/storage/index/stl_hasher_wrapper.h	/^class StlHasherWrapper {$/;"	c	namespace:bustub
StopFlushThread	recovery/log_manager.cpp	/^void LogManager::StopFlushThread() {}$/;"	f	class:bustub::LogManager
String	include/execution/expressions/abstract_expression.h	/^  String,$/;"	m	class:bustub::ExecExpressionType
StringExecExpressionType	include/execution/expressions/string_expression.h	/^enum class StringExecExpressionType { Lower, Upper };$/;"	c	namespace:bustub
StringExpression	include/execution/expressions/string_expression.h	/^  StringExpression(AbstractExpressionRef arg, StringExecExpressionType expr_type)$/;"	f	class:bustub::StringExpression
StringExpression	include/execution/expressions/string_expression.h	/^class StringExpression : public AbstractExpression {$/;"	c	namespace:bustub
StringUtil	include/common/util/string_util.h	/^class StringUtil {$/;"	c	namespace:bustub
StringVectorWriter	include/common/bustub_instance.h	/^class StringVectorWriter : public ResultWriter {$/;"	c	namespace:bustub
SumAggregate	include/execution/plans/aggregation_plan.h	/^enum class AggregationType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate };$/;"	m	class:bustub::AggregationType
SumAggregate	include/execution/plans/window_plan.h	/^enum class WindowFunctionType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate, Rank };$/;"	m	class:bustub::WindowFunctionType
Swap	include/type/value.h	/^  friend void Swap(Value &first, Value &second) {$/;"	f	class:bustub::Value
Sync	primer/orset_driver.cpp	/^void ORSetDriver<T>::Sync() {$/;"	f	class:bustub::ORSetDriver
T	include/primer/trie.h	/^  auto Get(std::string_view key) const -> const T *;$/;"	m	class:bustub::Trie
TABLE_PAGE_HEADER_SIZE	include/storage/page/table_page.h	/^static constexpr uint64_t TABLE_PAGE_HEADER_SIZE = 8;$/;"	m	namespace:bustub
TABLE_PAGE_HEADER_SIZE	include/storage/page/table_page.h	/^static_assert(sizeof(TablePage) == TABLE_PAGE_HEADER_SIZE);$/;"	m	namespace:bustub
TAINTED	include/concurrency/transaction.h	/^enum class TransactionState { RUNNING = 0, TAINTED, COMMITTED = 100, ABORTED };$/;"	m	class:bustub::TransactionState
TEST1_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST1_SIZE = 1000;$/;"	m	namespace:bustub
TEST2_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST2_SIZE = 100;$/;"	m	namespace:bustub
TEST3_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST3_SIZE = 100;$/;"	m	namespace:bustub
TEST4_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST4_SIZE = 100;$/;"	m	namespace:bustub
TEST6_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST6_SIZE = 100;$/;"	m	namespace:bustub
TEST7_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST7_SIZE = 100;$/;"	m	namespace:bustub
TEST8_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST8_SIZE = 10;$/;"	m	namespace:bustub
TEST9_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST9_SIZE = 10;$/;"	m	namespace:bustub
TEST_VARLEN_SIZE	include/catalog/table_generator.h	/^static constexpr uint32_t TEST_VARLEN_SIZE = 10;$/;"	m	namespace:bustub
THREAD_NUM	include/storage/disk/disk_scheduler.h	/^  enum { THREAD_NUM = 1 };$/;"	e	enum:bustub::DiskScheduler::__anon1
TIMESTAMP	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
TINYINT	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
TINYINT_COMPARE_FUNC	type/tinyint_type.cpp	22;"	d	file:
TINYINT_MODIFY_FUNC	type/tinyint_type.cpp	42;"	d	file:
TOTAL_BUCKET_SIZE	include/primer/hyperloglog_presto.h	20;"	d
TRANSACTION_STATEMENT	include/common/enums/statement_type.h	/^  TRANSACTION_STATEMENT,    \/\/ txn statement type$/;"	m	class:bustub::StatementType
TUPLE_INFO_SIZE	include/storage/page/table_page.h	/^  static constexpr size_t TUPLE_INFO_SIZE = 24;$/;"	m	class:bustub::TablePage
TUPLE_INFO_SIZE	include/storage/page/table_page.h	/^  static_assert(sizeof(TupleInfo) == TUPLE_INFO_SIZE);$/;"	m	class:bustub::TablePage
TUPLE_META_SIZE	include/storage/table/tuple.h	/^static constexpr size_t TUPLE_META_SIZE = 16;$/;"	m	namespace:bustub
TUPLE_META_SIZE	include/storage/table/tuple.h	/^static_assert(sizeof(TupleMeta) == TUPLE_META_SIZE);$/;"	m	namespace:bustub
TWO_INTEGER_SIZE	include/storage/index/extendible_hash_table_index.h	/^constexpr static const auto TWO_INTEGER_SIZE = 8;$/;"	m	namespace:bustub
TWO_INTEGER_SIZE_B_TREE	include/storage/index/b_plus_tree_index.h	/^constexpr static const auto TWO_INTEGER_SIZE_B_TREE = 8;$/;"	m	namespace:bustub
TXN_START_ID	include/common/config.h	/^const txn_id_t TXN_START_ID = 1LL << 62;  \/\/ first txn id$/;"	m	namespace:bustub
TYPE_CAST	include/binder/bound_expression.h	/^  TYPE_CAST = 4,  \/**< Type cast expression type. *\/$/;"	m	class:bustub::ExpressionType
TableGenerator	include/catalog/table_generator.h	/^  explicit TableGenerator(ExecutorContext *exec_ctx) : exec_ctx_{exec_ctx} {}$/;"	f	class:bustub::TableGenerator
TableGenerator	include/catalog/table_generator.h	/^class TableGenerator {$/;"	c	namespace:bustub
TableHeap	include/storage/table/table_heap.h	/^class TableHeap {$/;"	c	namespace:bustub
TableHeap	storage/table/table_heap.cpp	/^TableHeap::TableHeap(BufferPoolManager *bpm) : bpm_(bpm) {$/;"	f	class:bustub::TableHeap
TableHeap	storage/table/table_heap.cpp	/^TableHeap::TableHeap(bool create_table_heap) : bpm_(nullptr) {}$/;"	f	class:bustub::TableHeap
TableInfo	include/catalog/catalog.h	/^  TableInfo(Schema schema, std::string name, std::unique_ptr<TableHeap> &&table, table_oid_t oid)$/;"	f	struct:bustub::TableInfo
TableInfo	include/catalog/catalog.h	/^struct TableInfo {$/;"	s	namespace:bustub
TableInsertMeta	include/catalog/table_generator.h	/^    TableInsertMeta(const char *name, uint32_t num_rows, std::vector<ColumnInsertMeta> col_meta)$/;"	f	struct:bustub::TableGenerator::TableInsertMeta
TableInsertMeta	include/catalog/table_generator.h	/^  struct TableInsertMeta {$/;"	s	class:bustub::TableGenerator
TableIterator	include/storage/table/table_heap.h	/^  auto MakeEagerIterator() -> TableIterator;$/;"	m	class:bustub::TableHeap
TableIterator	include/storage/table/table_heap.h	/^  auto MakeIterator() -> TableIterator;$/;"	m	class:bustub::TableHeap
TableIterator	include/storage/table/table_iterator.h	/^  auto operator++() -> TableIterator &;$/;"	m	class:bustub::TableIterator
TableIterator	include/storage/table/table_iterator.h	/^class TableIterator {$/;"	c	namespace:bustub
TableIterator	storage/table/table_iterator.cpp	/^TableIterator::TableIterator(TableHeap *table_heap, RID rid, RID stop_at_rid)$/;"	f	class:bustub::TableIterator
TablePage	include/storage/page/table_page.h	/^class TablePage {$/;"	c	namespace:bustub
TableReferenceType	include/binder/bound_table_ref.h	/^enum class TableReferenceType : uint8_t {$/;"	c	namespace:bustub
TimestampType	include/type/timestamp_type.h	/^class TimestampType : public Type {$/;"	c	namespace:bustub
TimestampType	type/timestamp_type.cpp	/^TimestampType::TimestampType() : Type(TypeId::TIMESTAMP) {}$/;"	f	class:bustub::TimestampType
TinyintType	include/type/tinyint_type.h	/^class TinyintType : public IntegerParentType {$/;"	c	namespace:bustub
TinyintType	type/tinyint_type.cpp	/^TinyintType::TinyintType() : IntegerParentType(TINYINT) {}$/;"	f	class:bustub::TinyintType
TmpTuple	include/storage/table/tmp_tuple.h	/^  TmpTuple(page_id_t page_id, size_t offset) : page_id_(page_id), offset_(offset) {}$/;"	f	class:bustub::TmpTuple
TmpTuple	include/storage/table/tmp_tuple.h	/^class TmpTuple {$/;"	c	namespace:bustub
TmpTuplePage	include/storage/page/tmp_tuple_page.h	/^class TmpTuplePage : public Page {$/;"	c	namespace:bustub
ToGraph	include/storage/index/b_plus_tree_debug.h	/^void BPLUSTREE_TYPE::ToGraph(page_id_t page_id, const BPlusTreePage *page, std::ofstream &out) {$/;"	f	class:bustub::BPLUSTREE_TYPE
TopN	include/execution/plans/abstract_plan.h	/^  TopN,$/;"	m	class:bustub::PlanType
TopNCheckExecutor	execution/topn_check_executor.cpp	/^TopNCheckExecutor::TopNCheckExecutor(ExecutorContext *exec_ctx, const TopNPlanNode *plan,$/;"	f	class:bustub::TopNCheckExecutor
TopNCheckExecutor	include/execution/executors/topn_check_executor.h	/^class TopNCheckExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
TopNExecutor	execution/topn_executor.cpp	/^TopNExecutor::TopNExecutor(ExecutorContext *exec_ctx, const TopNPlanNode *plan,$/;"	f	class:bustub::TopNExecutor
TopNExecutor	include/execution/executors/topn_executor.h	/^class TopNExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
TopNPerGroup	include/execution/plans/abstract_plan.h	/^  TopNPerGroup,$/;"	m	class:bustub::PlanType
TopNPerGroupExecutor	execution/topn_per_group_executor.cpp	/^TopNPerGroupExecutor::TopNPerGroupExecutor(ExecutorContext *exec_ctx, const TopNPerGroupPlanNode *plan,$/;"	f	class:bustub::TopNPerGroupExecutor
TopNPerGroupExecutor	include/execution/executors/topn_per_group_executor.h	/^class TopNPerGroupExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
TopNPerGroupPlanNode	include/execution/plans/topn_per_group_plan.h	/^  TopNPerGroupPlanNode(SchemaRef output, AbstractPlanNodeRef child, std::vector<AbstractExpressionRef> group_bys,$/;"	f	class:bustub::TopNPerGroupPlanNode
TopNPerGroupPlanNode	include/execution/plans/topn_per_group_plan.h	/^class TopNPerGroupPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
TopNPlanNode	include/execution/plans/topn_plan.h	/^  TopNPlanNode(SchemaRef output, AbstractPlanNodeRef child, std::vector<OrderBy> order_bys, std::size_t n)$/;"	f	class:bustub::TopNPlanNode
TopNPlanNode	include/execution/plans/topn_plan.h	/^class TopNPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
Transaction	include/common/bustub_instance.h	/^  auto CurrentManagedTxn() -> Transaction *;$/;"	m	class:bustub::BusTubInstance
Transaction	include/concurrency/transaction.h	/^  explicit Transaction(txn_id_t txn_id, IsolationLevel isolation_level = IsolationLevel::SNAPSHOT_ISOLATION)$/;"	f	class:bustub::Transaction
Transaction	include/concurrency/transaction.h	/^class Transaction {$/;"	c	namespace:bustub
Transaction	include/concurrency/transaction_manager.h	/^  auto Begin(IsolationLevel isolation_level = IsolationLevel::SNAPSHOT_ISOLATION) -> Transaction *;$/;"	m	class:bustub::TransactionManager
TransactionManager	include/concurrency/transaction_manager.h	/^class TransactionManager {$/;"	c	namespace:bustub
TransactionState	include/concurrency/transaction.h	/^enum class TransactionState { RUNNING = 0, TAINTED, COMMITTED = 100, ABORTED };$/;"	c	namespace:bustub
TransactionStatement	include/binder/statement/set_show_statement.h	/^  explicit TransactionStatement(std::string type)$/;"	f	class:bustub::TransactionStatement
TransactionStatement	include/binder/statement/set_show_statement.h	/^class TransactionStatement : public BoundStatement {$/;"	c	namespace:bustub
Trie	include/primer/trie.h	/^  auto Put(std::string_view key, T value) const -> Trie;$/;"	m	class:bustub::Trie
Trie	include/primer/trie.h	/^  auto Remove(std::string_view key) const -> Trie;$/;"	m	class:bustub::Trie
Trie	include/primer/trie.h	/^  explicit Trie(std::shared_ptr<const TrieNode> root) : root_(std::move(root)) {}$/;"	f	class:bustub::Trie
Trie	include/primer/trie.h	/^class Trie {$/;"	c	namespace:bustub
Trie	primer/trie.cpp	/^template auto Trie::Put(std::string_view key, Integer value) const -> Trie;$/;"	m	namespace:bustub	file:
Trie	primer/trie.cpp	/^template auto Trie::Put(std::string_view key, MoveBlocked value) const -> Trie;$/;"	m	namespace:bustub	file:
Trie	primer/trie.cpp	/^template auto Trie::Put(std::string_view key, std::string value) const -> Trie;$/;"	m	namespace:bustub	file:
Trie	primer/trie.cpp	/^template auto Trie::Put(std::string_view key, uint32_t value) const -> Trie;$/;"	m	namespace:bustub	file:
Trie	primer/trie.cpp	/^template auto Trie::Put(std::string_view key, uint64_t value) const -> Trie;$/;"	m	namespace:bustub	file:
TrieNode	include/primer/trie.h	/^  explicit TrieNode(std::map<char, std::shared_ptr<const TrieNode>> children) : children_(std::move(children)) {}$/;"	f	class:bustub::TrieNode
TrieNode	include/primer/trie.h	/^class TrieNode {$/;"	c	namespace:bustub
TrieNodeWithValue	include/primer/trie.h	/^  TrieNodeWithValue(std::map<char, std::shared_ptr<const TrieNode>> children, std::shared_ptr<T> value)$/;"	f	class:bustub::TrieNodeWithValue
TrieNodeWithValue	include/primer/trie.h	/^  explicit TrieNodeWithValue(std::shared_ptr<T> value) : value_(std::move(value)) { this->is_value_node_ = true; }$/;"	f	class:bustub::TrieNodeWithValue
TrieNodeWithValue	include/primer/trie.h	/^class TrieNodeWithValue : public TrieNode {$/;"	c	namespace:bustub
TrieStore	include/primer/trie_store.h	/^class TrieStore {$/;"	c	namespace:bustub
Tuple	include/execution/executors/mock_scan_executor.h	/^  auto MakeDummyTuple() const -> Tuple;$/;"	m	class:bustub::MockScanExecutor
Tuple	include/execution/executors/nested_loop_join_executor.h	/^  auto InnerJoinTuple(Tuple *left_tuple, Tuple *right_tuple) -> Tuple;$/;"	m	class:bustub::NestedLoopJoinExecutor
Tuple	include/execution/executors/nested_loop_join_executor.h	/^  auto LeftAntiJoinTuple(Tuple *left_tuple) -> Tuple;$/;"	m	class:bustub::NestedLoopJoinExecutor
Tuple	include/storage/table/tuple.h	/^      -> Tuple;$/;"	m	class:bustub::Tuple
Tuple	include/storage/table/tuple.h	/^  auto operator=(const Tuple &other) -> Tuple & = default;$/;"	m	class:bustub::Tuple
Tuple	include/storage/table/tuple.h	/^  explicit Tuple(RID rid) : rid_(rid) {}$/;"	f	class:bustub::Tuple
Tuple	include/storage/table/tuple.h	/^class Tuple {$/;"	c	namespace:bustub
Tuple	storage/table/tuple.cpp	/^Tuple::Tuple(RID rid, const char *data, uint32_t size) {$/;"	f	class:bustub::Tuple
Tuple	storage/table/tuple.cpp	/^Tuple::Tuple(std::vector<Value> values, const Schema *schema) {$/;"	f	class:bustub::Tuple
TupleComparator	execution/execution_common.cpp	/^TupleComparator::TupleComparator(std::vector<OrderBy> order_bys) : order_bys_(std::move(order_bys)) {}$/;"	f	class:bustub::TupleComparator
TupleComparator	include/execution/execution_common.h	/^class TupleComparator {$/;"	c	namespace:bustub
TupleMeta	include/storage/page/table_page.h	/^  auto GetTupleMeta(const RID &rid) const -> TupleMeta;$/;"	m	class:bustub::TablePage
TupleMeta	include/storage/table/table_heap.h	/^  auto GetTupleMeta(RID rid) -> TupleMeta;$/;"	m	class:bustub::TableHeap
TupleMeta	include/storage/table/table_heap.h	/^  auto GetTupleMetaWithLockAcquired(RID rid, const TablePage *page) -> TupleMeta;$/;"	m	class:bustub::TableHeap
TupleMeta	include/storage/table/tuple.h	/^struct TupleMeta {$/;"	s	namespace:bustub
TxnMgrDbg	execution/execution_common.cpp	/^void TxnMgrDbg(const std::string &info, TransactionManager *txn_mgr, const TableInfo *table_info,$/;"	f	namespace:bustub
Type	include/type/type.h	/^  explicit Type(TypeId type_id) : type_id_(type_id) {}$/;"	f	class:bustub::CmpBool::Type
Type	include/type/type.h	/^class Type {$/;"	c	class:bustub::CmpBool
TypeId	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	g	namespace:bustub
TypeUtil	include/type/type_util.h	/^class TypeUtil {$/;"	c	namespace:bustub
UNARY_OP	include/binder/bound_expression.h	/^  UNARY_OP = 8,   \/**< Unary expression type. *\/$/;"	m	class:bustub::ExpressionType
UNBOUNDED_FOLLOWING	include/binder/expressions/bound_window.h	/^  UNBOUNDED_FOLLOWING = 2,$/;"	m	class:bustub::WindowBoundary
UNBOUNDED_PRECEDING	include/binder/expressions/bound_window.h	/^  UNBOUNDED_PRECEDING = 1,$/;"	m	class:bustub::WindowBoundary
UNIMPLEMENTED	include/common/macros.h	23;"	d
UNKNOWN_TYPE	include/common/exception.h	/^  UNKNOWN_TYPE = 3,$/;"	m	class:bustub::ExceptionType
UNNAMED_COLUMN	include/planner/planner.h	/^static constexpr const char *const UNNAMED_COLUMN = "<unnamed>";$/;"	m	namespace:bustub
UNREACHABLE	include/common/macros.h	31;"	d
UPDATE	include/recovery/log_record.h	/^  UPDATE,$/;"	m	class:bustub::LogRecordType
UPDATE_STATEMENT	include/common/enums/statement_type.h	/^  UPDATE_STATEMENT,         \/\/ update statement type$/;"	m	class:bustub::StatementType
UndoLink	include/concurrency/transaction.h	/^struct UndoLink {$/;"	s	namespace:bustub
UndoLog	include/concurrency/transaction.h	/^struct UndoLog {$/;"	s	namespace:bustub
UndoLog	include/concurrency/transaction_manager.h	/^  auto GetUndoLog(UndoLink link) -> UndoLog;$/;"	m	class:bustub::TransactionManager
UndoLog	include/execution/execution_common.h	/^                            const UndoLog &log) -> UndoLog;$/;"	m	namespace:bustub
UndoLog	include/execution/execution_common.h	/^                        UndoLink prev_version) -> UndoLog;$/;"	m	namespace:bustub
Uniform	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	m	class:bustub::TableGenerator::Dist
Unknown	include/buffer/lru_k_replacer.h	/^enum class AccessType { Unknown = 0, Lookup, Scan, Index };$/;"	m	class:bustub::AccessType
UnlockAll	concurrency/lock_manager.cpp	/^void LockManager::UnlockAll() {$/;"	f	class:bustub::LockManager
Unpin	buffer/clock_replacer.cpp	/^void ClockReplacer::Unpin(frame_id_t frame_id) {}$/;"	f	class:bustub::ClockReplacer
Unpin	buffer/lru_replacer.cpp	/^void LRUReplacer::Unpin(frame_id_t frame_id) {}$/;"	f	class:bustub::LRUReplacer
Update	include/execution/plans/abstract_plan.h	/^  Update,$/;"	m	class:bustub::PlanType
UpdateCommitTs	include/concurrency/watermark.h	/^  auto UpdateCommitTs(timestamp_t commit_ts) { commit_ts_ = commit_ts; }$/;"	f	class:bustub::Watermark
UpdateDirectoryMapping	container/disk/hash/disk_extendible_hash_table.cpp	/^void DiskExtendibleHashTable<K, V, KC>::UpdateDirectoryMapping(ExtendibleHTableDirectoryPage *directory,$/;"	f	class:bustub::DiskExtendibleHashTable
UpdateExecutor	execution/update_executor.cpp	/^UpdateExecutor::UpdateExecutor(ExecutorContext *exec_ctx, const UpdatePlanNode *plan,$/;"	f	class:bustub::UpdateExecutor
UpdateExecutor	include/execution/executors/update_executor.h	/^class UpdateExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
UpdatePlanNode	include/execution/plans/update_plan.h	/^  UpdatePlanNode(SchemaRef output, AbstractPlanNodeRef child, table_oid_t table_oid,$/;"	f	class:bustub::UpdatePlanNode
UpdatePlanNode	include/execution/plans/update_plan.h	/^class UpdatePlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
UpdateStatement	binder/statement/update_statement.cpp	/^UpdateStatement::UpdateStatement($/;"	f	class:bustub::UpdateStatement
UpdateStatement	include/binder/statement/update_statement.h	/^class UpdateStatement : public BoundStatement {$/;"	c	namespace:bustub
UpdateTupleInPlaceUnsafe	storage/page/table_page.cpp	/^void TablePage::UpdateTupleInPlaceUnsafe(const TupleMeta &meta, const Tuple &tuple, RID rid) {$/;"	f	class:bustub::TablePage
UpdateTupleInPlaceWithLockAcquired	storage/table/table_heap.cpp	/^void TableHeap::UpdateTupleInPlaceWithLockAcquired(const TupleMeta &meta, const Tuple &tuple, RID rid,$/;"	f	class:bustub::TableHeap
UpdateTupleMeta	storage/page/table_page.cpp	/^void TablePage::UpdateTupleMeta(const TupleMeta &meta, const RID &rid) {$/;"	f	class:bustub::TablePage
UpdateTupleMeta	storage/table/table_heap.cpp	/^void TableHeap::UpdateTupleMeta(const TupleMeta &meta, RID rid) {$/;"	f	class:bustub::TableHeap
VARCHAR	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
VARCHAR_DEFAULT_LENGTH	include/common/config.h	/^static constexpr int VARCHAR_DEFAULT_LENGTH = 128;  \/\/ default length for varchar when constructing the column$/;"	m	namespace:bustub
VARIABLE_SET_STATEMENT	include/common/enums/statement_type.h	/^  VARIABLE_SET_STATEMENT,   \/\/ set variable statement type$/;"	m	class:bustub::StatementType
VARIABLE_SHOW_STATEMENT	include/common/enums/statement_type.h	/^  VARIABLE_SHOW_STATEMENT,  \/\/ show variable statement type$/;"	m	class:bustub::StatementType
VARLEN_COMPARE_FUNC	type/varlen_type.cpp	21;"	d	file:
VECTOR	include/type/type_id.h	/^enum TypeId { INVALID = 0, BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, DECIMAL, VARCHAR, TIMESTAMP, VECTOR };$/;"	e	enum:bustub::TypeId
Val	include/type/value.h	/^  union Val {$/;"	u	class:bustub::Value
Value	include/execution/expressions/abstract_expression.h	/^                            const Schema &right_schema) const -> Value = 0;$/;"	m	class:bustub::AbstractExpression
Value	include/execution/expressions/abstract_expression.h	/^  Value,$/;"	m	class:bustub::ExecExpressionType
Value	include/execution/expressions/abstract_expression.h	/^  virtual auto Evaluate(const Tuple *tuple, const Schema &schema) const -> Value = 0;$/;"	m	class:bustub::AbstractExpression
Value	include/storage/table/tuple.h	/^  auto GetValue(const Schema *schema, uint32_t column_idx) const -> Value;$/;"	m	class:bustub::Tuple
Value	include/type/integer_parent_type.h	/^  auto AddValue(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::IntegerParentType
Value	include/type/integer_parent_type.h	/^  auto DivideValue(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::IntegerParentType
Value	include/type/integer_parent_type.h	/^  auto ModuloValue(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::IntegerParentType
Value	include/type/integer_parent_type.h	/^  auto MultiplyValue(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::IntegerParentType
Value	include/type/integer_parent_type.h	/^  auto SubtractValue(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::IntegerParentType
Value	include/type/type.h	/^  static auto GetMaxValue(TypeId type_id) -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  static auto GetMinValue(TypeId type_id) -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Add(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto CastAs(const Value &val, TypeId type_id) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Copy(const Value &val) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto DeserializeFrom(const char *storage) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Divide(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Max(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Min(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Modulo(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Multiply(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto OperateNull(const Value &val, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Sqrt(const Value &val) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/type.h	/^  virtual auto Subtract(const Value &left, const Value &right) const -> Value;$/;"	m	class:bustub::CmpBool::Type
Value	include/type/value.h	/^  Value() : Value(TypeId::INVALID) {}$/;"	f	class:bustub::Value
Value	include/type/value.h	/^  auto operator=(Value other) -> Value &;$/;"	m	class:bustub::Value
Value	include/type/value.h	/^  explicit Value(const TypeId type) : manage_data_(false), type_id_(type) { size_.len_ = BUSTUB_VALUE_NULL; }$/;"	f	class:bustub::Value
Value	include/type/value.h	/^class Value {$/;"	c	namespace:bustub
Value	type/value.cpp	/^Value::Value(TypeId type, const char *data, uint32_t len, bool manage_data) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, const std::string &data) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, const std::vector<double> &data) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, double d) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, float f) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int16_t i) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int32_t i) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int64_t i) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, int8_t i) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(TypeId type, uint64_t i) : Value(type) {$/;"	f	class:bustub::Value
Value	type/value.cpp	/^Value::Value(const Value &other) {$/;"	f	class:bustub::Value
ValueFactory	include/type/value_factory.h	/^class ValueFactory {$/;"	c	namespace:bustub
ValueGuard	include/primer/trie_store.h	/^  ValueGuard(Trie root, const T &value) : root_(std::move(root)), value_(value) {}$/;"	f	class:bustub::ValueGuard
ValueGuard	include/primer/trie_store.h	/^class ValueGuard {$/;"	c	namespace:bustub
ValueType	include/storage/page/b_plus_tree_internal_page.h	/^  auto Lookup(const KeyType &key, const KeyComparator &comparator, int leftmost, int rightmost) const -> ValueType;$/;"	m	class:bustub::BPlusTreeInternalPage
ValueType	include/storage/page/b_plus_tree_internal_page.h	/^  auto ValueAt(int index) const -> ValueType;$/;"	m	class:bustub::BPlusTreeInternalPage
ValueType	include/storage/page/b_plus_tree_leaf_page.h	/^  auto ValueAt(int index) const -> ValueType;$/;"	m	class:bustub::BPlusTreeLeafPage
ValueType	include/storage/page/extendible_htable_bucket_page.h	/^  auto ValueAt(uint32_t bucket_idx) const -> ValueType;$/;"	m	class:bustub::ExtendibleHTableBucketPage
ValueType	include/storage/page/hash_table_block_page.h	/^  auto ValueAt(slot_offset_t bucket_ind) const -> ValueType;$/;"	m	class:bustub::HashTableBlockPage
ValueType	include/storage/page/hash_table_bucket_page.h	/^  auto ValueAt(uint32_t bucket_idx) const -> ValueType;$/;"	m	class:bustub::HashTableBucketPage
Values	include/execution/plans/abstract_plan.h	/^  Values,$/;"	m	class:bustub::PlanType
ValuesExecutor	execution/values_executor.cpp	/^ValuesExecutor::ValuesExecutor(ExecutorContext *exec_ctx, const ValuesPlanNode *plan)$/;"	f	class:bustub::ValuesExecutor
ValuesExecutor	include/execution/executors/values_executor.h	/^class ValuesExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
ValuesPlanNode	include/execution/plans/values_plan.h	/^  explicit ValuesPlanNode(SchemaRef output, std::vector<std::vector<AbstractExpressionRef>> values)$/;"	f	class:bustub::ValuesPlanNode
ValuesPlanNode	include/execution/plans/values_plan.h	/^class ValuesPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
VariableSetStatement	include/binder/statement/set_show_statement.h	/^  explicit VariableSetStatement(std::string variable, std::string value)$/;"	f	class:bustub::VariableSetStatement
VariableSetStatement	include/binder/statement/set_show_statement.h	/^class VariableSetStatement : public BoundStatement {$/;"	c	namespace:bustub
VariableShowStatement	include/binder/statement/set_show_statement.h	/^  explicit VariableShowStatement(std::string variable)$/;"	f	class:bustub::VariableShowStatement
VariableShowStatement	include/binder/statement/set_show_statement.h	/^class VariableShowStatement : public BoundStatement {$/;"	c	namespace:bustub
VarlenType	include/type/varlen_type.h	/^class VarlenType : public Type {$/;"	c	namespace:bustub
VarlenType	type/varlen_type.cpp	/^VarlenType::VarlenType(TypeId type) : Type(type) {}$/;"	f	class:bustub::VarlenType
VectorType	include/type/vector_type.h	/^class VectorType : public Type {$/;"	c	namespace:bustub
VectorType	type/vector_type.cpp	/^VectorType::VectorType() : Type(TypeId::VECTOR) {}$/;"	f	class:bustub::VectorType
VerifyIntegrity	container/disk/hash/disk_extendible_hash_table_utils.cpp	/^void DiskExtendibleHashTable<K, V, KC>::VerifyIntegrity() const {$/;"	f	class:bustub::DiskExtendibleHashTable
VerifyIntegrity	storage/page/extendible_htable_page_utils.cpp	/^void ExtendibleHTableDirectoryPage::VerifyIntegrity() const {$/;"	f	class:bustub::ExtendibleHTableDirectoryPage
VerifyIntegrity	storage/page/hash_table_directory_page.cpp	/^void HashTableDirectoryPage::VerifyIntegrity() {$/;"	f	class:bustub::HashTableDirectoryPage
WINDOW	include/binder/bound_expression.h	/^  WINDOW = 12,    \/**< Window Aggregation expression type. *\/$/;"	m	class:bustub::ExpressionType
WLatch	include/storage/page/page.h	/^  inline void WLatch() { rwlatch_.lock(); }$/;"	f	class:bustub::Page
WLock	include/common/rwlatch.h	/^  void WLock() { mutex_.lock(); }$/;"	f	class:bustub::ReaderWriterLatch
WUnlatch	include/storage/page/page.h	/^  inline void WUnlatch() { rwlatch_.unlock(); }$/;"	f	class:bustub::Page
WUnlock	include/common/rwlatch.h	/^  void WUnlock() { mutex_.unlock(); }$/;"	f	class:bustub::ReaderWriterLatch
Watermark	include/concurrency/watermark.h	/^  explicit Watermark(timestamp_t commit_ts) : commit_ts_(commit_ts), watermark_(commit_ts) {}$/;"	f	class:bustub::Watermark
Watermark	include/concurrency/watermark.h	/^class Watermark {$/;"	c	namespace:bustub
WindowBoundary	include/binder/expressions/bound_window.h	/^enum class WindowBoundary : uint8_t {$/;"	c	namespace:bustub
WindowFunction	include/execution/plans/window_plan.h	/^  struct WindowFunction {$/;"	s	class:bustub::WindowFunctionPlanNode
WindowFunctionExecutor	execution/window_function_executor.cpp	/^WindowFunctionExecutor::WindowFunctionExecutor(ExecutorContext *exec_ctx, const WindowFunctionPlanNode *plan,$/;"	f	class:bustub::WindowFunctionExecutor
WindowFunctionExecutor	include/execution/executors/window_function_executor.h	/^class WindowFunctionExecutor : public AbstractExecutor {$/;"	c	namespace:bustub
WindowFunctionPlanNode	include/execution/plans/window_plan.h	/^  WindowFunctionPlanNode(SchemaRef output_schema, AbstractPlanNodeRef child, std::vector<uint32_t> window_func_indexes,$/;"	f	class:bustub::WindowFunctionPlanNode
WindowFunctionPlanNode	include/execution/plans/window_plan.h	/^class WindowFunctionPlanNode : public AbstractPlanNode {$/;"	c	namespace:bustub
WindowFunctionType	include/execution/plans/window_plan.h	/^enum class WindowFunctionType { CountStarAggregate, CountAggregate, SumAggregate, MinAggregate, MaxAggregate, Rank };$/;"	c	namespace:bustub
WriteLog	storage/disk/disk_manager.cpp	/^void DiskManager::WriteLog(char *log_data, int size) {$/;"	f	class:bustub::DiskManager
WriteOneCell	common/bustub_instance.cpp	/^void BusTubInstance::WriteOneCell(const std::string &cell, ResultWriter &writer) { writer.OneCell(cell); }$/;"	f	class:bustub::BusTubInstance
WritePage	storage/disk/disk_manager.cpp	/^void DiskManager::WritePage(page_id_t page_id, const char *page_data) {$/;"	f	class:bustub::DiskManager
WritePage	storage/disk/disk_manager_memory.cpp	/^void DiskManagerMemory::WritePage(page_id_t page_id, const char *page_data) {$/;"	f	class:bustub::DiskManagerMemory
WritePageGuard	include/buffer/buffer_pool_manager.h	/^  auto WritePage(page_id_t page_id, AccessType access_type = AccessType::Unknown) -> WritePageGuard;$/;"	m	class:bustub::BufferPoolManager
WritePageGuard	include/storage/page/page_guard.h	/^  auto operator=(const WritePageGuard &) -> WritePageGuard & = delete;$/;"	m	class:bustub::WritePageGuard
WritePageGuard	include/storage/page/page_guard.h	/^class WritePageGuard {$/;"	c	namespace:bustub
WritePageGuard	include/storage/table/table_heap.h	/^  auto AcquireTablePageWriteLock(RID rid) -> WritePageGuard;$/;"	m	class:bustub::TableHeap
WritePageGuard	storage/page/page_guard.cpp	/^WritePageGuard::WritePageGuard(page_id_t page_id, std::shared_ptr<FrameHeader> frame,$/;"	f	class:bustub::WritePageGuard
WriteTuples	include/execution/executors/external_merge_sort_executor.h	/^  void WriteTuples(const std::vector<Tuple> &tuples) {$/;"	f	class:bustub::SortPage
Zipf_50	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	m	class:bustub::TableGenerator::Dist
Zipf_75	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	m	class:bustub::TableGenerator::Dist
Zipf_95	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	m	class:bustub::TableGenerator::Dist
Zipf_99	include/catalog/table_generator.h	/^  enum class Dist : uint8_t { Uniform, Zipf_50, Zipf_75, Zipf_95, Zipf_99, Serial, Cyclic };$/;"	m	class:bustub::TableGenerator::Dist
__FUNCTION__	include/common/logger.h	86;"	d
__SHORT_FILE__	include/common/logger.h	50;"	d
active_txn_	include/recovery/log_recovery.h	/^  std::unordered_map<txn_id_t, lsn_t> active_txn_;$/;"	m	class:bustub::LogRecovery
agg_exprs_	include/execution/executors/aggregation_executor.h	/^  const std::vector<AbstractExpressionRef> &agg_exprs_;$/;"	m	class:bustub::SimpleAggregationHashTable
agg_types_	include/execution/executors/aggregation_executor.h	/^  const std::vector<AggregationType> &agg_types_;$/;"	m	class:bustub::SimpleAggregationHashTable
agg_types_	include/execution/plans/aggregation_plan.h	/^  std::vector<AggregationType> agg_types_;$/;"	m	class:bustub::AggregationPlanNode
aggregates_	include/execution/plans/aggregation_plan.h	/^  std::vector<AbstractExpressionRef> aggregates_;$/;"	m	class:bustub::AggregationPlanNode
aggregates_	include/execution/plans/aggregation_plan.h	/^  std::vector<Value> aggregates_;$/;"	m	struct:bustub::AggregateValue
aggregations_	include/planner/planner.h	/^  std::vector<std::unique_ptr<BoundExpression>> aggregations_;$/;"	m	class:bustub::PlannerContext
alias_	include/binder/expressions/bound_alias.h	/^  std::string alias_;$/;"	m	class:bustub::BoundAlias
alias_	include/binder/table_ref/bound_base_table_ref.h	/^  std::optional<std::string> alias_;$/;"	m	class:bustub::BoundBaseTableRef
alias_	include/binder/table_ref/bound_cte_ref.h	/^  std::string alias_;$/;"	m	class:bustub::BoundCTERef
alias_	include/binder/table_ref/bound_subquery_ref.h	/^  std::string alias_;$/;"	m	class:bustub::BoundSubqueryRef
arg_	include/binder/expressions/bound_unary_op.h	/^  std::unique_ptr<BoundExpression> arg_;$/;"	m	class:bustub::BoundUnaryOp
args_	include/binder/expressions/bound_agg_call.h	/^  std::vector<std::unique_ptr<BoundExpression>> args_;$/;"	m	class:bustub::BoundAggCall
args_	include/binder/expressions/bound_func_call.h	/^  std::vector<std::unique_ptr<BoundExpression>> args_;$/;"	m	class:bustub::BoundFuncCall
args_	include/binder/expressions/bound_window.h	/^  std::vector<std::unique_ptr<BoundExpression>> args_;$/;"	m	class:bustub::WindowBoundary::BoundWindow
array_	include/storage/page/extendible_htable_bucket_page.h	/^  MappingType array_[HTableBucketArraySize(sizeof(MappingType))];$/;"	m	class:bustub::ExtendibleHTableBucketPage
array_	include/storage/page/hash_table_block_page.h	/^  MappingType array_[1];$/;"	m	class:bustub::HashTableBlockPage
array_	include/storage/page/hash_table_bucket_page.h	/^  MappingType array_[1];$/;"	m	class:bustub::HashTableBucketPage
b_tree_	include/execution/executors/index_scan_executor.h	/^  BPlusTreeIndexForTwoIntegerColumn *b_tree_;$/;"	m	class:bustub::IndexScanExecutor
bigint_	include/type/value.h	/^    int64_t bigint_;$/;"	m	union:bustub::Value::Val
bitset	include/primer/hyperloglog.h	/^  auto ComputeBinary(const hash_t &hash) const -> std::bitset<BITSET_CAPACITY>;$/;"	m	class:bustub::HyperLogLog::std
block_page_ids_	include/storage/page/hash_table_header_page.h	/^  __attribute__((unused)) page_id_t block_page_ids_[1];$/;"	m	class:bustub::HashTableHeaderPage
bool	include/binder/binder.h	/^  static auto IsKeyword(const std::string &text) -> bool;$/;"	m	class:bustub::Binder
bool	include/binder/keyword_helper.h	/^  static auto IsKeyword(const std::string &text) -> bool;$/;"	m	class:bustub::KeywordHelper
bool	include/binder/keyword_helper.h	/^  static auto RequiresQuotes(const std::string &text) -> bool;$/;"	m	class:bustub::KeywordHelper
bool	include/buffer/buffer_pool_manager.h	/^  auto DeletePage(page_id_t page_id) -> bool;$/;"	m	class:bustub::BufferPoolManager
bool	include/buffer/buffer_pool_manager.h	/^  auto FlushPage(page_id_t page_id) -> bool;$/;"	m	class:bustub::BufferPoolManager
bool	include/buffer/buffer_pool_manager.h	/^  auto IsDirty() -> bool;$/;"	m	class:bustub::FrameHeader
bool	include/buffer/lru_k_replacer.h	/^  auto AccessNode(size_t current_timestamp) -> bool;$/;"	m	class:bustub::LRUKNode
bool	include/buffer/replacer.h	/^  virtual auto Victim(frame_id_t *frame_id) -> bool = 0;$/;"	m	class:bustub::Replacer
bool	include/common/bustub_instance.h	/^                     std::shared_ptr<CheckOptions> check_options = nullptr) -> bool;$/;"	m	class:bustub::BusTubInstance
bool	include/common/bustub_instance.h	/^      -> bool;$/;"	m	class:bustub::BusTubInstance
bool	include/common/util/string_util.h	/^  static auto Contains(const std::string &haystack, const std::string &needle) -> bool;$/;"	m	class:bustub::StringUtil
bool	include/common/util/string_util.h	/^  static auto ContainsAfter(const std::string &keyword, const std::string &haystack, const std::string &needle) -> bool;$/;"	m	class:bustub::StringUtil
bool	include/common/util/string_util.h	/^  static auto EndsWith(const std::string &str, const std::string &suffix) -> bool;$/;"	m	class:bustub::StringUtil
bool	include/common/util/string_util.h	/^  static auto StartsWith(const std::string &str, const std::string &prefix) -> bool;$/;"	m	class:bustub::StringUtil
bool	include/concurrency/lock_manager.h	/^                 std::unordered_set<txn_id_t> &visited, txn_id_t *abort_txn_id) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto AreLocksCompatible(LockMode l1, LockMode l2) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto CanLockUpgrade(LockMode curr_lock_mode, LockMode requested_lock_mode) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto CanTxnTakeLock(Transaction *txn, LockMode lock_mode) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto CheckAppropriateLockOnTable(Transaction *txn, const table_oid_t &oid, LockMode row_lock_mode) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto HasCycle(txn_id_t *txn_id) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto LockRow(Transaction *txn, LockMode lock_mode, const table_oid_t &oid, const RID &rid) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto LockTable(Transaction *txn, LockMode lock_mode, const table_oid_t &oid) noexcept(false) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto UnlockRow(Transaction *txn, const table_oid_t &oid, const RID &rid, bool force = false) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto UnlockTable(Transaction *txn, const table_oid_t &oid) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto UpgradeLockRow(Transaction *txn, LockMode lock_mode, const table_oid_t &oid, const RID &rid) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/lock_manager.h	/^  auto UpgradeLockTable(Transaction *txn, LockMode lock_mode, const table_oid_t &oid) -> bool;$/;"	m	class:bustub::LockManager
bool	include/concurrency/transaction_manager.h	/^                      std::function<bool(std::optional<UndoLink>)> &&check = nullptr) -> bool;$/;"	m	class:bustub::TransactionManager
bool	include/concurrency/transaction_manager.h	/^    -> bool;$/;"	m	namespace:bustub
bool	include/concurrency/transaction_manager.h	/^  auto Commit(Transaction *txn) -> bool;$/;"	m	class:bustub::TransactionManager
bool	include/concurrency/transaction_manager.h	/^  auto VerifyTxn(Transaction *txn) -> bool;$/;"	m	class:bustub::TransactionManager
bool	include/container/disk/hash/disk_extendible_hash_table.h	/^                            const V &value) -> bool;$/;"	m	class:bustub::DiskExtendibleHashTable
bool	include/container/disk/hash/disk_extendible_hash_table.h	/^      -> bool;$/;"	m	class:bustub::DiskExtendibleHashTable
bool	include/container/disk/hash/disk_extendible_hash_table.h	/^  auto GetValue(const K &key, std::vector<V> *result, Transaction *transaction = nullptr) const -> bool;$/;"	m	class:bustub::DiskExtendibleHashTable
bool	include/container/disk/hash/disk_extendible_hash_table.h	/^  auto Insert(const K &key, const V &value, Transaction *transaction = nullptr) -> bool;$/;"	m	class:bustub::DiskExtendibleHashTable
bool	include/container/disk/hash/disk_extendible_hash_table.h	/^  auto Remove(const K &key, Transaction *transaction = nullptr) -> bool;$/;"	m	class:bustub::DiskExtendibleHashTable
bool	include/container/disk/hash/disk_hash_table.h	/^  virtual auto GetValue(Transaction *transaction, const KeyType &key, std::vector<ValueType> *result) -> bool = 0;$/;"	m	class:bustub::DiskHashTable
bool	include/container/disk/hash/disk_hash_table.h	/^  virtual auto Insert(Transaction *transaction, const KeyType &key, const ValueType &value) -> bool = 0;$/;"	m	class:bustub::DiskHashTable
bool	include/container/disk/hash/disk_hash_table.h	/^  virtual auto Remove(Transaction *transaction, const KeyType &key, const ValueType &value) -> bool = 0;$/;"	m	class:bustub::DiskHashTable
bool	include/container/disk/hash/linear_probe_hash_table.h	/^  auto GetValue(Transaction *transaction, const KeyType &key, std::vector<ValueType> *result) -> bool;$/;"	m	class:bustub::LinearProbeHashTable
bool	include/container/disk/hash/linear_probe_hash_table.h	/^  auto GetValueLatchFree(Transaction *transaction, const KeyType &key, std::vector<ValueType> *result) -> bool;$/;"	m	class:bustub::LinearProbeHashTable
bool	include/container/disk/hash/linear_probe_hash_table.h	/^  auto Insert(Transaction *transaction, const KeyType &key, const ValueType &value) -> bool;$/;"	m	class:bustub::LinearProbeHashTable
bool	include/container/disk/hash/linear_probe_hash_table.h	/^  auto Remove(Transaction *transaction, const KeyType &key, const ValueType &value) -> bool;$/;"	m	class:bustub::LinearProbeHashTable
bool	include/container/hash/hash_table.h	/^  virtual auto Find(const K &key, V &value) -> bool = 0;$/;"	m	class:bustub::HashTable
bool	include/container/hash/hash_table.h	/^  virtual auto Remove(const K &key) -> bool = 0;$/;"	m	class:bustub::HashTable
bool	include/execution/execution_common.h	/^  auto operator()(const SortEntry &entry_a, const SortEntry &entry_b) const -> bool;$/;"	m	class:bustub::TupleComparator
bool	include/execution/executors/abstract_executor.h	/^  virtual auto Next(Tuple *tuple, RID *rid) -> bool = 0;$/;"	m	class:bustub::AbstractExecutor
bool	include/execution/executors/index_scan_executor.h	/^  auto FullScan(Tuple *tuple, RID *rid) -> bool;$/;"	m	class:bustub::IndexScanExecutor
bool	include/optimizer/optimizer.h	/^  auto IsPredicateTrue(const AbstractExpressionRef &expr) -> bool;$/;"	m	class:bustub::Optimizer
bool	include/primer/orset.h	/^  auto Contains(const T &elem) const -> bool;$/;"	m	class:bustub::ORSet
bool	include/recovery/log_recovery.h	/^  auto DeserializeLogRecord(const char *data, LogRecord *log_record) -> bool;$/;"	m	class:bustub::LogRecovery
bool	include/storage/disk/disk_manager.h	/^  auto GetFlushState() const -> bool;$/;"	m	class:bustub::DiskManager
bool	include/storage/disk/disk_manager.h	/^  auto ReadLog(char *log_data, int size, int offset) -> bool;$/;"	m	class:bustub::DiskManager
bool	include/storage/index/b_plus_tree.h	/^                const KeyType &parent_key) -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^      -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto GetValue(const KeyType &key, std::vector<ValueType> *result) -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto Insert(const KeyType &key, const ValueType &value) -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto IsEmpty() const -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto IsEmpty(Context *ctx) const -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto OptiInsert(Context *ctx, const KeyType &key, const ValueType &value) -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto StartNewTree(Context *ctx, const KeyType &key, const ValueType &value) -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/b_plus_tree.h	/^  auto UpdateRoot(Context *ctx, page_id_t root_page_id) -> bool;$/;"	m	class:bustub::BPlusTree
bool	include/storage/index/index.h	/^  virtual auto InsertEntry(const Tuple &key, RID rid, Transaction *transaction) -> bool = 0;$/;"	m	class:bustub::Index
bool	include/storage/index/index_iterator.h	/^  auto IsEnd() -> bool;$/;"	m	class:bustub::IndexIterator
bool	include/storage/page/b_plus_tree_internal_page.h	/^  auto Insert(const KeyType &key, const ValueType &value, int old_index, const KeyComparator &comparator) -> bool;$/;"	m	class:bustub::BPlusTreeInternalPage
bool	include/storage/page/b_plus_tree_internal_page.h	/^  auto Remove(const KeyType &key, int index, const KeyComparator &comparator) -> bool;$/;"	m	class:bustub::BPlusTreeInternalPage
bool	include/storage/page/b_plus_tree_leaf_page.h	/^  auto Insert(const KeyType &key, const ValueType &value, const KeyComparator &comparator) -> bool;$/;"	m	class:bustub::BPlusTreeLeafPage
bool	include/storage/page/b_plus_tree_leaf_page.h	/^  auto Lookup(const KeyType &key, std::vector<ValueType> *result, KeyComparator comparator) const -> bool;$/;"	m	class:bustub::BPlusTreeLeafPage
bool	include/storage/page/b_plus_tree_leaf_page.h	/^  auto RemoveAndDeleteRecord(const KeyType &key, const KeyComparator &comparator) -> bool;$/;"	m	class:bustub::BPlusTreeLeafPage
bool	include/storage/page/b_plus_tree_page.h	/^  auto IsLeafPage() const -> bool;$/;"	m	class:bustub::BPlusTreePage
bool	include/storage/page/extendible_htable_bucket_page.h	/^  auto Insert(const KeyType &key, const ValueType &value, const KeyComparator &cmp) -> bool;$/;"	m	class:bustub::ExtendibleHTableBucketPage
bool	include/storage/page/extendible_htable_bucket_page.h	/^  auto IsEmpty() const -> bool;$/;"	m	class:bustub::ExtendibleHTableBucketPage
bool	include/storage/page/extendible_htable_bucket_page.h	/^  auto IsFull() const -> bool;$/;"	m	class:bustub::ExtendibleHTableBucketPage
bool	include/storage/page/extendible_htable_bucket_page.h	/^  auto Lookup(const KeyType &key, ValueType &value, const KeyComparator &cmp) const -> bool;$/;"	m	class:bustub::ExtendibleHTableBucketPage
bool	include/storage/page/extendible_htable_bucket_page.h	/^  auto Remove(const KeyType &key, const KeyComparator &cmp) -> bool;$/;"	m	class:bustub::ExtendibleHTableBucketPage
bool	include/storage/page/extendible_htable_directory_page.h	/^  auto CanShrink() -> bool;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
bool	include/storage/page/hash_table_block_page.h	/^  auto GetValue(KeyType key, KeyComparator cmp, std::vector<ValueType> *result) -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto Insert(KeyType key, ValueType value, KeyComparator cmp) -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto Insert(slot_offset_t bucket_ind, const KeyType &key, const ValueType &value) -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto IsEmpty() -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto IsFull() -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto IsOccupied(slot_offset_t bucket_ind) const -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto IsReadable(slot_offset_t bucket_ind) const -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_block_page.h	/^  auto Remove(KeyType key, ValueType value, KeyComparator cmp) -> bool;$/;"	m	class:bustub::HashTableBlockPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto GetValue(KeyType key, KeyComparator cmp, std::vector<ValueType> *result) -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto Insert(KeyType key, ValueType value, KeyComparator cmp) -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto IsEmpty() -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto IsFull() -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto IsOccupied(uint32_t bucket_idx) const -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto IsReadable(uint32_t bucket_idx) const -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_bucket_page.h	/^  auto Remove(KeyType key, ValueType value, KeyComparator cmp) -> bool;$/;"	m	class:bustub::HashTableBucketPage
bool	include/storage/page/hash_table_directory_page.h	/^  auto CanShrink() -> bool;$/;"	m	class:bustub::HashTableDirectoryPage
bool	include/storage/page/page_guard.h	/^  auto IsDirty() const -> bool;$/;"	m	class:bustub::ReadPageGuard
bool	include/storage/page/page_guard.h	/^  auto IsDirty() const -> bool;$/;"	m	class:bustub::WritePageGuard
bool	include/storage/table/table_heap.h	/^      -> bool;$/;"	m	class:bustub::TableHeap
bool	include/storage/table/table_iterator.h	/^  auto IsEnd() -> bool;$/;"	m	class:bustub::TableIterator
bool	include/type/type.h	/^  auto IsCoercableFrom(TypeId type_id) const -> bool;$/;"	m	class:bustub::CmpBool::Type
bool	include/type/type.h	/^  virtual auto IsInlined(const Value &val) const -> bool;$/;"	m	class:bustub::CmpBool::Type
bool	include/type/type.h	/^  virtual auto IsZero(const Value &val) const -> bool;$/;"	m	class:bustub::CmpBool::Type
bool	include/type/value.h	/^  auto CheckComparable(const Value &o) const -> bool;$/;"	m	class:bustub::Value
bool	include/type/value.h	/^  auto CheckInteger() const -> bool;$/;"	m	class:bustub::Value
boolean_	include/type/value.h	/^    int8_t boolean_;$/;"	m	union:bustub::Value::Val
bpm_	include/catalog/catalog.h	/^  [[maybe_unused]] BufferPoolManager *bpm_;$/;"	m	class:bustub::Catalog
bpm_	include/container/disk/hash/disk_extendible_hash_table.h	/^  BufferPoolManager *bpm_;$/;"	m	class:bustub::DiskExtendibleHashTable
bpm_	include/execution/execution_engine.h	/^  [[maybe_unused]] BufferPoolManager *bpm_;$/;"	m	class:bustub::ExecutionEngine
bpm_	include/execution/executor_context.h	/^  BufferPoolManager *bpm_;$/;"	m	class:bustub::ExecutorContext
bpm_	include/execution/executors/external_merge_sort_executor.h	/^    BufferPoolManager *bpm_;$/;"	m	class:bustub::MergeSortRun::Iterator
bpm_	include/execution/executors/external_merge_sort_executor.h	/^  [[maybe_unused]] BufferPoolManager *bpm_;$/;"	m	class:bustub::MergeSortRun
bpm_	include/storage/index/b_plus_tree.h	/^  BufferPoolManager *bpm_;$/;"	m	class:bustub::BPlusTree
bpm_	include/storage/index/index_iterator.h	/^  BufferPoolManager *bpm_;$/;"	m	class:bustub::IndexIterator
bpm_	include/storage/table/table_heap.h	/^  BufferPoolManager *bpm_;$/;"	m	class:bustub::TableHeap
bpm_latch_	include/buffer/buffer_pool_manager.h	/^  std::shared_ptr<std::mutex> bpm_latch_;$/;"	m	class:bustub::BufferPoolManager
bpm_latch_	include/storage/page/page_guard.h	/^  std::shared_ptr<std::mutex> bpm_latch_;$/;"	m	class:bustub::ReadPageGuard
bpm_latch_	include/storage/page/page_guard.h	/^  std::shared_ptr<std::mutex> bpm_latch_;$/;"	m	class:bustub::WritePageGuard
bucket_max_size_	include/container/disk/hash/disk_extendible_hash_table.h	/^  uint32_t bucket_max_size_;$/;"	m	class:bustub::DiskExtendibleHashTable
bucket_page_ids_	include/storage/page/extendible_htable_directory_page.h	/^  page_id_t bucket_page_ids_[HTABLE_DIRECTORY_ARRAY_SIZE];$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
bucket_page_ids_	include/storage/page/hash_table_directory_page.h	/^  page_id_t bucket_page_ids_[DIRECTORY_ARRAY_SIZE];$/;"	m	class:bustub::HashTableDirectoryPage
buffer_pool_manager_	include/common/bustub_instance.h	/^  std::unique_ptr<BufferPoolManager> buffer_pool_manager_;$/;"	m	class:bustub::BusTubInstance
buffer_pool_manager_	include/container/disk/hash/linear_probe_hash_table.h	/^  BufferPoolManager *buffer_pool_manager_;$/;"	m	class:bustub::LinearProbeHashTable
buffer_pool_manager_	include/recovery/checkpoint_manager.h	/^  BufferPoolManager *buffer_pool_manager_ __attribute__((__unused__));$/;"	m	class:bustub::CheckpointManager
buffer_pool_manager_	include/recovery/log_recovery.h	/^  BufferPoolManager *buffer_pool_manager_ __attribute__((__unused__));$/;"	m	class:bustub::LogRecovery
buffer_used	storage/disk/disk_manager.cpp	/^static char *buffer_used;$/;"	m	namespace:bustub	file:
bustub	binder/bind_create.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/bind_insert.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/bind_select.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/bind_variable.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/binder.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/bound_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/fmt_impl.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/keyword_helper.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/node_tag_to_string.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/create_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/delete_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/explain_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/index_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/insert_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/select_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/statement/update_statement.cpp	/^namespace bustub {$/;"	n	file:
bustub	binder/transformer.cpp	/^namespace bustub {$/;"	n	file:
bustub	buffer/buffer_pool_manager.cpp	/^namespace bustub {$/;"	n	file:
bustub	buffer/clock_replacer.cpp	/^namespace bustub {$/;"	n	file:
bustub	buffer/lru_k_replacer.cpp	/^namespace bustub {$/;"	n	file:
bustub	buffer/lru_replacer.cpp	/^namespace bustub {$/;"	n	file:
bustub	catalog/column.cpp	/^namespace bustub {$/;"	n	file:
bustub	catalog/schema.cpp	/^namespace bustub {$/;"	n	file:
bustub	catalog/table_generator.cpp	/^namespace bustub {$/;"	n	file:
bustub	common/bustub_ddl.cpp	/^namespace bustub {$/;"	n	file:
bustub	common/bustub_instance.cpp	/^namespace bustub {$/;"	n	file:
bustub	common/config.cpp	/^namespace bustub {$/;"	n	file:
bustub	common/util/string_util.cpp	/^namespace bustub {$/;"	n	file:
bustub	concurrency/lock_manager.cpp	/^namespace bustub {$/;"	n	file:
bustub	concurrency/transaction_manager.cpp	/^namespace bustub {$/;"	n	file:
bustub	concurrency/transaction_manager_impl.cpp	/^namespace bustub {$/;"	n	file:
bustub	concurrency/watermark.cpp	/^namespace bustub {$/;"	n	file:
bustub	container/disk/hash/disk_extendible_hash_table.cpp	/^namespace bustub {$/;"	n	file:
bustub	container/disk/hash/disk_extendible_hash_table_utils.cpp	/^namespace bustub {$/;"	n	file:
bustub	container/disk/hash/linear_probe_hash_table.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/aggregation_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/delete_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/execution_common.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/executor_factory.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/external_merge_sort_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/filter_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/fmt_impl.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/hash_join_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/index_scan_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/init_check_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/insert_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/limit_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/mock_scan_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/nested_index_join_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/nested_loop_join_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/plan_node.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/projection_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/seq_scan_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/sort_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/topn_check_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/topn_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/topn_per_group_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/update_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/values_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	execution/window_function_executor.cpp	/^namespace bustub {$/;"	n	file:
bustub	include/binder/binder.h	/^namespace bustub {$/;"	n
bustub	include/binder/bound_expression.h	/^namespace bustub {$/;"	n
bustub	include/binder/bound_order_by.h	/^namespace bustub {$/;"	n
bustub	include/binder/bound_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/bound_table_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_agg_call.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_alias.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_binary_op.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_column_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_constant.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_func_call.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_star.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_unary_op.h	/^namespace bustub {$/;"	n
bustub	include/binder/expressions/bound_window.h	/^namespace bustub {$/;"	n
bustub	include/binder/keyword_helper.h	/^namespace bustub {$/;"	n
bustub	include/binder/simplified_token.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/create_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/delete_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/explain_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/index_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/insert_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/select_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/set_show_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/statement/update_statement.h	/^namespace bustub {$/;"	n
bustub	include/binder/table_ref/bound_base_table_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/table_ref/bound_cross_product_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/table_ref/bound_cte_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/table_ref/bound_expression_list_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/table_ref/bound_join_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/table_ref/bound_subquery_ref.h	/^namespace bustub {$/;"	n
bustub	include/binder/tokens.h	/^namespace bustub {$/;"	n
bustub	include/buffer/buffer_pool_manager.h	/^namespace bustub {$/;"	n
bustub	include/buffer/clock_replacer.h	/^namespace bustub {$/;"	n
bustub	include/buffer/lru_k_replacer.h	/^namespace bustub {$/;"	n
bustub	include/buffer/lru_replacer.h	/^namespace bustub {$/;"	n
bustub	include/buffer/replacer.h	/^namespace bustub {$/;"	n
bustub	include/catalog/catalog.h	/^namespace bustub {$/;"	n
bustub	include/catalog/column.h	/^namespace bustub {$/;"	n
bustub	include/catalog/schema.h	/^namespace bustub {$/;"	n
bustub	include/catalog/table_generator.h	/^namespace bustub {$/;"	n
bustub	include/common/bustub_instance.h	/^namespace bustub {$/;"	n
bustub	include/common/channel.h	/^namespace bustub {$/;"	n
bustub	include/common/config.h	/^namespace bustub {$/;"	n
bustub	include/common/enums/statement_type.h	/^namespace bustub {$/;"	n
bustub	include/common/exception.h	/^namespace bustub {$/;"	n
bustub	include/common/logger.h	/^namespace bustub {$/;"	n
bustub	include/common/macros.h	/^namespace bustub {$/;"	n
bustub	include/common/rid.h	/^namespace bustub {$/;"	n
bustub	include/common/rwlatch.h	/^namespace bustub {$/;"	n
bustub	include/common/util/hash_util.h	/^namespace bustub {$/;"	n
bustub	include/common/util/string_util.h	/^namespace bustub {$/;"	n
bustub	include/concurrency/lock_manager.h	/^namespace bustub {$/;"	n
bustub	include/concurrency/transaction.h	/^namespace bustub {$/;"	n
bustub	include/concurrency/transaction_manager.h	/^namespace bustub {$/;"	n
bustub	include/concurrency/watermark.h	/^namespace bustub {$/;"	n
bustub	include/container/disk/hash/disk_extendible_hash_table.h	/^namespace bustub {$/;"	n
bustub	include/container/disk/hash/disk_hash_table.h	/^namespace bustub {$/;"	n
bustub	include/container/disk/hash/linear_probe_hash_table.h	/^namespace bustub {$/;"	n
bustub	include/container/hash/hash_function.h	/^namespace bustub {$/;"	n
bustub	include/container/hash/hash_table.h	/^namespace bustub {$/;"	n
bustub	include/execution/check_options.h	/^namespace bustub {$/;"	n
bustub	include/execution/execution_common.h	/^namespace bustub {$/;"	n
bustub	include/execution/execution_engine.h	/^namespace bustub {$/;"	n
bustub	include/execution/executor_context.h	/^namespace bustub {$/;"	n
bustub	include/execution/executor_factory.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/abstract_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/aggregation_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/delete_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/external_merge_sort_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/filter_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/hash_join_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/index_scan_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/init_check_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/insert_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/limit_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/mock_scan_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/nested_index_join_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/nested_loop_join_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/projection_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/seq_scan_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/sort_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/topn_check_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/topn_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/topn_per_group_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/update_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/values_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/executors/window_function_executor.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/abstract_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/arithmetic_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/array_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/column_value_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/comparison_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/constant_value_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/logic_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/expressions/string_expression.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/abstract_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/aggregation_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/delete_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/filter_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/hash_join_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/index_scan_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/insert_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/limit_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/mock_scan_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/nested_index_join_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/nested_loop_join_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/projection_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/seq_scan_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/sort_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/topn_per_group_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/topn_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/update_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/values_plan.h	/^namespace bustub {$/;"	n
bustub	include/execution/plans/window_plan.h	/^namespace bustub {$/;"	n
bustub	include/optimizer/optimizer.h	/^namespace bustub {$/;"	n
bustub	include/optimizer/optimizer_internal.h	/^namespace bustub {$/;"	n
bustub	include/planner/planner.h	/^namespace bustub {$/;"	n
bustub	include/primer/hyperloglog.h	/^namespace bustub {$/;"	n
bustub	include/primer/hyperloglog_presto.h	/^namespace bustub {$/;"	n
bustub	include/primer/orset.h	/^namespace bustub {$/;"	n
bustub	include/primer/orset_driver.h	/^namespace bustub {$/;"	n
bustub	include/primer/trie.h	/^namespace bustub {$/;"	n
bustub	include/primer/trie_store.h	/^namespace bustub {$/;"	n
bustub	include/recovery/checkpoint_manager.h	/^namespace bustub {$/;"	n
bustub	include/recovery/log_manager.h	/^namespace bustub {$/;"	n
bustub	include/recovery/log_record.h	/^namespace bustub {$/;"	n
bustub	include/recovery/log_recovery.h	/^namespace bustub {$/;"	n
bustub	include/storage/disk/disk_manager.h	/^namespace bustub {$/;"	n
bustub	include/storage/disk/disk_manager_memory.h	/^namespace bustub {$/;"	n
bustub	include/storage/disk/disk_scheduler.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/b_plus_tree.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/b_plus_tree_debug.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/b_plus_tree_index.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/extendible_hash_table_index.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/generic_key.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/hash_comparator.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/index.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/index_iterator.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/int_comparator.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/linear_probe_hash_table_index.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/stl_comparator_wrapper.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/stl_equal_wrapper.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/stl_hasher_wrapper.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/stl_ordered.h	/^namespace bustub {$/;"	n
bustub	include/storage/index/stl_unordered.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/b_plus_tree_header_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/b_plus_tree_internal_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/b_plus_tree_leaf_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/b_plus_tree_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/extendible_htable_bucket_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/extendible_htable_directory_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/extendible_htable_header_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/hash_table_block_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/hash_table_bucket_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/hash_table_directory_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/hash_table_header_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/page_guard.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/table_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/page/tmp_tuple_page.h	/^namespace bustub {$/;"	n
bustub	include/storage/table/table_heap.h	/^namespace bustub {$/;"	n
bustub	include/storage/table/table_iterator.h	/^namespace bustub {$/;"	n
bustub	include/storage/table/tmp_tuple.h	/^namespace bustub {$/;"	n
bustub	include/storage/table/tuple.h	/^namespace bustub {$/;"	n
bustub	include/type/abstract_pool.h	/^namespace bustub {$/;"	n
bustub	include/type/bigint_type.h	/^namespace bustub {$/;"	n
bustub	include/type/boolean_type.h	/^namespace bustub {$/;"	n
bustub	include/type/decimal_type.h	/^namespace bustub {$/;"	n
bustub	include/type/integer_parent_type.h	/^namespace bustub {$/;"	n
bustub	include/type/integer_type.h	/^namespace bustub {$/;"	n
bustub	include/type/limits.h	/^namespace bustub {$/;"	n
bustub	include/type/numeric_type.h	/^namespace bustub {$/;"	n
bustub	include/type/smallint_type.h	/^namespace bustub {$/;"	n
bustub	include/type/timestamp_type.h	/^namespace bustub {$/;"	n
bustub	include/type/tinyint_type.h	/^namespace bustub {$/;"	n
bustub	include/type/type.h	/^namespace bustub {$/;"	n
bustub	include/type/type_id.h	/^namespace bustub {$/;"	n
bustub	include/type/type_util.h	/^namespace bustub {$/;"	n
bustub	include/type/value.h	/^namespace bustub {$/;"	n
bustub	include/type/value_factory.h	/^namespace bustub {$/;"	n
bustub	include/type/varlen_type.h	/^namespace bustub {$/;"	n
bustub	include/type/vector_type.h	/^namespace bustub {$/;"	n
bustub	optimizer/column_pruning.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/eliminate_true_filter.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/merge_filter_nlj.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/merge_filter_scan.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/merge_projection.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/nlj_as_hash_join.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/nlj_as_index_join.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/optimizer.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/optimizer_custom_rules.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/optimizer_internal.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/order_by_index_scan.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/seqscan_as_indexscan.cpp	/^namespace bustub {$/;"	n	file:
bustub	optimizer/sort_limit_as_topn.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/expression_factory.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_aggregation.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_expression.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_func_call.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_insert.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_select.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_table_ref.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/plan_window_function.cpp	/^namespace bustub {$/;"	n	file:
bustub	planner/planner.cpp	/^namespace bustub {$/;"	n	file:
bustub	primer/hyperloglog.cpp	/^namespace bustub {$/;"	n	file:
bustub	primer/hyperloglog_presto.cpp	/^namespace bustub {$/;"	n	file:
bustub	primer/orset.cpp	/^namespace bustub {$/;"	n	file:
bustub	primer/orset_driver.cpp	/^namespace bustub {$/;"	n	file:
bustub	primer/trie.cpp	/^namespace bustub {$/;"	n	file:
bustub	primer/trie_store.cpp	/^namespace bustub {$/;"	n	file:
bustub	recovery/checkpoint_manager.cpp	/^namespace bustub {$/;"	n	file:
bustub	recovery/log_manager.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/disk/disk_manager.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/disk/disk_manager_memory.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/disk/disk_scheduler.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/index/b_plus_tree.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/index/b_plus_tree_index.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/index/extendible_hash_table_index.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/index/index_iterator.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/index/linear_probe_hash_table_index.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/b_plus_tree_internal_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/b_plus_tree_leaf_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/b_plus_tree_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/extendible_htable_bucket_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/extendible_htable_directory_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/extendible_htable_header_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/extendible_htable_page_utils.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/hash_table_block_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/hash_table_bucket_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/hash_table_directory_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/hash_table_header_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/page_guard.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/page/table_page.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/table/table_heap.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/table/table_iterator.cpp	/^namespace bustub {$/;"	n	file:
bustub	storage/table/tuple.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/bigint_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/boolean_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/decimal_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/integer_parent_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/integer_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/smallint_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/timestamp_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/tinyint_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/value.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/varlen_type.cpp	/^namespace bustub {$/;"	n	file:
bustub	type/vector_type.cpp	/^namespace bustub {$/;"	n	file:
callback_	include/storage/disk/disk_scheduler.h	/^  std::promise<bool> callback_;$/;"	m	struct:bustub::DiskRequest
cardinality_	include/primer/hyperloglog.h	/^  size_t cardinality_;$/;"	m	class:bustub::HyperLogLog
cardinality_	include/primer/hyperloglog_presto.h	/^  uint64_t cardinality_;$/;"	m	class:bustub::HyperLogLogPresto
catalog_	include/binder/binder.h	/^  const Catalog &catalog_;$/;"	m	class:bustub::Binder
catalog_	include/common/bustub_instance.h	/^  std::unique_ptr<Catalog> catalog_;$/;"	m	class:bustub::BusTubInstance
catalog_	include/concurrency/transaction_manager.h	/^  Catalog *catalog_;$/;"	m	class:bustub::TransactionManager
catalog_	include/execution/execution_engine.h	/^  [[maybe_unused]] Catalog *catalog_;$/;"	m	class:bustub::ExecutionEngine
catalog_	include/execution/executor_context.h	/^  Catalog *catalog_;$/;"	m	class:bustub::ExecutorContext
catalog_	include/optimizer/optimizer.h	/^  const Catalog &catalog_;$/;"	m	class:bustub::Optimizer
catalog_	include/planner/planner.h	/^  const Catalog &catalog_;$/;"	m	class:bustub::Planner
catalog_lock_	include/common/bustub_instance.h	/^  std::shared_mutex catalog_lock_;$/;"	m	class:bustub::BusTubInstance
category_	include/binder/simplified_token.h	/^  KeywordCategory category_;$/;"	m	struct:bustub::ParserKeyword
check_options_	include/execution/executor_context.h	/^  std::shared_ptr<CheckOptions> check_options_;$/;"	m	class:bustub::ExecutorContext
check_options_set_	include/execution/check_options.h	/^  std::unordered_set<CheckOption> check_options_set_;$/;"	m	class:bustub::CheckOptions
checkpoint_manager_	include/common/bustub_instance.h	/^  std::unique_ptr<CheckpointManager> checkpoint_manager_;$/;"	m	class:bustub::BusTubInstance
child_	include/binder/expressions/bound_alias.h	/^  std::unique_ptr<BoundExpression> child_;$/;"	m	class:bustub::BoundAlias
child_executor_	include/execution/executors/aggregation_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::AggregationExecutor
child_executor_	include/execution/executors/delete_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::DeleteExecutor
child_executor_	include/execution/executors/external_merge_sort_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::ExternalMergeSortExecutor
child_executor_	include/execution/executors/filter_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::FilterExecutor
child_executor_	include/execution/executors/init_check_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::InitCheckExecutor
child_executor_	include/execution/executors/insert_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::InsertExecutor
child_executor_	include/execution/executors/limit_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::LimitExecutor
child_executor_	include/execution/executors/nested_index_join_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::NestIndexJoinExecutor
child_executor_	include/execution/executors/projection_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::ProjectionExecutor
child_executor_	include/execution/executors/sort_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::SortExecutor
child_executor_	include/execution/executors/topn_check_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::TopNCheckExecutor
child_executor_	include/execution/executors/topn_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::TopNExecutor
child_executor_	include/execution/executors/topn_per_group_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::TopNPerGroupExecutor
child_executor_	include/execution/executors/update_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::UpdateExecutor
child_executor_	include/execution/executors/window_function_executor.h	/^  std::unique_ptr<AbstractExecutor> child_executor_;$/;"	m	class:bustub::WindowFunctionExecutor
children_	include/execution/expressions/abstract_expression.h	/^  std::vector<AbstractExpressionRef> children_;$/;"	m	class:bustub::AbstractExpression
children_	include/execution/plans/abstract_plan.h	/^  std::vector<AbstractPlanNodeRef> children_;$/;"	m	class:bustub::AbstractPlanNode
children_	include/primer/trie.h	/^  std::map<char, std::shared_ptr<const TrieNode>> children_;$/;"	m	class:bustub::TrieNode
children_	include/storage/index/b_plus_tree.h	/^  std::vector<PrintableBPlusTree> children_;$/;"	m	struct:bustub::PrintableBPlusTree
cmp_	include/container/disk/hash/disk_extendible_hash_table.h	/^  KC cmp_;$/;"	m	class:bustub::DiskExtendibleHashTable
cmp_	include/execution/executors/external_merge_sort_executor.h	/^  TupleComparator cmp_;$/;"	m	class:bustub::ExternalMergeSortExecutor
cmp_	include/storage/index/stl_comparator_wrapper.h	/^  KeyComparator cmp_;$/;"	m	class:bustub::StlComparatorWrapper
cmp_	include/storage/index/stl_equal_wrapper.h	/^  KC cmp_;$/;"	m	class:bustub::StlEqualWrapper
col_idx_	include/execution/expressions/column_value_expression.h	/^  uint32_t col_idx_;$/;"	m	class:bustub::ColumnValueExpression
col_meta_	include/catalog/table_generator.h	/^    std::vector<ColumnInsertMeta> col_meta_;$/;"	m	struct:bustub::TableGenerator::TableInsertMeta
col_name_	include/binder/expressions/bound_column_ref.h	/^  std::vector<std::string> col_name_;$/;"	m	class:bustub::BoundColumnRef
col_options_	include/binder/statement/index_statement.h	/^  std::vector<std::string> col_options_;$/;"	m	class:bustub::IndexStatement
cols_	include/binder/statement/index_statement.h	/^  std::vector<std::unique_ptr<BoundColumnRef>> cols_;$/;"	m	class:bustub::IndexStatement
column_name_	include/catalog/column.h	/^  std::string column_name_;$/;"	m	class:bustub::Column
column_type_	include/catalog/column.h	/^  TypeId column_type_;$/;"	m	class:bustub::Column
columns_	include/binder/statement/create_statement.h	/^  std::vector<Column> columns_;$/;"	m	class:bustub::CreateStatement
columns_	include/catalog/schema.h	/^  std::vector<Column> columns_;$/;"	m	class:bustub::Schema
columns_	include/execution/plans/window_plan.h	/^  std::vector<AbstractExpressionRef> columns_;$/;"	m	class:bustub::WindowFunctionPlanNode
commit_mutex_	include/concurrency/transaction_manager.h	/^  std::mutex commit_mutex_;$/;"	m	class:bustub::TransactionManager
commit_ts_	include/concurrency/watermark.h	/^  timestamp_t commit_ts_;$/;"	m	class:bustub::Watermark
comp_type_	include/execution/expressions/comparison_expression.h	/^  ComparisonType comp_type_;$/;"	m	class:bustub::ComparisonExpression
comparator_	include/container/disk/hash/linear_probe_hash_table.h	/^  KeyComparator comparator_;$/;"	m	class:bustub::LinearProbeHashTable
comparator_	include/storage/index/b_plus_tree.h	/^  KeyComparator comparator_;$/;"	m	class:bustub::BPlusTree
comparator_	include/storage/index/b_plus_tree_index.h	/^  KeyComparator comparator_;$/;"	m	class:bustub::BPlusTreeIndex
comparator_	include/storage/index/extendible_hash_table_index.h	/^  KeyComparator comparator_;$/;"	m	class:bustub::ExtendibleHashTableIndex
comparator_	include/storage/index/linear_probe_hash_table_index.h	/^  KeyComparator comparator_;$/;"	m	class:bustub::LinearProbeHashTableIndex
comparator_	include/storage/index/stl_ordered.h	/^  StlComparatorWrapper<KT, Cmp> comparator_;$/;"	m	class:bustub::STLOrderedIndex
comparator_	include/storage/index/stl_unordered.h	/^  StlComparatorWrapper<KT, Cmp> comparator_;$/;"	m	class:bustub::STLUnorderedIndex
compute_type_	include/execution/expressions/arithmetic_expression.h	/^  ArithmeticType compute_type_;$/;"	m	class:bustub::ArithmeticExpression
condition_	include/binder/table_ref/bound_join_ref.h	/^  std::unique_ptr<BoundExpression> condition_;$/;"	m	class:bustub::JoinType::BoundJoinRef
const_varlen_	include/type/value.h	/^    const char *const_varlen_;$/;"	m	union:bustub::Value::Val
container_	include/storage/index/b_plus_tree_index.h	/^  std::shared_ptr<BPlusTree<KeyType, ValueType, KeyComparator>> container_;$/;"	m	class:bustub::BPlusTreeIndex
container_	include/storage/index/extendible_hash_table_index.h	/^  DiskExtendibleHashTable<KeyType, ValueType, KeyComparator> container_;$/;"	m	class:bustub::ExtendibleHashTableIndex
container_	include/storage/index/linear_probe_hash_table_index.h	/^  LinearProbeHashTable<KeyType, ValueType, KeyComparator> container_;$/;"	m	class:bustub::LinearProbeHashTableIndex
context_insert_mutex_	include/storage/index/b_plus_tree.h	/^  std::mutex context_insert_mutex_;$/;"	m	class:bustub::BPlusTree
course_on_date	execution/mock_scan_executor.cpp	/^static const char *course_on_date[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};$/;"	m	namespace:bustub	file:
cte_name_	include/binder/table_ref/bound_cte_ref.h	/^  std::string cte_name_;$/;"	m	class:bustub::BoundCTERef
cte_scope_ptr_	include/binder/binder.h	/^    const CTEList **cte_scope_ptr_;$/;"	m	class:bustub::Binder::ContextGuard
ctes_	include/binder/statement/select_statement.h	/^  CTEList ctes_;$/;"	m	class:bustub::SelectStatement
ctx_	include/planner/planner.h	/^  PlannerContext ctx_;$/;"	m	class:bustub::Planner
ctx_ptr_	include/planner/planner.h	/^    PlannerContext *ctx_ptr_;$/;"	m	class:bustub::Planner::ContextGuard
current_iterator_	include/execution/executors/external_merge_sort_executor.h	/^  MergeSortRun::Iterator current_iterator_;$/;"	m	class:bustub::ExternalMergeSortExecutor
current_reads_	include/concurrency/watermark.h	/^  std::unordered_map<timestamp_t, int> current_reads_;$/;"	m	class:bustub::Watermark
cv_	include/common/channel.h	/^  std::condition_variable cv_;$/;"	m	class:bustub::Channel
cv_	include/concurrency/lock_manager.h	/^    std::condition_variable cv_;$/;"	m	class:bustub::LockManager::LockRequestQueue
cv_	include/recovery/log_manager.h	/^  std::condition_variable cv_;$/;"	m	class:bustub::LogManager
cycle_detection_interval	common/config.cpp	/^std::chrono::milliseconds cycle_detection_interval = std::chrono::milliseconds(50);$/;"	m	namespace:bustub	file:
cycle_detection_thread_	include/concurrency/lock_manager.h	/^  std::thread *cycle_detection_thread_;$/;"	m	class:bustub::LockManager
data_	include/buffer/buffer_pool_manager.h	/^  std::vector<char> data_;$/;"	m	class:bustub::FrameHeader
data_	include/storage/disk/disk_manager_memory.h	/^  std::vector<std::shared_ptr<ProtectedPage>> data_;$/;"	m	class:bustub::DiskManagerUnlimitedMemory
data_	include/storage/disk/disk_scheduler.h	/^  char *data_;$/;"	m	struct:bustub::DiskRequest
data_	include/storage/index/generic_key.h	/^  char data_[KeySize];$/;"	m	class:bustub::GenericKey
data_	include/storage/index/stl_ordered.h	/^  std::map<KT, VT, StlComparatorWrapper<KT, Cmp>> data_;$/;"	m	class:bustub::STLOrderedIndex
data_	include/storage/index/stl_unordered.h	/^  std::unordered_map<KT, VT, StlHasherWrapper<KT>, StlEqualWrapper<KT, Cmp>> data_;$/;"	m	class:bustub::STLUnorderedIndex
data_	include/storage/page/page.h	/^  std::vector<char> data_;$/;"	m	class:bustub::Page
data_	include/storage/table/tuple.h	/^  std::vector<char> data_;$/;"	m	class:bustub::Tuple
db_io_	include/storage/disk/disk_manager.h	/^  std::fstream db_io_;$/;"	m	class:bustub::DiskManager
db_io_latch_	include/storage/disk/disk_manager.h	/^  std::mutex db_io_latch_;$/;"	m	class:bustub::DiskManager
decimal_	include/type/value.h	/^    double decimal_;$/;"	m	union:bustub::Value::Val
delete_rid_	include/recovery/log_record.h	/^  RID delete_rid_;$/;"	m	class:bustub::LogRecord
delete_tuple_	include/recovery/log_record.h	/^  Tuple delete_tuple_;$/;"	m	class:bustub::LogRecord
dense_bucket_	include/primer/hyperloglog_presto.h	/^  std::vector<std::bitset<DENSE_BUCKET_SIZE>> dense_bucket_;$/;"	m	class:bustub::HyperLogLogPresto
directory_max_depth_	include/container/disk/hash/disk_extendible_hash_table.h	/^  uint32_t directory_max_depth_;$/;"	m	class:bustub::DiskExtendibleHashTable
directory_page_ids_	include/storage/page/extendible_htable_header_page.h	/^  page_id_t directory_page_ids_[HTABLE_HEADER_ARRAY_SIZE];$/;"	m	class:bustub::ExtendibleHTableHeaderPage
disable_header_	include/common/bustub_instance.h	/^  bool disable_header_;$/;"	m	class:bustub::SimpleStreamWriter
disk_manager_	include/common/bustub_instance.h	/^  std::unique_ptr<DiskManager> disk_manager_;$/;"	m	class:bustub::BusTubInstance
disk_manager_	include/recovery/log_manager.h	/^  DiskManager *disk_manager_ __attribute__((__unused__));$/;"	m	class:bustub::LogManager
disk_manager_	include/recovery/log_recovery.h	/^  DiskManager *disk_manager_ __attribute__((__unused__));$/;"	m	class:bustub::LogRecovery
disk_manager_	include/storage/disk/disk_scheduler.h	/^  DiskManager *disk_manager_ __attribute__((__unused__));$/;"	m	class:bustub::DiskScheduler
disk_scheduler_	include/buffer/buffer_pool_manager.h	/^  std::unique_ptr<DiskScheduler> disk_scheduler_;$/;"	m	class:bustub::BufferPoolManager
disk_scheduler_	include/storage/page/page_guard.h	/^  DiskScheduler *disk_scheduler_;$/;"	m	class:bustub::WritePageGuard
dist_	include/catalog/table_generator.h	/^    Dist dist_;$/;"	m	struct:bustub::TableGenerator::ColumnInsertMeta
driver_	include/primer/orset_driver.h	/^  ORSetDriver<T> *driver_;$/;"	m	class:bustub::ORSetNode
duckdb_libpgquery	include/binder/binder.h	/^namespace duckdb_libpgquery {$/;"	n
duckdb_libpgquery	include/binder/statement/create_statement.h	/^namespace duckdb_libpgquery {$/;"	n
dummy_schema_	include/execution/executors/values_executor.h	/^  const Schema dummy_schema_;$/;"	m	class:bustub::ValuesExecutor
elem_type_id_	include/type/value.h	/^    TypeId elem_type_id_;$/;"	m	union:bustub::Value::__anon2
enable_cycle_detection_	include/concurrency/lock_manager.h	/^  std::atomic<bool> enable_cycle_detection_;$/;"	m	class:bustub::LockManager
end_	include/binder/expressions/bound_window.h	/^  WindowBoundary end_ = WindowBoundary::INVALID;$/;"	m	class:bustub::WindowBoundary::BoundWindow
end_iterator_	include/execution/executors/external_merge_sort_executor.h	/^  MergeSortRun::Iterator end_iterator_;$/;"	m	class:bustub::ExternalMergeSortExecutor
end_offset_	include/binder/expressions/bound_window.h	/^  std::optional<std::unique_ptr<BoundExpression>> end_offset_;$/;"	m	class:bustub::WindowBoundary::BoundWindow
eq_	include/storage/index/stl_unordered.h	/^  StlEqualWrapper<KT, Cmp> eq_;$/;"	m	class:bustub::STLUnorderedIndex
exec_ctx_	include/catalog/table_generator.h	/^  ExecutorContext *exec_ctx_;$/;"	m	class:bustub::TableGenerator
exec_ctx_	include/execution/executors/abstract_executor.h	/^  ExecutorContext *exec_ctx_;$/;"	m	class:bustub::AbstractExecutor
execution_engine_	include/common/bustub_instance.h	/^  std::unique_ptr<ExecutionEngine> execution_engine_;$/;"	m	class:bustub::BusTubInstance
expr_	include/binder/bound_order_by.h	/^  std::unique_ptr<BoundExpression> expr_;$/;"	m	class:bustub::BoundOrderBy
expr_	include/binder/statement/delete_statement.h	/^  std::unique_ptr<BoundExpression> expr_;$/;"	m	class:bustub::DeleteStatement
expr_in_agg_	include/planner/planner.h	/^  std::vector<AbstractExpressionRef> expr_in_agg_;$/;"	m	class:bustub::PlannerContext
expr_type_	include/execution/expressions/string_expression.h	/^  StringExecExpressionType expr_type_;$/;"	m	class:bustub::StringExpression
expressions_	include/execution/plans/projection_plan.h	/^  std::vector<AbstractExpressionRef> expressions_;$/;"	m	class:bustub::ProjectionPlanNode
file_name_	include/storage/disk/disk_manager.h	/^  std::filesystem::path file_name_;$/;"	m	class:bustub::DiskManager
filter_expr_	include/binder/statement/update_statement.h	/^  std::unique_ptr<BoundExpression> filter_expr_;$/;"	m	class:bustub::UpdateStatement
filter_predicate_	include/execution/plans/index_scan_plan.h	/^  AbstractExpressionRef filter_predicate_;$/;"	m	class:bustub::IndexScanPlanNode
filter_predicate_	include/execution/plans/seq_scan_plan.h	/^  AbstractExpressionRef filter_predicate_;$/;"	m	class:bustub::SeqScanPlanNode
flush_buffer_	include/recovery/log_manager.h	/^  char *flush_buffer_;$/;"	m	class:bustub::LogManager
flush_thread_	include/recovery/log_manager.h	/^  std::thread *flush_thread_ __attribute__((__unused__));$/;"	m	class:bustub::LogManager
force_starter_rule_	include/optimizer/optimizer.h	/^  const bool force_starter_rule_;$/;"	m	class:bustub::Optimizer
format	include/binder/bound_expression.h	/^  auto format(bustub::ExpressionType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/binder/bound_expression.h	/^  auto format(const T &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/binder/bound_expression.h	/^  auto format(const std::unique_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/binder/bound_order_by.h	/^  auto format(bustub::OrderByType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/binder/bound_order_by.h	/^  auto format(const bustub::BoundOrderBy &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/binder/bound_order_by.h	/^  auto format(const std::unique_ptr<bustub::BoundOrderBy> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/binder/bound_table_ref.h	/^  auto format(bustub::TableReferenceType c, FormatContext &ctx) const {$/;"	f	struct:bustub::fmt::formatter
format	include/binder/bound_table_ref.h	/^  auto format(const T &x, FormatCtx &ctx) const {$/;"	f	struct:bustub::fmt::formatter
format	include/binder/bound_table_ref.h	/^  auto format(const std::unique_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:bustub::fmt::formatter
format	include/binder/table_ref/bound_join_ref.h	/^  auto format(bustub::JoinType c, FormatContext &ctx) const {$/;"	f	struct:bustub::fmt::formatter
format	include/catalog/catalog.h	/^  auto format(bustub::IndexType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/catalog/column.h	/^  auto format(const bustub::Column &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/catalog/column.h	/^  auto format(const std::unique_ptr<bustub::Column> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/catalog/schema.h	/^  auto format(const bustub::Schema &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/catalog/schema.h	/^  auto format(const std::shared_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/catalog/schema.h	/^  auto format(const std::unique_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/common/enums/statement_type.h	/^  auto format(bustub::StatementType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/concurrency/lock_manager.h	/^  auto format(bustub::LockManager::LockMode x, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/concurrency/transaction.h	/^  auto format(bustub::IsolationLevel x, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/concurrency/transaction.h	/^  auto format(bustub::TransactionState x, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/abstract_expression.h	/^  auto format(const T &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/abstract_expression.h	/^  auto format(const std::shared_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/abstract_expression.h	/^  auto format(const std::unique_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/arithmetic_expression.h	/^  auto format(bustub::ArithmeticType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/comparison_expression.h	/^  auto format(bustub::ComparisonType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/logic_expression.h	/^  auto format(bustub::LogicType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/expressions/string_expression.h	/^  auto format(bustub::StringExecExpressionType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/plans/abstract_plan.h	/^  auto format(const T &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/plans/abstract_plan.h	/^  auto format(const std::unique_ptr<T> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/plans/aggregation_plan.h	/^  auto format(bustub::AggregationType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/plans/window_plan.h	/^  auto format(bustub::WindowFunctionType c, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/execution/plans/window_plan.h	/^  auto format(const bustub::WindowFunctionPlanNode::WindowFunction &x, FormatContext &ctx) const {$/;"	f	struct:fmt::formatter
format	include/type/value.h	/^  auto format(const bustub::Value &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
format	include/type/value.h	/^  auto format(const std::unique_ptr<bustub::Value> &x, FormatCtx &ctx) const {$/;"	f	struct:fmt::formatter
formatter	include/binder/bound_expression.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::BoundExpression, T>::value, char>>$/;"	s	class:fmt
formatter	include/binder/bound_expression.h	/^struct fmt::formatter<bustub::ExpressionType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/binder/bound_expression.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::BoundExpression, T>::value, char>>$/;"	s	class:fmt
formatter	include/binder/bound_order_by.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::BoundOrderBy, T>::value, char>>$/;"	s	class:fmt
formatter	include/binder/bound_order_by.h	/^struct fmt::formatter<bustub::OrderByType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/binder/bound_order_by.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::BoundOrderBy, T>::value, char>>$/;"	s	class:fmt
formatter	include/binder/bound_table_ref.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::BoundTableRef, T>::value, char>>$/;"	s	class:bustub::fmt
formatter	include/binder/bound_table_ref.h	/^struct fmt::formatter<bustub::TableReferenceType> : formatter<string_view> {$/;"	s	class:bustub::fmt
formatter	include/binder/bound_table_ref.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::BoundTableRef, T>::value, char>>$/;"	s	class:bustub::fmt
formatter	include/binder/table_ref/bound_join_ref.h	/^struct fmt::formatter<bustub::JoinType> : formatter<string_view> {$/;"	s	class:bustub::fmt
formatter	include/catalog/catalog.h	/^struct fmt::formatter<bustub::IndexType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/catalog/column.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::Column, T>::value, char>>$/;"	s	class:fmt
formatter	include/catalog/column.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::Column, T>::value, char>>$/;"	s	class:fmt
formatter	include/catalog/schema.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::Schema, T>::value, char>>$/;"	s	class:fmt
formatter	include/catalog/schema.h	/^struct fmt::formatter<std::shared_ptr<T>, std::enable_if_t<std::is_base_of<bustub::Schema, T>::value, char>>$/;"	s	class:fmt
formatter	include/catalog/schema.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::Schema, T>::value, char>>$/;"	s	class:fmt
formatter	include/common/enums/statement_type.h	/^struct fmt::formatter<bustub::StatementType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/concurrency/lock_manager.h	/^struct fmt::formatter<bustub::LockManager::LockMode> : formatter<std::string_view> {$/;"	s	class:fmt
formatter	include/concurrency/transaction.h	/^struct fmt::formatter<bustub::IsolationLevel> : formatter<std::string_view> {$/;"	s	class:fmt
formatter	include/concurrency/transaction.h	/^struct fmt::formatter<bustub::TransactionState> : formatter<std::string_view> {$/;"	s	class:fmt
formatter	include/execution/expressions/abstract_expression.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::AbstractExpression, T>::value, char>>$/;"	s	class:fmt
formatter	include/execution/expressions/abstract_expression.h	/^struct fmt::formatter<std::shared_ptr<T>, std::enable_if_t<std::is_base_of<bustub::AbstractExpression, T>::value, char>>$/;"	s	class:fmt
formatter	include/execution/expressions/abstract_expression.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::AbstractExpression, T>::value, char>>$/;"	s	class:fmt
formatter	include/execution/expressions/arithmetic_expression.h	/^struct fmt::formatter<bustub::ArithmeticType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/execution/expressions/comparison_expression.h	/^struct fmt::formatter<bustub::ComparisonType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/execution/expressions/logic_expression.h	/^struct fmt::formatter<bustub::LogicType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/execution/expressions/string_expression.h	/^struct fmt::formatter<bustub::StringExecExpressionType> : formatter<string_view> {$/;"	s	class:fmt
formatter	include/execution/plans/abstract_plan.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::AbstractPlanNode, T>::value, char>>$/;"	s	class:fmt
formatter	include/execution/plans/abstract_plan.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::AbstractPlanNode, T>::value, char>>$/;"	s	class:fmt
formatter	include/execution/plans/aggregation_plan.h	/^struct fmt::formatter<bustub::AggregationType> : formatter<std::string> {$/;"	s	class:fmt
formatter	include/execution/plans/window_plan.h	/^struct fmt::formatter<bustub::WindowFunctionPlanNode::WindowFunction> : formatter<std::string> {$/;"	s	class:fmt
formatter	include/execution/plans/window_plan.h	/^struct fmt::formatter<bustub::WindowFunctionType> : formatter<std::string> {$/;"	s	class:fmt
formatter	include/type/value.h	/^struct fmt::formatter<T, std::enable_if_t<std::is_base_of<bustub::Value, T>::value, char>>$/;"	s	class:fmt
formatter	include/type/value.h	/^struct fmt::formatter<std::unique_ptr<T>, std::enable_if_t<std::is_base_of<bustub::Value, T>::value, char>>$/;"	s	class:fmt
frame_	include/storage/page/page_guard.h	/^  std::shared_ptr<FrameHeader> frame_;$/;"	m	class:bustub::ReadPageGuard
frame_	include/storage/page/page_guard.h	/^  std::shared_ptr<FrameHeader> frame_;$/;"	m	class:bustub::WritePageGuard
frame_id_	include/buffer/buffer_pool_manager.h	/^  const frame_id_t frame_id_;$/;"	m	class:bustub::FrameHeader
frames_	include/buffer/buffer_pool_manager.h	/^  std::vector<std::shared_ptr<FrameHeader>> frames_;$/;"	m	class:bustub::BufferPoolManager
free_frames_	include/buffer/buffer_pool_manager.h	/^  std::list<frame_id_t> free_frames_;$/;"	m	class:bustub::BufferPoolManager
func_	include/execution/executors/mock_scan_executor.h	/^  std::function<Tuple(std::size_t)> func_;$/;"	m	class:bustub::MockScanExecutor
func_name_	include/binder/expressions/bound_agg_call.h	/^  std::string func_name_;$/;"	m	class:bustub::BoundAggCall
func_name_	include/binder/expressions/bound_func_call.h	/^  std::string func_name_;$/;"	m	class:bustub::BoundFuncCall
func_name_	include/binder/expressions/bound_window.h	/^  std::string func_name_;$/;"	m	class:bustub::WindowBoundary::BoundWindow
function_	include/execution/plans/window_plan.h	/^    AbstractExpressionRef function_;$/;"	m	struct:bustub::WindowFunctionPlanNode::WindowFunction
global_depth_	include/storage/page/extendible_htable_directory_page.h	/^  uint32_t global_depth_;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
group_by_	include/binder/statement/select_statement.h	/^  std::vector<std::unique_ptr<BoundExpression>> group_by_;$/;"	m	class:bustub::SelectStatement
group_bys_	include/execution/plans/aggregation_plan.h	/^  std::vector<AbstractExpressionRef> group_bys_;$/;"	m	class:bustub::AggregationPlanNode
group_bys_	include/execution/plans/aggregation_plan.h	/^  std::vector<Value> group_bys_;$/;"	m	struct:bustub::AggregateKey
group_bys_	include/execution/plans/topn_per_group_plan.h	/^  std::vector<AbstractExpressionRef> group_bys_;$/;"	m	class:bustub::TopNPerGroupPlanNode
hash	include/common/rid.h	/^struct hash<bustub::RID> {$/;"	s	namespace:std
hash	include/execution/executors/hash_join_executor.h	/^struct hash<bustub::HashJoinKey> {$/;"	s	namespace:std
hash	include/execution/plans/aggregation_plan.h	/^struct hash<bustub::AggregateKey> {$/;"	s	namespace:std
hash_fn_	include/container/disk/hash/disk_extendible_hash_table.h	/^  HashFunction<K> hash_fn_;$/;"	m	class:bustub::DiskExtendibleHashTable
hash_fn_	include/container/disk/hash/linear_probe_hash_table.h	/^  HashFunction<KeyType> hash_fn_;$/;"	m	class:bustub::LinearProbeHashTable
hash_fn_	include/storage/index/stl_hasher_wrapper.h	/^  HashFunction<K> hash_fn_;$/;"	m	class:bustub::StlHasherWrapper
hash_fn_	include/storage/index/stl_unordered.h	/^  StlHasherWrapper<KT> hash_fn_;$/;"	m	class:bustub::STLUnorderedIndex
hash_keys_	include/execution/executors/hash_join_executor.h	/^  std::vector<Value> hash_keys_;$/;"	m	struct:bustub::HashJoinKey
having_	include/binder/statement/select_statement.h	/^  std::unique_ptr<BoundExpression> having_;$/;"	m	class:bustub::SelectStatement
header_max_depth_	include/container/disk/hash/disk_extendible_hash_table.h	/^  uint32_t header_max_depth_;$/;"	m	class:bustub::DiskExtendibleHashTable
header_page_id_	include/container/disk/hash/disk_extendible_hash_table.h	/^  page_id_t header_page_id_;$/;"	m	class:bustub::DiskExtendibleHashTable
header_page_id_	include/container/disk/hash/linear_probe_hash_table.h	/^  page_id_t header_page_id_;$/;"	m	class:bustub::LinearProbeHashTable
header_page_id_	include/storage/index/b_plus_tree.h	/^  page_id_t header_page_id_;$/;"	m	class:bustub::BPlusTree
history_	include/buffer/lru_k_replacer.h	/^  std::list<size_t> history_;         \/\/ history timestamp$/;"	m	class:bustub::LRUKNode
ht_	include/execution/executors/aggregation_executor.h	/^  SimpleAggregationHashTable ht_;$/;"	m	class:bustub::AggregationExecutor
ht_iterator_	include/execution/executors/aggregation_executor.h	/^  SimpleAggregationHashTable::Iterator ht_iterator_;$/;"	m	class:bustub::AggregationExecutor
identifier_	include/binder/table_ref/bound_expression_list_ref.h	/^  std::string identifier_;$/;"	m	class:bustub::BoundExpressionListRef
index_	include/catalog/catalog.h	/^  std::unique_ptr<Index> index_;$/;"	m	struct:bustub::IndexInfo
index_	include/storage/index/index_iterator.h	/^  int index_;$/;"	m	class:bustub::IndexIterator
index_iter_	include/execution/executors/index_scan_executor.h	/^  BPlusTreeIndexIteratorForTwoIntegerColumn index_iter_;$/;"	m	class:bustub::IndexScanExecutor
index_name_	include/binder/statement/index_statement.h	/^  std::string index_name_;$/;"	m	class:bustub::IndexStatement
index_name_	include/container/disk/hash/disk_extendible_hash_table.h	/^  std::string index_name_;$/;"	m	class:bustub::DiskExtendibleHashTable
index_name_	include/execution/plans/nested_index_join_plan.h	/^  const std::string index_name_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
index_name_	include/storage/index/b_plus_tree.h	/^  std::string index_name_;$/;"	m	class:bustub::BPlusTree
index_names_	include/catalog/catalog.h	/^  std::unordered_map<std::string, std::unordered_map<std::string, index_oid_t>> index_names_;$/;"	m	class:bustub::Catalog
index_oid_	include/catalog/catalog.h	/^  index_oid_t index_oid_;$/;"	m	struct:bustub::IndexInfo
index_oid_	include/execution/plans/index_scan_plan.h	/^  index_oid_t index_oid_;$/;"	m	class:bustub::IndexScanPlanNode
index_oid_	include/execution/plans/nested_index_join_plan.h	/^  index_oid_t index_oid_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
index_table_name_	include/execution/plans/nested_index_join_plan.h	/^  const std::string index_table_name_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
index_type_	include/binder/statement/index_statement.h	/^  std::string index_type_;$/;"	m	class:bustub::IndexStatement
index_type_	include/catalog/catalog.h	/^        index_type_(index_type) {}$/;"	f	struct:bustub::IndexInfo
index_type_	include/catalog/catalog.h	/^  IndexType index_type_;$/;"	m	struct:bustub::IndexInfo
indexes_	include/catalog/catalog.h	/^  std::unordered_map<index_oid_t, std::shared_ptr<IndexInfo>> indexes_;$/;"	m	class:bustub::Catalog
inner_table_oid_	include/execution/plans/nested_index_join_plan.h	/^  table_oid_t inner_table_oid_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
inner_table_schema_	include/execution/plans/nested_index_join_plan.h	/^  SchemaRef inner_table_schema_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
insert_rid_	include/recovery/log_record.h	/^  RID insert_rid_;$/;"	m	class:bustub::LogRecord
insert_tuple_	include/recovery/log_record.h	/^  Tuple insert_tuple_;$/;"	m	class:bustub::LogRecord
integer_	include/type/value.h	/^    int32_t integer_;$/;"	m	union:bustub::Value::Val
internal_max_size_	include/storage/index/b_plus_tree.h	/^  int internal_max_size_;$/;"	m	class:bustub::BPlusTree
is_delete_	include/execution/executor_context.h	/^        is_delete_(is_delete) {$/;"	f	class:bustub::ExecutorContext
is_delete_	include/execution/executor_context.h	/^  bool is_delete_;$/;"	m	class:bustub::ExecutorContext
is_deleted_	include/concurrency/transaction.h	/^  bool is_deleted_;$/;"	m	struct:bustub::UndoLog
is_deleted_	include/storage/table/tuple.h	/^  bool is_deleted_;$/;"	m	struct:bustub::TupleMeta
is_dirty_	include/buffer/buffer_pool_manager.h	/^  bool is_dirty_;$/;"	m	class:bustub::FrameHeader
is_dirty_	include/storage/page/page.h	/^  std::atomic<bool> is_dirty_;$/;"	m	class:bustub::Page
is_distinct_	include/binder/expressions/bound_agg_call.h	/^  bool is_distinct_;$/;"	m	class:bustub::BoundAggCall
is_distinct_	include/binder/statement/select_statement.h	/^  bool is_distinct_;$/;"	m	class:bustub::SelectStatement
is_primary_key_	include/catalog/catalog.h	/^  bool is_primary_key_;$/;"	m	struct:bustub::IndexInfo
is_primary_key_	include/storage/index/index.h	/^  bool is_primary_key_;$/;"	m	class:bustub::IndexMetadata
is_write_	include/storage/disk/disk_scheduler.h	/^  bool is_write_;$/;"	m	struct:bustub::DiskRequest
isolation_level_	include/concurrency/transaction.h	/^  const IsolationLevel isolation_level_;$/;"	m	class:bustub::Transaction
iter_	include/execution/executors/aggregation_executor.h	/^    std::unordered_map<AggregateKey, AggregateValue>::const_iterator iter_;$/;"	m	class:bustub::SimpleAggregationHashTable::Iterator
iter_	include/execution/executors/hash_join_executor.h	/^    std::unordered_map<HashJoinKey, std::vector<Tuple>>::const_iterator iter_;$/;"	m	class:bustub::SimpleHashJoinHashTable::Iterator
iter_	include/execution/executors/seq_scan_executor.h	/^  std::unique_ptr<TableIterator> iter_;$/;"	m	class:bustub::SeqScanExecutor
iter_	include/storage/index/stl_ordered.h	/^  typename std::map<KT, VT, StlComparatorWrapper<KT, Cmp>>::const_iterator iter_;$/;"	m	class:bustub::STLOrderedIndexIterator
jht_	include/execution/executors/hash_join_executor.h	/^  std::unique_ptr<SimpleHashJoinHashTable> jht_;$/;"	m	class:bustub::HashJoinExecutor
join_type_	include/binder/table_ref/bound_join_ref.h	/^  JoinType join_type_;$/;"	m	class:bustub::JoinType::BoundJoinRef
join_type_	include/execution/plans/hash_join_plan.h	/^  JoinType join_type_;$/;"	m	class:bustub::HashJoinPlanNode
join_type_	include/execution/plans/nested_index_join_plan.h	/^  JoinType join_type_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
join_type_	include/execution/plans/nested_loop_join_plan.h	/^  JoinType join_type_;$/;"	m	class:bustub::NestedLoopJoinPlanNode
k_	include/buffer/lru_k_replacer.h	/^  size_t k_;$/;"	m	class:bustub::LRUKReplacer
k_types	include/type/type.h	/^  static Type *k_types[10];$/;"	m	class:bustub::CmpBool::Type
k_types	type/type.cpp	/^Type *Type::k_types[] = {new Type(TypeId::INVALID),$/;"	m	class:bustub::Type	file:
key_array_	include/storage/page/b_plus_tree_internal_page.h	/^  KeyType key_array_[INTERNAL_PAGE_SLOT_CNT];$/;"	m	class:bustub::BPlusTreeInternalPage
key_array_	include/storage/page/b_plus_tree_leaf_page.h	/^  KeyType key_array_[LEAF_PAGE_SLOT_CNT];$/;"	m	class:bustub::BPlusTreeLeafPage
key_attrs_	include/storage/index/index.h	/^  const std::vector<uint32_t> key_attrs_;$/;"	m	class:bustub::IndexMetadata
key_predicate_	include/execution/plans/nested_index_join_plan.h	/^  AbstractExpressionRef key_predicate_;$/;"	m	class:bustub::NestedIndexJoinPlanNode
key_schema_	include/catalog/catalog.h	/^  Schema key_schema_;$/;"	m	struct:bustub::IndexInfo
key_schema_	include/storage/index/generic_key.h	/^  Schema *key_schema_;$/;"	m	class:bustub::GenericComparator
key_schema_	include/storage/index/index.h	/^  std::shared_ptr<Schema> key_schema_;$/;"	m	class:bustub::IndexMetadata
key_size_	include/catalog/catalog.h	/^  const size_t key_size_;$/;"	m	struct:bustub::IndexInfo
keys_	include/storage/index/b_plus_tree.h	/^  std::string keys_;$/;"	m	struct:bustub::PrintableBPlusTree
larg_	include/binder/expressions/bound_binary_op.h	/^  std::unique_ptr<BoundExpression> larg_;$/;"	m	class:bustub::BoundBinaryOp
last_read_version_	include/primer/orset_driver.h	/^  std::vector<uint32_t> last_read_version_;$/;"	m	class:bustub::ORSetNode
latch_	include/buffer/lru_k_replacer.h	/^  std::mutex latch_;$/;"	m	class:bustub::LRUKReplacer
latch_	include/concurrency/lock_manager.h	/^    std::mutex latch_;$/;"	m	class:bustub::LockManager::LockRequestQueue
latch_	include/concurrency/transaction.h	/^  std::mutex latch_;$/;"	m	class:bustub::Transaction
latch_	include/recovery/log_manager.h	/^  std::mutex latch_;$/;"	m	class:bustub::LogManager
latch_	include/storage/table/table_heap.h	/^  std::mutex latch_;$/;"	m	class:bustub::TableHeap
latency_processor_mutex_	include/storage/disk/disk_manager_memory.h	/^  std::mutex latency_processor_mutex_;$/;"	m	class:bustub::DiskManagerUnlimitedMemory
leaf_max_size_	include/storage/index/b_plus_tree.h	/^  int leaf_max_size_;$/;"	m	class:bustub::BPlusTree
leaf_page_guard_	include/storage/index/index_iterator.h	/^  std::optional<ReadPageGuard> leaf_page_guard_;$/;"	m	class:bustub::IndexIterator
left_	include/binder/table_ref/bound_cross_product_ref.h	/^  std::unique_ptr<BoundTableRef> left_;$/;"	m	class:bustub::BoundCrossProductRef
left_	include/binder/table_ref/bound_join_ref.h	/^  std::unique_ptr<BoundTableRef> left_;$/;"	m	class:bustub::JoinType::BoundJoinRef
left_child_executor_	include/execution/executors/hash_join_executor.h	/^  std::unique_ptr<AbstractExecutor> left_child_executor_;$/;"	m	class:bustub::HashJoinExecutor
left_executor_	include/execution/executors/nested_loop_join_executor.h	/^  std::unique_ptr<AbstractExecutor> left_executor_;$/;"	m	class:bustub::NestedLoopJoinExecutor
left_key_expressions_	include/execution/plans/hash_join_plan.h	/^  std::vector<AbstractExpressionRef> left_key_expressions_;$/;"	m	class:bustub::HashJoinPlanNode
left_tuple_	include/execution/executors/nested_loop_join_executor.h	/^  Tuple left_tuple_;$/;"	m	class:bustub::NestedLoopJoinExecutor
len_	include/type/value.h	/^    uint32_t len_;$/;"	m	union:bustub::Value::__anon2
length_	include/catalog/column.h	/^  uint32_t length_;$/;"	m	class:bustub::Column
length_	include/catalog/schema.h	/^  uint32_t length_;$/;"	m	class:bustub::Schema
limit_	include/execution/plans/limit_plan.h	/^  std::size_t limit_;$/;"	m	class:bustub::LimitPlanNode
limit_count_	include/binder/statement/select_statement.h	/^  std::unique_ptr<BoundExpression> limit_count_;$/;"	m	class:bustub::SelectStatement
limit_offset_	include/binder/statement/select_statement.h	/^  std::unique_ptr<BoundExpression> limit_offset_;$/;"	m	class:bustub::SelectStatement
local_depths_	include/storage/page/extendible_htable_directory_page.h	/^  uint8_t local_depths_[HTABLE_DIRECTORY_ARRAY_SIZE];$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
local_depths_	include/storage/page/hash_table_directory_page.h	/^  uint8_t local_depths_[DIRECTORY_ARRAY_SIZE];$/;"	m	class:bustub::HashTableDirectoryPage
lock_	include/storage/index/stl_ordered.h	/^  std::mutex lock_;$/;"	m	class:bustub::STLOrderedIndex
lock_	include/storage/index/stl_unordered.h	/^  std::mutex lock_;$/;"	m	class:bustub::STLUnorderedIndex
lock_manager_	include/catalog/catalog.h	/^  [[maybe_unused]] LockManager *lock_manager_;$/;"	m	class:bustub::Catalog
lock_manager_	include/common/bustub_instance.h	/^  std::unique_ptr<LockManager> lock_manager_;$/;"	m	class:bustub::BusTubInstance
lock_mgr_	include/execution/executor_context.h	/^  LockManager *lock_mgr_;$/;"	m	class:bustub::ExecutorContext
lock_mode_	include/concurrency/lock_manager.h	/^    LockMode lock_mode_;$/;"	m	class:bustub::LockManager::LockRequest
log	include/storage/index/b_plus_tree.h	/^  std::vector<std::string> log;  \/\/ NOLINT$/;"	m	class:bustub::BPlusTree
log_buffer_	include/recovery/log_manager.h	/^  char *log_buffer_;$/;"	m	class:bustub::LogManager
log_buffer_	include/recovery/log_recovery.h	/^  char *log_buffer_;$/;"	m	class:bustub::LogRecovery
log_io_	include/storage/disk/disk_manager.h	/^  std::fstream log_io_;$/;"	m	class:bustub::DiskManager
log_manager_	include/buffer/buffer_pool_manager.h	/^  LogManager *log_manager_ __attribute__((__unused__));$/;"	m	class:bustub::BufferPoolManager
log_manager_	include/catalog/catalog.h	/^  [[maybe_unused]] LogManager *log_manager_;$/;"	m	class:bustub::Catalog
log_manager_	include/common/bustub_instance.h	/^  std::unique_ptr<LogManager> log_manager_;$/;"	m	class:bustub::BusTubInstance
log_manager_	include/recovery/checkpoint_manager.h	/^  LogManager *log_manager_ __attribute__((__unused__));$/;"	m	class:bustub::CheckpointManager
log_name_	include/storage/disk/disk_manager.h	/^  std::filesystem::path log_name_;$/;"	m	class:bustub::DiskManager
log_timeout	common/config.cpp	/^std::chrono::duration<int64_t> log_timeout = std::chrono::seconds(1);$/;"	m	namespace:bustub	file:
logic_type_	include/execution/expressions/logic_expression.h	/^  LogicType logic_type_;$/;"	m	class:bustub::LogicExpression
lsn_	include/storage/page/hash_table_directory_page.h	/^  lsn_t lsn_;$/;"	m	class:bustub::HashTableDirectoryPage
lsn_	include/storage/page/hash_table_header_page.h	/^  __attribute__((unused)) lsn_t lsn_;$/;"	m	class:bustub::HashTableHeaderPage
lsn_mapping_	include/recovery/log_recovery.h	/^  std::unordered_map<lsn_t, int> lsn_mapping_;$/;"	m	class:bustub::LogRecovery
lsn_t	include/recovery/log_manager.h	/^  auto AppendLogRecord(LogRecord *log_record) -> lsn_t;$/;"	m	class:bustub::LogManager
lsn_t	include/storage/page/hash_table_directory_page.h	/^  auto GetLSN() const -> lsn_t;$/;"	m	class:bustub::HashTableDirectoryPage
lsn_t	include/storage/page/hash_table_header_page.h	/^  auto GetLSN() const -> lsn_t;$/;"	m	class:bustub::HashTableHeaderPage
m_	include/common/channel.h	/^  std::mutex m_;$/;"	m	class:bustub::Channel
manage_data_	include/type/value.h	/^  bool manage_data_;$/;"	m	class:bustub::Value
map_	include/storage/index/stl_ordered.h	/^  const std::map<KT, VT, StlComparatorWrapper<KT, Cmp>> *map_;$/;"	m	class:bustub::STLOrderedIndexIterator
max_	include/catalog/table_generator.h	/^    uint64_t max_;$/;"	m	struct:bustub::TableGenerator::ColumnInsertMeta
max_depth_	include/storage/page/extendible_htable_directory_page.h	/^  uint32_t max_depth_;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
max_depth_	include/storage/page/extendible_htable_header_page.h	/^  uint32_t max_depth_;$/;"	m	class:bustub::ExtendibleHTableHeaderPage
max_size_	include/execution/executors/external_merge_sort_executor.h	/^  uint32_t max_size_;$/;"	m	class:bustub::SortPage
max_size_	include/storage/page/b_plus_tree_page.h	/^  int max_size_ __attribute__((__unused__));$/;"	m	class:bustub::BPlusTreePage
max_size_	include/storage/page/extendible_htable_bucket_page.h	/^  uint32_t max_size_;$/;"	m	class:bustub::ExtendibleHTableBucketPage
memory_	include/storage/disk/disk_manager_memory.h	/^  char *memory_;$/;"	m	class:bustub::DiskManagerMemory
metadata_	include/storage/index/index.h	/^  std::unique_ptr<IndexMetadata> metadata_;$/;"	m	class:bustub::Index
min_	include/catalog/table_generator.h	/^    uint64_t min_;$/;"	m	struct:bustub::TableGenerator::ColumnInsertMeta
mock_table_list	execution/mock_scan_executor.cpp	/^const char *mock_table_list[] = {"__mock_table_1", "__mock_table_2", "__mock_table_3", "__mock_table_tas_2022",$/;"	m	namespace:bustub	file:
modified_fields_	include/concurrency/transaction.h	/^  std::vector<bool> modified_fields_;$/;"	m	struct:bustub::UndoLog
move	include/execution/plans/seq_scan_plan.h	/^        filter_predicate_(std::move(filter_predicate)) {}$/;"	f	class:bustub::SeqScanPlanNode
move	include/execution/plans/update_plan.h	/^        target_expressions_(std::move(target_expressions)) {}$/;"	f	class:bustub::UpdatePlanNode
mutex_	include/common/rwlatch.h	/^  std::shared_mutex mutex_;$/;"	m	class:bustub::ReaderWriterLatch
mutex_	include/concurrency/transaction_manager.h	/^    std::shared_mutex mutex_;$/;"	m	struct:bustub::TransactionManager::PageVersionInfo
n_	include/execution/plans/topn_per_group_plan.h	/^  std::size_t n_;$/;"	m	class:bustub::TopNPerGroupPlanNode
n_	include/execution/plans/topn_plan.h	/^  std::size_t n_;$/;"	m	class:bustub::TopNPlanNode
name_	include/binder/simplified_token.h	/^  std::string name_;$/;"	m	struct:bustub::ParserKeyword
name_	include/catalog/catalog.h	/^  const std::string name_;$/;"	m	struct:bustub::TableInfo
name_	include/catalog/catalog.h	/^  std::string name_;$/;"	m	struct:bustub::IndexInfo
name_	include/catalog/table_generator.h	/^    const char *name_;$/;"	m	struct:bustub::TableGenerator::ColumnInsertMeta
name_	include/catalog/table_generator.h	/^    const char *name_;$/;"	m	struct:bustub::TableGenerator::TableInsertMeta
name_	include/storage/index/index.h	/^  std::string name_;$/;"	m	class:bustub::IndexMetadata
new_key_	include/storage/index/b_plus_tree.h	/^    KeyType new_key_;$/;"	m	struct:bustub::BPlusTree::SplitRet
new_page_id_	include/storage/index/b_plus_tree.h	/^    page_id_t new_page_id_;$/;"	m	struct:bustub::BPlusTree::SplitRet
new_tuple_	include/recovery/log_record.h	/^  Tuple new_tuple_;$/;"	m	class:bustub::LogRecord
next_ind_	include/storage/page/hash_table_header_page.h	/^  __attribute__((unused)) size_t next_ind_;$/;"	m	class:bustub::HashTableHeaderPage
next_lsn_	include/recovery/log_manager.h	/^  std::atomic<lsn_t> next_lsn_;$/;"	m	class:bustub::LogManager
next_page_id_	include/storage/page/b_plus_tree_leaf_page.h	/^  page_id_t next_page_id_;$/;"	m	class:bustub::BPlusTreeLeafPage
next_page_id_	include/storage/page/table_page.h	/^  page_id_t next_page_id_;$/;"	m	class:bustub::TablePage
next_uid_	include/primer/orset_driver.h	/^  uid_t next_uid_ = 0;$/;"	m	class:bustub::ORSetDriver
nlj_check_exec_set_	include/execution/executor_context.h	/^  std::deque<std::pair<AbstractExecutor *, AbstractExecutor *>> nlj_check_exec_set_;$/;"	m	class:bustub::ExecutorContext
node_id_	include/primer/orset_driver.h	/^  size_t node_id_;$/;"	m	class:bustub::ORSetNode
node_store_	include/buffer/lru_k_replacer.h	/^  std::unordered_map<frame_id_t, LRUKNode> node_store_;$/;"	m	class:bustub::LRUKReplacer
noexcept	include/storage/page/page_guard.h	/^  ReadPageGuard(ReadPageGuard &&that) noexcept;$/;"	m	class:bustub::ReadPageGuard
noexcept	include/storage/page/page_guard.h	/^  WritePageGuard(WritePageGuard &&that) noexcept;$/;"	m	class:bustub::WritePageGuard
noexcept	include/storage/table/tuple.h	/^  Tuple(Tuple &&other) noexcept = default;$/;"	m	class:bustub::Tuple
nullable_	include/catalog/table_generator.h	/^    bool nullable_;$/;"	m	struct:bustub::TableGenerator::ColumnInsertMeta
num_deleted_tuples_	include/storage/page/table_page.h	/^  uint16_t num_deleted_tuples_;$/;"	m	class:bustub::TablePage
num_frames_	include/buffer/buffer_pool_manager.h	/^  const size_t num_frames_;$/;"	m	class:bustub::BufferPoolManager
num_rows_	include/catalog/table_generator.h	/^    uint32_t num_rows_;$/;"	m	struct:bustub::TableGenerator::TableInsertMeta
num_tuples_	include/storage/page/table_page.h	/^  uint16_t num_tuples_;$/;"	m	class:bustub::TablePage
occupied_	include/storage/page/hash_table_block_page.h	/^  std::atomic_char occupied_[(BLOCK_ARRAY_SIZE - 1) \/ 8 + 1];$/;"	m	class:bustub::HashTableBlockPage
occupied_	include/storage/page/hash_table_bucket_page.h	/^  char occupied_[(BUCKET_ARRAY_SIZE - 1) \/ 8 + 1];$/;"	m	class:bustub::HashTableBucketPage
offset_	include/recovery/log_recovery.h	/^  int offset_ __attribute__((__unused__));  \/\/ NOLINT$/;"	m	class:bustub::LogRecovery
offset_	include/storage/table/tmp_tuple.h	/^  size_t offset_;$/;"	m	class:bustub::TmpTuple
oid_	include/binder/table_ref/bound_base_table_ref.h	/^  table_oid_t oid_;$/;"	m	class:bustub::BoundBaseTableRef
oid_	include/catalog/catalog.h	/^  const table_oid_t oid_;$/;"	m	struct:bustub::TableInfo
oid_	include/concurrency/lock_manager.h	/^    table_oid_t oid_;$/;"	m	class:bustub::LockManager::LockRequest
old_cte_scope_	include/binder/binder.h	/^    const CTEList *old_cte_scope_;$/;"	m	class:bustub::Binder::ContextGuard
old_ctx_	include/planner/planner.h	/^    PlannerContext old_ctx_;$/;"	m	class:bustub::Planner::ContextGuard
old_scope_	include/binder/binder.h	/^    const BoundTableRef *old_scope_;$/;"	m	class:bustub::Binder::ContextGuard
old_tuple_	include/recovery/log_record.h	/^  Tuple old_tuple_;$/;"	m	class:bustub::LogRecord
op_name_	include/binder/expressions/bound_binary_op.h	/^  std::string op_name_;$/;"	m	class:bustub::BoundBinaryOp
op_name_	include/binder/expressions/bound_unary_op.h	/^  std::string op_name_;$/;"	m	class:bustub::BoundUnaryOp
operator !=	include/concurrency/transaction.h	/^  friend auto operator!=(const UndoLink &a, const UndoLink &b) { return !(a == b); }$/;"	f	struct:bustub::UndoLink
operator !=	include/storage/table/tuple.h	/^  friend auto operator!=(const TupleMeta &a, const TupleMeta &b) { return !(a == b); }$/;"	f	struct:bustub::TupleMeta
operator =	include/common/channel.h	/^  Channel &operator=(Channel &&other) {$/;"	f	class:bustub::Channel
operator ==	include/concurrency/transaction.h	/^  friend auto operator==(const UndoLink &a, const UndoLink &b) {$/;"	f	struct:bustub::UndoLink
operator ==	include/storage/table/tuple.h	/^  friend auto operator==(const TupleMeta &a, const TupleMeta &b) {$/;"	f	struct:bustub::TupleMeta
optional	include/buffer/buffer_pool_manager.h	/^      -> std::optional<WritePageGuard>;$/;"	m	class:bustub::BufferPoolManager::std
optional	include/buffer/buffer_pool_manager.h	/^  auto CheckedReadPage(page_id_t page_id, AccessType access_type = AccessType::Unknown) -> std::optional<ReadPageGuard>;$/;"	m	class:bustub::BufferPoolManager::std
optional	include/buffer/buffer_pool_manager.h	/^  auto GetFreeFrame(page_id_t page_id) -> std::optional<frame_id_t>;$/;"	m	class:bustub::BufferPoolManager::std
optional	include/buffer/buffer_pool_manager.h	/^  auto GetPinCount(page_id_t page_id) -> std::optional<size_t>;$/;"	m	class:bustub::BufferPoolManager::std
optional	include/buffer/lru_k_replacer.h	/^  auto Evict() -> std::optional<frame_id_t>;$/;"	m	class:bustub::LRUKReplacer::std
optional	include/concurrency/transaction_manager.h	/^  auto GetUndoLink(RID rid) -> std::optional<UndoLink>;$/;"	m	class:bustub::TransactionManager::std
optional	include/concurrency/transaction_manager.h	/^  auto GetUndoLogOptional(UndoLink link) -> std::optional<UndoLog>;$/;"	m	class:bustub::TransactionManager::std
optional	include/execution/execution_common.h	/^                      const std::vector<UndoLog> &undo_logs) -> std::optional<Tuple>;$/;"	m	class:bustub::std
optional	include/execution/execution_common.h	/^                     Transaction *txn, TransactionManager *txn_mgr) -> std::optional<std::vector<UndoLog>>;$/;"	m	class:bustub::std
optional	include/optimizer/optimizer.h	/^      -> std::optional<std::tuple<index_oid_t, std::string>>;$/;"	m	class:bustub::Optimizer::std
optional	include/optimizer/optimizer.h	/^  auto EstimatedCardinality(const std::string &table_name) -> std::optional<size_t>;$/;"	m	class:bustub::Optimizer::std
optional	include/primer/trie_store.h	/^  auto Get(std::string_view key) -> std::optional<ValueGuard<T>>;$/;"	m	class:bustub::TrieStore::std
optional	include/storage/page/table_page.h	/^  auto GetNextTupleOffset(const TupleMeta &meta, const Tuple &tuple) const -> std::optional<uint16_t>;$/;"	m	class:bustub::TablePage::std
optional	include/storage/page/table_page.h	/^  auto InsertTuple(const TupleMeta &meta, const Tuple &tuple) -> std::optional<uint16_t>;$/;"	m	class:bustub::TablePage::std
optional	include/storage/table/table_heap.h	/^                   Transaction *txn = nullptr, table_oid_t oid = 0) -> std::optional<RID>;$/;"	m	class:bustub::TableHeap::std
optional	primer/trie_store.cpp	/^template auto TrieStore::Get(std::string_view key) -> std::optional<ValueGuard<Integer>>;$/;"	m	class:bustub::std	file:
optional	primer/trie_store.cpp	/^template auto TrieStore::Get(std::string_view key) -> std::optional<ValueGuard<MoveBlocked>>;$/;"	m	class:bustub::std	file:
optional	primer/trie_store.cpp	/^template auto TrieStore::Get(std::string_view key) -> std::optional<ValueGuard<std::string>>;$/;"	m	class:bustub::std	file:
optional	primer/trie_store.cpp	/^template auto TrieStore::Get(std::string_view key) -> std::optional<ValueGuard<uint32_t>>;$/;"	m	class:bustub::std	file:
options_	include/binder/statement/explain_statement.h	/^  uint8_t options_;$/;"	m	class:bustub::ExplainStatement
options_	include/binder/statement/index_statement.h	/^  std::vector<std::pair<std::string, int>> options_;$/;"	m	class:bustub::IndexStatement
order_by_	include/execution/plans/window_plan.h	/^    std::vector<OrderBy> order_by_;$/;"	m	struct:bustub::WindowFunctionPlanNode::WindowFunction
order_bys_	include/binder/expressions/bound_window.h	/^  std::vector<std::unique_ptr<BoundOrderBy>> order_bys_;$/;"	m	class:bustub::WindowBoundary::BoundWindow
order_bys_	include/execution/execution_common.h	/^  std::vector<OrderBy> order_bys_;$/;"	m	class:bustub::TupleComparator
order_bys_	include/execution/executors/sort_executor.h	/^  const std::vector<std::pair<OrderByType, AbstractExpressionRef>> *order_bys_;$/;"	m	class:bustub::CompareTuple
order_bys_	include/execution/plans/sort_plan.h	/^  std::vector<OrderBy> order_bys_;$/;"	m	class:bustub::SortPlanNode
order_bys_	include/execution/plans/topn_per_group_plan.h	/^  std::vector<OrderBy> order_bys_;$/;"	m	class:bustub::TopNPerGroupPlanNode
order_bys_	include/execution/plans/topn_plan.h	/^  std::vector<OrderBy> order_bys_;$/;"	m	class:bustub::TopNPlanNode
orset_	include/primer/orset_driver.h	/^  ORSet<T> orset_;$/;"	m	class:bustub::ORSetNode
orset_nodes_	include/primer/orset_driver.h	/^  std::vector<std::unique_ptr<ORSetNode<T>>> orset_nodes_;$/;"	m	class:bustub::ORSetDriver
other	include/common/channel.h	/^  Channel &operator=(const Channel &other) = delete;$/;"	m	class:bustub::Channel
other	include/common/channel.h	/^  Channel(const Channel &other) = delete;$/;"	m	class:bustub::Channel
other	include/storage/page/b_plus_tree_header_page.h	/^  BPlusTreeHeaderPage(const BPlusTreeHeaderPage &other) = delete;$/;"	m	class:bustub::BPlusTreeHeaderPage
other	include/storage/page/b_plus_tree_internal_page.h	/^  BPlusTreeInternalPage(const BPlusTreeInternalPage &other) = delete;$/;"	m	class:bustub::BPlusTreeInternalPage
other	include/storage/page/b_plus_tree_leaf_page.h	/^  BPlusTreeLeafPage(const BPlusTreeLeafPage &other) = delete;$/;"	m	class:bustub::BPlusTreeLeafPage
other	include/storage/page/b_plus_tree_page.h	/^  BPlusTreePage(const BPlusTreePage &other) = delete;$/;"	m	class:bustub::BPlusTreePage
other	include/storage/table/tuple.h	/^  Tuple(const Tuple &other) = default;$/;"	m	class:bustub::Tuple
outer_tuples_	include/execution/executors/nested_index_join_executor.h	/^  std::vector<Tuple> outer_tuples_;$/;"	m	class:bustub::NestIndexJoinExecutor
output_schema_	include/execution/plans/abstract_plan.h	/^  SchemaRef output_schema_;$/;"	m	class:bustub::AbstractPlanNode
overflow_bucket_	include/primer/hyperloglog_presto.h	/^  std::unordered_map<uint16_t, std::bitset<OVERFLOW_BUCKET_SIZE>> overflow_bucket_;$/;"	m	class:bustub::HyperLogLogPresto
override	include/binder/expressions/bound_agg_call.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::BoundAggCall
override	include/binder/expressions/bound_func_call.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::BoundFuncCall
override	include/binder/expressions/bound_window.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::WindowBoundary::BoundWindow
override	include/binder/statement/create_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::CreateStatement
override	include/binder/statement/delete_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::DeleteStatement
override	include/binder/statement/explain_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::ExplainStatement
override	include/binder/statement/index_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::IndexStatement
override	include/binder/statement/insert_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::InsertStatement
override	include/binder/statement/select_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::SelectStatement
override	include/binder/statement/update_statement.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::UpdateStatement
override	include/binder/table_ref/bound_cte_ref.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::BoundCTERef
override	include/binder/table_ref/bound_expression_list_ref.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::BoundExpressionListRef
override	include/binder/table_ref/bound_subquery_ref.h	/^  auto ToString() const -> std::string override;$/;"	m	class:bustub::BoundSubqueryRef
override	include/buffer/clock_replacer.h	/^  auto Size() -> size_t override;$/;"	m	class:bustub::ClockReplacer
override	include/buffer/clock_replacer.h	/^  auto Victim(frame_id_t *frame_id) -> bool override;$/;"	m	class:bustub::ClockReplacer
override	include/buffer/clock_replacer.h	/^  void Pin(frame_id_t frame_id) override;$/;"	m	class:bustub::ClockReplacer
override	include/buffer/clock_replacer.h	/^  void Unpin(frame_id_t frame_id) override;$/;"	m	class:bustub::ClockReplacer
override	include/buffer/clock_replacer.h	/^  ~ClockReplacer() override;$/;"	m	class:bustub::ClockReplacer
override	include/buffer/lru_replacer.h	/^  auto Size() -> size_t override;$/;"	m	class:bustub::LRUReplacer
override	include/buffer/lru_replacer.h	/^  auto Victim(frame_id_t *frame_id) -> bool override;$/;"	m	class:bustub::LRUReplacer
override	include/buffer/lru_replacer.h	/^  void Pin(frame_id_t frame_id) override;$/;"	m	class:bustub::LRUReplacer
override	include/buffer/lru_replacer.h	/^  void Unpin(frame_id_t frame_id) override;$/;"	m	class:bustub::LRUReplacer
override	include/buffer/lru_replacer.h	/^  ~LRUReplacer() override;$/;"	m	class:bustub::LRUReplacer
override	include/execution/executors/aggregation_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::AggregationExecutor
override	include/execution/executors/aggregation_executor.h	/^  void Init() override;$/;"	m	class:bustub::AggregationExecutor
override	include/execution/executors/delete_executor.h	/^  auto Next([[maybe_unused]] Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::DeleteExecutor
override	include/execution/executors/delete_executor.h	/^  void Init() override;$/;"	m	class:bustub::DeleteExecutor
override	include/execution/executors/external_merge_sort_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::ExternalMergeSortExecutor
override	include/execution/executors/external_merge_sort_executor.h	/^  void Init() override;$/;"	m	class:bustub::ExternalMergeSortExecutor
override	include/execution/executors/filter_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::FilterExecutor
override	include/execution/executors/filter_executor.h	/^  void Init() override;$/;"	m	class:bustub::FilterExecutor
override	include/execution/executors/hash_join_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::HashJoinExecutor
override	include/execution/executors/hash_join_executor.h	/^  void Init() override;$/;"	m	class:bustub::HashJoinExecutor
override	include/execution/executors/index_scan_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::IndexScanExecutor
override	include/execution/executors/index_scan_executor.h	/^  void Init() override;$/;"	m	class:bustub::IndexScanExecutor
override	include/execution/executors/init_check_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::InitCheckExecutor
override	include/execution/executors/init_check_executor.h	/^  void Init() override;$/;"	m	class:bustub::InitCheckExecutor
override	include/execution/executors/insert_executor.h	/^  auto Next([[maybe_unused]] Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::InsertExecutor
override	include/execution/executors/insert_executor.h	/^  void Init() override;$/;"	m	class:bustub::InsertExecutor
override	include/execution/executors/limit_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::LimitExecutor
override	include/execution/executors/limit_executor.h	/^  void Init() override;$/;"	m	class:bustub::LimitExecutor
override	include/execution/executors/mock_scan_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::MockScanExecutor
override	include/execution/executors/mock_scan_executor.h	/^  void Init() override;$/;"	m	class:bustub::MockScanExecutor
override	include/execution/executors/nested_index_join_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::NestIndexJoinExecutor
override	include/execution/executors/nested_index_join_executor.h	/^  void Init() override;$/;"	m	class:bustub::NestIndexJoinExecutor
override	include/execution/executors/nested_loop_join_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::NestedLoopJoinExecutor
override	include/execution/executors/nested_loop_join_executor.h	/^  void Init() override;$/;"	m	class:bustub::NestedLoopJoinExecutor
override	include/execution/executors/projection_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::ProjectionExecutor
override	include/execution/executors/projection_executor.h	/^  void Init() override;$/;"	m	class:bustub::ProjectionExecutor
override	include/execution/executors/seq_scan_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::SeqScanExecutor
override	include/execution/executors/seq_scan_executor.h	/^  void Init() override;$/;"	m	class:bustub::SeqScanExecutor
override	include/execution/executors/sort_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::SortExecutor
override	include/execution/executors/sort_executor.h	/^  void Init() override;$/;"	m	class:bustub::SortExecutor
override	include/execution/executors/topn_check_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::TopNCheckExecutor
override	include/execution/executors/topn_check_executor.h	/^  void Init() override;$/;"	m	class:bustub::TopNCheckExecutor
override	include/execution/executors/topn_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::TopNExecutor
override	include/execution/executors/topn_executor.h	/^  void Init() override;$/;"	m	class:bustub::TopNExecutor
override	include/execution/executors/topn_per_group_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::TopNPerGroupExecutor
override	include/execution/executors/topn_per_group_executor.h	/^  void Init() override;$/;"	m	class:bustub::TopNPerGroupExecutor
override	include/execution/executors/update_executor.h	/^  auto Next([[maybe_unused]] Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::UpdateExecutor
override	include/execution/executors/update_executor.h	/^  void Init() override;$/;"	m	class:bustub::UpdateExecutor
override	include/execution/executors/values_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::ValuesExecutor
override	include/execution/executors/values_executor.h	/^  void Init() override;$/;"	m	class:bustub::ValuesExecutor
override	include/execution/executors/window_function_executor.h	/^  auto Next(Tuple *tuple, RID *rid) -> bool override;$/;"	m	class:bustub::WindowFunctionExecutor
override	include/execution/executors/window_function_executor.h	/^  void Init() override;$/;"	m	class:bustub::WindowFunctionExecutor
override	include/execution/plans/aggregation_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::AggregationPlanNode
override	include/execution/plans/hash_join_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::HashJoinPlanNode
override	include/execution/plans/limit_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::LimitPlanNode
override	include/execution/plans/projection_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::ProjectionPlanNode
override	include/execution/plans/sort_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::SortPlanNode
override	include/execution/plans/topn_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::TopNPlanNode
override	include/execution/plans/update_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::UpdatePlanNode
override	include/execution/plans/window_plan.h	/^  auto PlanNodeToString() const -> std::string override;$/;"	m	class:bustub::WindowFunctionPlanNode
override	include/storage/disk/disk_manager_memory.h	/^  void IncreaseDiskSpace(size_t pages) override;$/;"	m	class:bustub::DiskManagerMemory
override	include/storage/disk/disk_manager_memory.h	/^  void ReadPage(page_id_t page_id, char *page_data) override;$/;"	m	class:bustub::DiskManagerMemory
override	include/storage/disk/disk_manager_memory.h	/^  void WritePage(page_id_t page_id, const char *page_data) override;$/;"	m	class:bustub::DiskManagerMemory
override	include/storage/index/b_plus_tree_index.h	/^  auto InsertEntry(const Tuple &key, RID rid, Transaction *transaction) -> bool override;$/;"	m	class:bustub::BPlusTreeIndex
override	include/storage/index/b_plus_tree_index.h	/^  void DeleteEntry(const Tuple &key, RID rid, Transaction *transaction) override;$/;"	m	class:bustub::BPlusTreeIndex
override	include/storage/index/b_plus_tree_index.h	/^  void ScanKey(const Tuple &key, std::vector<RID> *result, Transaction *transaction) override;$/;"	m	class:bustub::BPlusTreeIndex
override	include/storage/index/extendible_hash_table_index.h	/^  auto InsertEntry(const Tuple &key, RID rid, Transaction *transaction) -> bool override;$/;"	m	class:bustub::ExtendibleHashTableIndex
override	include/storage/index/extendible_hash_table_index.h	/^  void DeleteEntry(const Tuple &key, RID rid, Transaction *transaction) override;$/;"	m	class:bustub::ExtendibleHashTableIndex
override	include/storage/index/extendible_hash_table_index.h	/^  void ScanKey(const Tuple &key, std::vector<RID> *result, Transaction *transaction) override;$/;"	m	class:bustub::ExtendibleHashTableIndex
override	include/storage/index/extendible_hash_table_index.h	/^  ~ExtendibleHashTableIndex() override = default;$/;"	m	class:bustub::ExtendibleHashTableIndex
override	include/storage/index/linear_probe_hash_table_index.h	/^  auto InsertEntry(const Tuple &key, RID rid, Transaction *transaction) -> bool override;$/;"	m	class:bustub::LinearProbeHashTableIndex
override	include/storage/index/linear_probe_hash_table_index.h	/^  void DeleteEntry(const Tuple &key, RID rid, Transaction *transaction) override;$/;"	m	class:bustub::LinearProbeHashTableIndex
override	include/storage/index/linear_probe_hash_table_index.h	/^  void ScanKey(const Tuple &key, std::vector<RID> *result, Transaction *transaction) override;$/;"	m	class:bustub::LinearProbeHashTableIndex
override	include/storage/index/linear_probe_hash_table_index.h	/^  ~LinearProbeHashTableIndex() override = default;$/;"	m	class:bustub::LinearProbeHashTableIndex
override	include/type/bigint_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto IsZero(const Value &val) const -> bool override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto Sqrt(const Value &val) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::BigintType
override	include/type/bigint_type.h	/^  ~BigintType() override = default;$/;"	m	class:bustub::BigintType
override	include/type/boolean_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::BooleanType
override	include/type/boolean_type.h	/^  ~BooleanType() override = default;$/;"	m	class:bustub::BooleanType
override	include/type/decimal_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto IsZero(const Value &val) const -> bool override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Max(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Min(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Sqrt(const Value &val) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::DecimalType
override	include/type/decimal_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::DecimalType
override	include/type/integer_parent_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Copy(const Value &val) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto IsZero(const Value &val) const -> bool override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Max(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Min(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Sqrt(const Value &val) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  auto ToString(const Value &val) const -> std::string override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  void SerializeTo(const Value &val, char *storage) const override = 0;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_parent_type.h	/^  ~IntegerParentType() override = default;$/;"	m	class:bustub::IntegerParentType
override	include/type/integer_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto IsZero(const Value &val) const -> bool override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto Sqrt(const Value &val) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::IntegerType
override	include/type/integer_type.h	/^  ~IntegerType() override = default;$/;"	m	class:bustub::IntegerType
override	include/type/numeric_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto IsZero(const Value &val) const -> bool override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Max(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Min(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Sqrt(const Value &val) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override = 0;$/;"	m	class:bustub::NumericType
override	include/type/numeric_type.h	/^  ~NumericType() override = default;$/;"	m	class:bustub::NumericType
override	include/type/smallint_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto IsZero(const Value &val) const -> bool override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto Sqrt(const Value &val) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::SmallintType
override	include/type/smallint_type.h	/^  ~SmallintType() override = default;$/;"	m	class:bustub::SmallintType
override	include/type/timestamp_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto Max(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto Min(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::TimestampType
override	include/type/timestamp_type.h	/^  ~TimestampType() override = default;$/;"	m	class:bustub::TimestampType
override	include/type/tinyint_type.h	/^  auto Add(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CastAs(const Value &val, TypeId type_id) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto Divide(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto IsZero(const Value &val) const -> bool override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto Modulo(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto Multiply(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto OperateNull(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto Sqrt(const Value &val) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto Subtract(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::TinyintType
override	include/type/tinyint_type.h	/^  ~TinyintType() override = default;$/;"	m	class:bustub::TinyintType
override	include/type/varlen_type.h	/^  auto CastAs(const Value &value, TypeId type_id) const -> Value override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto GetData(const Value &val) const -> const char * override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto GetStorageSize(const Value &val) const -> uint32_t override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto Max(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto Min(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::VarlenType
override	include/type/varlen_type.h	/^  ~VarlenType() override;$/;"	m	class:bustub::VarlenType
override	include/type/vector_type.h	/^  auto CastAs(const Value &value, TypeId type_id) const -> Value override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto CompareEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto CompareGreaterThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto CompareGreaterThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto CompareLessThan(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto CompareLessThanEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto CompareNotEquals(const Value &left, const Value &right) const -> CmpBool override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto Copy(const Value &val) const -> Value override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto DeserializeFrom(const char *storage) const -> Value override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto GetData(const Value &val) const -> const char * override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto GetStorageSize(const Value &val) const -> uint32_t override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto Max(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto Min(const Value &left, const Value &right) const -> Value override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  auto ToString(const Value &val) const -> std::string override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  void SerializeTo(const Value &val, char *storage) const override;$/;"	m	class:bustub::VectorType
override	include/type/vector_type.h	/^  ~VectorType() override;$/;"	m	class:bustub::VectorType
page_id_	include/storage/disk/disk_scheduler.h	/^  page_id_t page_id_;$/;"	m	struct:bustub::DiskRequest
page_id_	include/storage/page/hash_table_directory_page.h	/^  page_id_t page_id_;$/;"	m	class:bustub::HashTableDirectoryPage
page_id_	include/storage/page/hash_table_header_page.h	/^  __attribute__((unused)) page_id_t page_id_;$/;"	m	class:bustub::HashTableHeaderPage
page_id_	include/storage/page/page.h	/^  page_id_t page_id_;$/;"	m	class:bustub::Page
page_id_	include/storage/page/page_guard.h	/^  page_id_t page_id_;$/;"	m	class:bustub::ReadPageGuard
page_id_	include/storage/page/page_guard.h	/^  page_id_t page_id_;$/;"	m	class:bustub::WritePageGuard
page_id_	include/storage/table/tmp_tuple.h	/^  page_id_t page_id_;$/;"	m	class:bustub::TmpTuple
page_id_array_	include/storage/page/b_plus_tree_internal_page.h	/^  ValueType page_id_array_[INTERNAL_PAGE_SLOT_CNT];$/;"	m	class:bustub::BPlusTreeInternalPage
page_id_t	include/buffer/buffer_pool_manager.h	/^  auto GetCurrPageId() -> page_id_t;$/;"	m	class:bustub::FrameHeader
page_id_t	include/buffer/buffer_pool_manager.h	/^  auto NewPage() -> page_id_t;$/;"	m	class:bustub::BufferPoolManager
page_id_t	include/container/disk/hash/disk_extendible_hash_table.h	/^  auto GetHeaderPageId() const -> page_id_t;$/;"	m	class:bustub::DiskExtendibleHashTable
page_id_t	include/storage/index/b_plus_tree.h	/^                              int rightmost) -> page_id_t;$/;"	m	class:bustub::BPlusTree
page_id_t	include/storage/index/b_plus_tree.h	/^                          int rightmost) -> page_id_t;$/;"	m	class:bustub::BPlusTree
page_id_t	include/storage/index/b_plus_tree.h	/^                        int rightmost) -> page_id_t;$/;"	m	class:bustub::BPlusTree
page_id_t	include/storage/index/b_plus_tree.h	/^                    int rightmost) -> page_id_t;$/;"	m	class:bustub::BPlusTree
page_id_t	include/storage/index/b_plus_tree.h	/^  auto GetRootPageId() const -> page_id_t;$/;"	m	class:bustub::BPlusTree
page_id_t	include/storage/page/b_plus_tree_internal_page.h	/^  auto RemoveAndReturnOnlyChild() -> page_id_t;$/;"	m	class:bustub::BPlusTreeInternalPage
page_id_t	include/storage/page/b_plus_tree_leaf_page.h	/^  auto GetNextPageId() const -> page_id_t;$/;"	m	class:bustub::BPlusTreeLeafPage
page_id_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetBucketPageId(uint32_t bucket_idx) const -> page_id_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
page_id_t	include/storage/page/extendible_htable_header_page.h	/^  auto GetDirectoryPageId(uint32_t directory_idx) const -> page_id_t;$/;"	m	class:bustub::ExtendibleHTableHeaderPage
page_id_t	include/storage/page/hash_table_directory_page.h	/^  auto GetBucketPageId(uint32_t bucket_idx) -> page_id_t;$/;"	m	class:bustub::HashTableDirectoryPage
page_id_t	include/storage/page/hash_table_directory_page.h	/^  auto GetPageId() const -> page_id_t;$/;"	m	class:bustub::HashTableDirectoryPage
page_id_t	include/storage/page/hash_table_header_page.h	/^  auto GetBlockPageId(size_t index) -> page_id_t;$/;"	m	class:bustub::HashTableHeaderPage
page_id_t	include/storage/page/hash_table_header_page.h	/^  auto GetPageId() const -> page_id_t;$/;"	m	class:bustub::HashTableHeaderPage
page_id_t	include/storage/page/page_guard.h	/^  auto GetPageId() const -> page_id_t;$/;"	m	class:bustub::ReadPageGuard
page_id_t	include/storage/page/page_guard.h	/^  auto GetPageId() const -> page_id_t;$/;"	m	class:bustub::WritePageGuard
page_start_	include/execution/executors/external_merge_sort_executor.h	/^  char page_start_[0];$/;"	m	class:bustub::SortPage
page_start_	include/storage/page/table_page.h	/^  char page_start_[0];$/;"	m	class:bustub::TablePage
page_table_	include/buffer/buffer_pool_manager.h	/^  std::unordered_map<page_id_t, frame_id_t> page_table_;$/;"	m	class:bustub::BufferPoolManager
page_type_	include/storage/page/b_plus_tree_page.h	/^  IndexPageType page_type_ __attribute__((__unused__));$/;"	m	class:bustub::BPlusTreePage
pages_	include/execution/executors/external_merge_sort_executor.h	/^  std::vector<page_id_t> pages_;$/;"	m	class:bustub::MergeSortRun
pages_	include/storage/disk/disk_manager_memory.h	/^  size_t pages_;$/;"	m	class:bustub::DiskManagerMemory
pair	include/storage/index/index_iterator.h	/^  auto operator*() -> std::pair<const KeyType &, const ValueType &>;$/;"	m	class:bustub::IndexIterator::std
pair	include/storage/page/extendible_htable_bucket_page.h	/^  auto EntryAt(uint32_t bucket_idx) const -> const std::pair<KeyType, ValueType> &;$/;"	m	class:bustub::ExtendibleHTableBucketPage::std
pair	include/storage/page/table_page.h	/^  auto GetTuple(const RID &rid) const -> std::pair<TupleMeta, Tuple>;$/;"	m	class:bustub::TablePage::std
pair	include/storage/table/table_heap.h	/^  auto GetTuple(RID rid) -> std::pair<TupleMeta, Tuple>;$/;"	m	class:bustub::TableHeap::std
pair	include/storage/table/table_heap.h	/^  auto GetTupleWithLockAcquired(RID rid, const TablePage *page) -> std::pair<TupleMeta, Tuple>;$/;"	m	class:bustub::TableHeap::std
pair	include/storage/table/table_iterator.h	/^  auto GetTuple() -> std::pair<TupleMeta, Tuple>;$/;"	m	class:bustub::TableIterator::std
parser_	include/binder/binder.h	/^  duckdb::PostgresParser parser_;$/;"	m	class:bustub::Binder
partition_by_	include/binder/expressions/bound_window.h	/^  std::vector<std::unique_ptr<BoundExpression>> partition_by_;$/;"	m	class:bustub::WindowBoundary::BoundWindow
partition_by_	include/execution/plans/window_plan.h	/^    std::vector<AbstractExpressionRef> partition_by_;$/;"	m	struct:bustub::WindowFunctionPlanNode::WindowFunction
peer_size_	include/primer/orset_driver.h	/^  size_t peer_size_;$/;"	m	class:bustub::ORSetNode
persistent_lsn_	include/recovery/log_manager.h	/^  std::atomic<lsn_t> persistent_lsn_;$/;"	m	class:bustub::LogManager
pin_count_	include/storage/page/page.h	/^  std::atomic<size_t> pin_count_;$/;"	m	class:bustub::Page
plan_	include/execution/executors/aggregation_executor.h	/^  const AggregationPlanNode *plan_;$/;"	m	class:bustub::AggregationExecutor
plan_	include/execution/executors/delete_executor.h	/^  const DeletePlanNode *plan_;$/;"	m	class:bustub::DeleteExecutor
plan_	include/execution/executors/external_merge_sort_executor.h	/^  const SortPlanNode *plan_;$/;"	m	class:bustub::ExternalMergeSortExecutor
plan_	include/execution/executors/filter_executor.h	/^  const FilterPlanNode *plan_;$/;"	m	class:bustub::FilterExecutor
plan_	include/execution/executors/hash_join_executor.h	/^  const HashJoinPlanNode *plan_;$/;"	m	class:bustub::HashJoinExecutor
plan_	include/execution/executors/index_scan_executor.h	/^  const IndexScanPlanNode *plan_;$/;"	m	class:bustub::IndexScanExecutor
plan_	include/execution/executors/init_check_executor.h	/^  AbstractPlanNodeRef plan_;$/;"	m	class:bustub::InitCheckExecutor
plan_	include/execution/executors/insert_executor.h	/^  const InsertPlanNode *plan_;$/;"	m	class:bustub::InsertExecutor
plan_	include/execution/executors/limit_executor.h	/^  const LimitPlanNode *plan_;$/;"	m	class:bustub::LimitExecutor
plan_	include/execution/executors/mock_scan_executor.h	/^  const MockScanPlanNode *plan_;$/;"	m	class:bustub::MockScanExecutor
plan_	include/execution/executors/nested_index_join_executor.h	/^  const NestedIndexJoinPlanNode *plan_;$/;"	m	class:bustub::NestIndexJoinExecutor
plan_	include/execution/executors/nested_loop_join_executor.h	/^  const NestedLoopJoinPlanNode *plan_;$/;"	m	class:bustub::NestedLoopJoinExecutor
plan_	include/execution/executors/projection_executor.h	/^  const ProjectionPlanNode *plan_;$/;"	m	class:bustub::ProjectionExecutor
plan_	include/execution/executors/seq_scan_executor.h	/^  const SeqScanPlanNode *plan_;$/;"	m	class:bustub::SeqScanExecutor
plan_	include/execution/executors/sort_executor.h	/^  const SortPlanNode *plan_;$/;"	m	class:bustub::SortExecutor
plan_	include/execution/executors/topn_check_executor.h	/^  const TopNPlanNode *plan_;$/;"	m	class:bustub::TopNCheckExecutor
plan_	include/execution/executors/topn_executor.h	/^  const TopNPlanNode *plan_;$/;"	m	class:bustub::TopNExecutor
plan_	include/execution/executors/topn_per_group_executor.h	/^  [[maybe_unused]] const TopNPerGroupPlanNode *plan_;$/;"	m	class:bustub::TopNPerGroupExecutor
plan_	include/execution/executors/update_executor.h	/^  const UpdatePlanNode *plan_;$/;"	m	class:bustub::UpdateExecutor
plan_	include/execution/executors/values_executor.h	/^  const ValuesPlanNode *plan_;$/;"	m	class:bustub::ValuesExecutor
plan_	include/execution/executors/window_function_executor.h	/^  const WindowFunctionPlanNode *plan_;$/;"	m	class:bustub::WindowFunctionExecutor
plan_	include/planner/planner.h	/^  AbstractPlanNodeRef plan_;$/;"	m	class:bustub::Planner
pred_keys_	include/execution/plans/index_scan_plan.h	/^  std::vector<AbstractExpressionRef> pred_keys_;$/;"	m	class:bustub::IndexScanPlanNode
predicate_	include/execution/plans/filter_plan.h	/^  AbstractExpressionRef predicate_;$/;"	m	class:bustub::FilterPlanNode
predicate_	include/execution/plans/nested_loop_join_plan.h	/^  AbstractExpressionRef predicate_;$/;"	m	class:bustub::NestedLoopJoinPlanNode
prev_link_	include/concurrency/transaction_manager.h	/^    std::unordered_map<slot_offset_t, UndoLink> prev_link_;$/;"	m	struct:bustub::TransactionManager::PageVersionInfo
primary_key_	include/binder/statement/create_statement.h	/^  std::vector<std::string> primary_key_;$/;"	m	class:bustub::CreateStatement
q_	include/common/channel.h	/^  std::queue<T> q_;$/;"	m	class:bustub::Channel
rarg_	include/binder/expressions/bound_binary_op.h	/^  std::unique_ptr<BoundExpression> rarg_;$/;"	m	class:bustub::BoundBinaryOp
read_set_	include/storage/index/b_plus_tree.h	/^  std::deque<ReadPageGuard> read_set_;$/;"	m	class:bustub::Context
readable_	include/storage/page/hash_table_block_page.h	/^  std::atomic_char readable_[(BLOCK_ARRAY_SIZE - 1) \/ 8 + 1];$/;"	m	class:bustub::HashTableBlockPage
readable_	include/storage/page/hash_table_bucket_page.h	/^  char readable_[(BUCKET_ARRAY_SIZE - 1) \/ 8 + 1];$/;"	m	class:bustub::HashTableBucketPage
recent_access_	include/storage/disk/disk_manager_memory.h	/^  std::array<page_id_t, 4> recent_access_;$/;"	m	class:bustub::DiskManagerUnlimitedMemory
replacer_	include/buffer/buffer_pool_manager.h	/^  std::shared_ptr<LRUKReplacer> replacer_;$/;"	m	class:bustub::BufferPoolManager
replacer_	include/storage/page/page_guard.h	/^  std::shared_ptr<LRUKReplacer> replacer_;$/;"	m	class:bustub::ReadPageGuard
replacer_	include/storage/page/page_guard.h	/^  std::shared_ptr<LRUKReplacer> replacer_;$/;"	m	class:bustub::WritePageGuard
replacer_size_	include/buffer/lru_k_replacer.h	/^  size_t replacer_size_;$/;"	m	class:bustub::LRUKReplacer
request_queue_	include/concurrency/lock_manager.h	/^    std::list<std::shared_ptr<LockRequest>> request_queue_;$/;"	m	class:bustub::LockManager::LockRequestQueue
request_queue_	include/storage/disk/disk_scheduler.h	/^  Channel<std::optional<DiskRequest>> request_queue_;$/;"	m	class:bustub::DiskScheduler
results_	include/execution/executors/hash_join_executor.h	/^  std::list<Tuple> results_;$/;"	m	class:bustub::HashJoinExecutor
ret_type_	include/execution/expressions/abstract_expression.h	/^  Column ret_type_;$/;"	m	class:bustub::AbstractExpression
ret_val_	include/storage/index/stl_ordered.h	/^  std::pair<KT, VT> ret_val_;$/;"	m	class:bustub::STLOrderedIndexIterator
rid_	include/concurrency/lock_manager.h	/^    RID rid_;$/;"	m	class:bustub::LockManager::LockRequest
rid_	include/storage/table/table_iterator.h	/^  RID rid_;$/;"	m	class:bustub::TableIterator
rid_array_	include/storage/page/b_plus_tree_leaf_page.h	/^  ValueType rid_array_[LEAF_PAGE_SLOT_CNT];$/;"	m	class:bustub::BPlusTreeLeafPage
right_	include/binder/table_ref/bound_cross_product_ref.h	/^  std::unique_ptr<BoundTableRef> right_;$/;"	m	class:bustub::BoundCrossProductRef
right_	include/binder/table_ref/bound_join_ref.h	/^  std::unique_ptr<BoundTableRef> right_;$/;"	m	class:bustub::JoinType::BoundJoinRef
right_child_executor_	include/execution/executors/hash_join_executor.h	/^  std::unique_ptr<AbstractExecutor> right_child_executor_;$/;"	m	class:bustub::HashJoinExecutor
right_executor_	include/execution/executors/nested_loop_join_executor.h	/^  std::unique_ptr<AbstractExecutor> right_executor_;$/;"	m	class:bustub::NestedLoopJoinExecutor
right_key_expressions_	include/execution/plans/hash_join_plan.h	/^  std::vector<AbstractExpressionRef> right_key_expressions_;$/;"	m	class:bustub::HashJoinPlanNode
root_	include/primer/trie_store.h	/^  Trie root_;$/;"	m	class:bustub::TrieStore
root_	include/primer/trie_store.h	/^  Trie root_;$/;"	m	class:bustub::ValueGuard
root_lock_	include/primer/trie_store.h	/^  std::mutex root_lock_;$/;"	m	class:bustub::TrieStore
root_page_id_	include/storage/page/b_plus_tree_header_page.h	/^  page_id_t root_page_id_;$/;"	m	class:bustub::BPlusTreeHeaderPage
row_lock_map_	include/concurrency/lock_manager.h	/^  std::unordered_map<RID, std::shared_ptr<LockRequestQueue>> row_lock_map_;$/;"	m	class:bustub::LockManager
row_lock_map_latch_	include/concurrency/lock_manager.h	/^  std::mutex row_lock_map_latch_;$/;"	m	class:bustub::LockManager
run_	include/execution/executors/external_merge_sort_executor.h	/^    [[maybe_unused]] const MergeSortRun *run_;$/;"	m	class:bustub::MergeSortRun::Iterator
runs_	include/execution/executors/external_merge_sort_executor.h	/^  std::vector<MergeSortRun> runs_;$/;"	m	class:bustub::ExternalMergeSortExecutor
rwlatch_	include/buffer/buffer_pool_manager.h	/^  std::shared_mutex rwlatch_;$/;"	m	class:bustub::FrameHeader
rwlatch_	include/storage/page/page.h	/^  std::shared_mutex rwlatch_;$/;"	m	class:bustub::Page
saved_copies_	include/primer/orset_driver.h	/^  std::vector<ORSet<T>> saved_copies_;$/;"	m	class:bustub::ORSetDriver
scan_predicates_	include/concurrency/transaction.h	/^  std::unordered_map<table_oid_t, std::vector<AbstractExpressionRef>> scan_predicates_;$/;"	m	class:bustub::Transaction
schema_	include/binder/table_ref/bound_base_table_ref.h	/^  Schema schema_;$/;"	m	class:bustub::BoundBaseTableRef
schema_	include/catalog/catalog.h	/^  Schema schema_;$/;"	m	struct:bustub::TableInfo
schema_	include/execution/executors/sort_executor.h	/^  const Schema *schema_;$/;"	m	class:bustub::CompareTuple
scope_ptr_	include/binder/binder.h	/^    const BoundTableRef **scope_ptr_;$/;"	m	class:bustub::Binder::ContextGuard
select_	include/binder/statement/insert_statement.h	/^  std::unique_ptr<SelectStatement> select_;$/;"	m	class:bustub::InsertStatement
select_list_	include/binder/statement/select_statement.h	/^  std::vector<std::unique_ptr<BoundExpression>> select_list_;$/;"	m	class:bustub::SelectStatement
select_list_name_	include/binder/table_ref/bound_subquery_ref.h	/^  std::vector<std::vector<std::string>> select_list_name_;$/;"	m	class:bustub::BoundSubqueryRef
separator_	include/common/bustub_instance.h	/^  std::string separator_;$/;"	m	class:bustub::SimpleStreamWriter
session_variables_	include/common/bustub_instance.h	/^  std::unordered_map<std::string, std::string> session_variables_;$/;"	m	class:bustub::BusTubInstance
shuffled_idx_	include/execution/executors/mock_scan_executor.h	/^  std::vector<size_t> shuffled_idx_;$/;"	m	class:bustub::MockScanExecutor
size_	include/execution/executors/external_merge_sort_executor.h	/^  uint32_t size_;$/;"	m	class:bustub::SortPage
size_	include/execution/executors/mock_scan_executor.h	/^  std::size_t size_;$/;"	m	class:bustub::MockScanExecutor
size_	include/storage/index/b_plus_tree.h	/^  int size_;$/;"	m	struct:bustub::PrintableBPlusTree
size_	include/storage/page/b_plus_tree_page.h	/^  int size_ __attribute__((__unused__));$/;"	m	class:bustub::BPlusTreePage
size_	include/storage/page/extendible_htable_bucket_page.h	/^  uint32_t size_;$/;"	m	class:bustub::ExtendibleHTableBucketPage
size_	include/storage/page/hash_table_header_page.h	/^  __attribute__((unused)) size_t size_;$/;"	m	class:bustub::HashTableHeaderPage
size_	include/type/value.h	/^  } size_;$/;"	m	class:bustub::Value	typeref:union:bustub::Value::__anon2
size_t	include/buffer/buffer_pool_manager.h	/^  auto GetPinCount() -> size_t;$/;"	m	class:bustub::FrameHeader
size_t	include/buffer/lru_k_replacer.h	/^  auto BackwardKDistance(size_t current_timestamp) -> size_t;$/;"	m	class:bustub::LRUKNode
size_t	include/buffer/lru_k_replacer.h	/^  auto Size() -> size_t;$/;"	m	class:bustub::LRUKReplacer
size_t	include/buffer/replacer.h	/^  virtual auto Size() -> size_t = 0;$/;"	m	class:bustub::Replacer
size_t	include/common/util/string_util.h	/^  static auto Count(const std::string &input, const std::string &str) -> size_t;$/;"	m	class:bustub::StringUtil
size_t	include/container/disk/hash/linear_probe_hash_table.h	/^  auto GetSize() -> size_t;$/;"	m	class:bustub::LinearProbeHashTable
size_t	include/execution/executors/topn_executor.h	/^  auto GetNumInHeap() -> size_t;$/;"	m	class:bustub::TopNExecutor
size_t	include/storage/page/hash_table_header_page.h	/^  auto GetSize() const -> size_t;$/;"	m	class:bustub::HashTableHeaderPage
size_t	include/storage/page/hash_table_header_page.h	/^  auto NumBlocks() -> size_t;$/;"	m	class:bustub::HashTableHeaderPage
smallint_	include/type/value.h	/^    int16_t smallint_;$/;"	m	union:bustub::Value::Val
sort_	include/binder/statement/select_statement.h	/^  std::vector<std::unique_ptr<BoundOrderBy>> sort_;$/;"	m	class:bustub::SelectStatement
sorted_iter_	include/execution/executors/sort_executor.h	/^  std::vector<std::pair<Tuple, RID>>::iterator sorted_iter_;$/;"	m	class:bustub::SortExecutor
sorted_tuples_	include/execution/executors/sort_executor.h	/^  std::vector<std::pair<Tuple, RID>> sorted_tuples_;$/;"	m	class:bustub::SortExecutor
ss_	include/common/bustub_instance.h	/^  std::stringstream ss_;$/;"	m	class:bustub::HtmlWriter
start_	include/binder/expressions/bound_window.h	/^  WindowBoundary start_ = WindowBoundary::INVALID;$/;"	m	class:bustub::WindowBoundary::BoundWindow
start_	include/binder/simplified_token.h	/^  int32_t start_;$/;"	m	struct:bustub::SimplifiedToken
start_offset_	include/binder/expressions/bound_window.h	/^  std::optional<std::unique_ptr<BoundExpression>> start_offset_;$/;"	m	class:bustub::WindowBoundary::BoundWindow
statement_	include/binder/statement/explain_statement.h	/^  std::unique_ptr<BoundStatement> statement_;$/;"	m	class:bustub::ExplainStatement
statement_nodes_	include/binder/binder.h	/^  std::vector<duckdb_libpgquery::PGNode *> statement_nodes_;$/;"	m	class:bustub::Binder
std	include/common/rid.h	/^namespace std {$/;"	n
std	include/execution/executors/hash_join_executor.h	/^namespace std {$/;"	n
std	include/execution/plans/aggregation_plan.h	/^namespace std {$/;"	n
stop_at_rid_	include/storage/table/table_iterator.h	/^  RID stop_at_rid_;$/;"	m	class:bustub::TableIterator
stream_	include/common/bustub_instance.h	/^  std::ostream &stream_;$/;"	m	class:bustub::SimpleStreamWriter
string	include/binder/binder.h	/^  static auto NodeTagToString(duckdb_libpgquery::PGNodeTag type) -> std::string;$/;"	m	class:bustub::Binder::std
string	include/binder/binder.h	/^  static auto WindowBoundaryToString(WindowBoundary wb) -> std::string;$/;"	m	class:bustub::Binder::std
string	include/binder/keyword_helper.h	/^  static auto WriteOptionallyQuoted(const std::string &text, char quote = '"') -> std::string;$/;"	m	class:bustub::KeywordHelper::std
string	include/catalog/column.h	/^  auto ToString(bool simplified = true) const -> std::string;$/;"	m	class:bustub::Column::std
string	include/catalog/schema.h	/^  auto ToString(bool simplified = true) const -> std::string;$/;"	m	class:bustub::Schema::std
string	include/common/util/string_util.h	/^      -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Bold(const std::string &str) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Format(std::string fmt_str, ...) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto FormatSize(uint64_t bytes) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Indent(int num_indent) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Join(const std::vector<std::string> &input, const std::string &separator) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Lower(const std::string &str) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Prefix(const std::string &str, const std::string &prefix) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Repeat(const std::string &str, std::size_t n) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Replace(std::string source, const std::string &from, const std::string &to) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Strip(const std::string &str, char c) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/common/util/string_util.h	/^  static auto Upper(const std::string &str) -> std::string;$/;"	m	class:bustub::StringUtil::std
string	include/execution/plans/abstract_plan.h	/^  auto ChildrenToString(int indent, bool with_schema = true) const -> std::string;$/;"	m	class:bustub::AbstractPlanNode::std
string	include/primer/orset.h	/^  auto ToString() const -> std::string;$/;"	m	class:bustub::ORSet::std
string	include/storage/index/b_plus_tree.h	/^  auto DrawBPlusTree() -> std::string;$/;"	m	class:bustub::BPlusTree::std
string	include/storage/table/tuple.h	/^  auto ToString(const Schema *schema) const -> std::string;$/;"	m	class:bustub::Tuple::std
string	include/type/type.h	/^  static auto TypeIdToString(TypeId type_id) -> std::string;$/;"	m	class:bustub::CmpBool::Type::std
string	include/type/type.h	/^  virtual auto ToString(const Value &val) const -> std::string;$/;"	m	class:bustub::CmpBool::Type::std
string	primer/trie.cpp	/^template auto Trie::Get(std::string_view key) const -> const std::string *;$/;"	m	class:bustub::std	file:
subquery_	include/binder/table_ref/bound_subquery_ref.h	/^  std::unique_ptr<SelectStatement> subquery_;$/;"	m	class:bustub::BoundSubqueryRef
ta_list_2022	execution/mock_scan_executor.cpp	/^static const char *ta_list_2022[] = {"amstqq",      "durovo",     "joyceliaoo", "karthik-ramanathan-3006",$/;"	m	namespace:bustub	file:
ta_list_2023	execution/mock_scan_executor.cpp	/^static const char *ta_list_2023[] = {"abigalekim",      "arvinwu168", "christopherlim98", "David-Lyons", "fanyuex2",$/;"	m	namespace:bustub	file:
ta_list_2023_fall	execution/mock_scan_executor.cpp	/^static const char *ta_list_2023_fall[] = {"skyzh",     "yliang412",       "fernandolis10", "wiam8",$/;"	m	namespace:bustub	file:
ta_list_2024	execution/mock_scan_executor.cpp	/^static const char *ta_list_2024[] = {"AlSchlo",   "walkingcabbages", "averyqi115", "lanlou1554", "sweetsuro",$/;"	m	namespace:bustub	file:
ta_list_2024_fall	execution/mock_scan_executor.cpp	/^static const char *ta_list_2024_fall[] = {"17zhangw",         "connortsui20", "J-HowHuang", "lanlou1554",$/;"	m	namespace:bustub	file:
ta_oh_2022	execution/mock_scan_executor.cpp	/^static const char *ta_oh_2022[] = {"Tuesday",   "Wednesday", "Monday",  "Wednesday", "Thursday", "Friday",$/;"	m	namespace:bustub	file:
ta_oh_2023	execution/mock_scan_executor.cpp	/^static const char *ta_oh_2023[] = {"Friday",  "Thursday", "Tuesday",   "Monday",  "Tuesday",$/;"	m	namespace:bustub	file:
ta_oh_2023_fall	execution/mock_scan_executor.cpp	/^static const char *ta_oh_2023_fall[] = {"Randomly", "Tuesday",   "Wednesday", "Tuesday", "Thursday", "Tuesday",$/;"	m	namespace:bustub	file:
ta_oh_2024	execution/mock_scan_executor.cpp	/^static const char *ta_oh_2024[] = {"Friday",    "Thursday", "Friday",  "Wednesday", "Thursday",$/;"	m	namespace:bustub	file:
ta_oh_2024_fall	execution/mock_scan_executor.cpp	/^static const char *ta_oh_2024_fall[] = {"Wednesday", "Thursday", "Tuesday", "Monday",$/;"	m	namespace:bustub	file:
table_	include/binder/statement/create_statement.h	/^  std::string table_;$/;"	m	class:bustub::CreateStatement
table_	include/binder/statement/delete_statement.h	/^  std::unique_ptr<BoundBaseTableRef> table_;$/;"	m	class:bustub::DeleteStatement
table_	include/binder/statement/index_statement.h	/^  std::unique_ptr<BoundBaseTableRef> table_;$/;"	m	class:bustub::IndexStatement
table_	include/binder/statement/insert_statement.h	/^  std::unique_ptr<BoundBaseTableRef> table_;$/;"	m	class:bustub::InsertStatement
table_	include/binder/statement/select_statement.h	/^  std::unique_ptr<BoundTableRef> table_;$/;"	m	class:bustub::SelectStatement
table_	include/binder/statement/update_statement.h	/^  std::unique_ptr<BoundBaseTableRef> table_;$/;"	m	class:bustub::UpdateStatement
table_	include/binder/table_ref/bound_base_table_ref.h	/^  std::string table_;$/;"	m	class:bustub::BoundBaseTableRef
table_	include/catalog/catalog.h	/^  std::unique_ptr<TableHeap> table_;$/;"	m	struct:bustub::TableInfo
table_	include/common/bustub_instance.h	/^  fort::utf8_table table_;$/;"	m	class:bustub::FortTableWriter
table_	include/execution/plans/mock_scan_plan.h	/^  std::string table_;$/;"	m	class:bustub::MockScanPlanNode
table_heap_	include/storage/table/table_iterator.h	/^  TableHeap *table_heap_;$/;"	m	class:bustub::TableIterator
table_info_	include/execution/executors/update_executor.h	/^  const TableInfo *table_info_;$/;"	m	class:bustub::UpdateExecutor
table_latch_	include/container/disk/hash/linear_probe_hash_table.h	/^  ReaderWriterLatch table_latch_;$/;"	m	class:bustub::LinearProbeHashTable
table_lock_map_	include/concurrency/lock_manager.h	/^  std::unordered_map<table_oid_t, std::shared_ptr<LockRequestQueue>> table_lock_map_;$/;"	m	class:bustub::LockManager
table_lock_map_latch_	include/concurrency/lock_manager.h	/^  std::mutex table_lock_map_latch_;$/;"	m	class:bustub::LockManager
table_name_	include/catalog/catalog.h	/^  std::string table_name_;$/;"	m	struct:bustub::IndexInfo
table_name_	include/execution/plans/seq_scan_plan.h	/^  std::string table_name_;$/;"	m	class:bustub::SeqScanPlanNode
table_name_	include/storage/index/index.h	/^  std::string table_name_;$/;"	m	class:bustub::IndexMetadata
table_names_	include/catalog/catalog.h	/^  std::unordered_map<std::string, table_oid_t> table_names_;$/;"	m	class:bustub::Catalog
table_oid_	include/execution/plans/delete_plan.h	/^  table_oid_t table_oid_;$/;"	m	class:bustub::DeletePlanNode
table_oid_	include/execution/plans/index_scan_plan.h	/^  table_oid_t table_oid_;$/;"	m	class:bustub::IndexScanPlanNode
table_oid_	include/execution/plans/insert_plan.h	/^  table_oid_t table_oid_;$/;"	m	class:bustub::InsertPlanNode
table_oid_	include/execution/plans/seq_scan_plan.h	/^  table_oid_t table_oid_;$/;"	m	class:bustub::SeqScanPlanNode
table_oid_	include/execution/plans/update_plan.h	/^  table_oid_t table_oid_;$/;"	m	class:bustub::UpdatePlanNode
tables_	include/catalog/catalog.h	/^  std::unordered_map<table_oid_t, std::shared_ptr<TableInfo>> tables_;$/;"	m	class:bustub::Catalog
tables_	include/common/bustub_instance.h	/^  std::vector<std::string> tables_;$/;"	m	class:bustub::FortTableWriter
target_expr_	include/binder/statement/update_statement.h	/^  std::vector<std::pair<std::unique_ptr<BoundColumnRef>, std::unique_ptr<BoundExpression>>> target_expr_;$/;"	m	class:bustub::UpdateStatement
target_expressions_	include/execution/plans/update_plan.h	/^  std::vector<AbstractExpressionRef> target_expressions_;$/;"	m	class:bustub::UpdatePlanNode
thread_id_	include/concurrency/transaction.h	/^  const std::thread::id thread_id_;$/;"	m	class:bustub::Transaction
thread_id_	include/storage/disk/disk_manager_memory.h	/^  std::optional<std::thread::id> thread_id_;$/;"	m	class:bustub::DiskManagerUnlimitedMemory
thread_mutex_	include/storage/disk/disk_scheduler.h	/^  [[maybe_unused]] std::array<std::shared_mutex, 1> thread_mutex_;$/;"	m	class:bustub::DiskScheduler
thread_page_	include/storage/disk/disk_scheduler.h	/^  [[maybe_unused]] std::array<page_id_t, 1> thread_page_;$/;"	m	class:bustub::DiskScheduler
thread_pool_	include/storage/disk/disk_scheduler.h	/^  std::array<std::optional<std::thread>, THREAD_NUM> thread_pool_;  \/\/ 使用定长的线程池$/;"	m	class:bustub::DiskScheduler
timestamp_	include/type/value.h	/^    uint64_t timestamp_;$/;"	m	union:bustub::Value::Val
tinyint_	include/type/value.h	/^    int8_t tinyint_;$/;"	m	union:bustub::Value::Val
topn_executor_	execution/topn_check_executor.cpp	/^      topn_executor_(topn_executor) {}$/;"	f	namespace:bustub
topn_executor_	include/execution/executors/topn_check_executor.h	/^  TopNExecutor *topn_executor_;$/;"	m	class:bustub::TopNCheckExecutor
transaction_	include/execution/executor_context.h	/^  Transaction *transaction_;$/;"	m	class:bustub::ExecutorContext
transaction_manager_	include/recovery/checkpoint_manager.h	/^  TransactionManager *transaction_manager_ __attribute__((__unused__));$/;"	m	class:bustub::CheckpointManager
ts_	include/storage/table/tuple.h	/^  timestamp_t ts_;$/;"	m	struct:bustub::TupleMeta
tuple	include/concurrency/transaction_manager.h	/^    -> std::tuple<TupleMeta, Tuple, std::optional<UndoLink>>;$/;"	m	class:bustub::std
tuple	include/planner/planner.h	/^      -> std::tuple<AggregationType, std::vector<AbstractExpressionRef>>;$/;"	m	class:bustub::Planner::std
tuple	include/planner/planner.h	/^      -> std::tuple<WindowFunctionType, std::vector<AbstractExpressionRef>>;$/;"	m	class:bustub::Planner::std
tuple	include/planner/planner.h	/^      -> std::tuple<std::string, AbstractExpressionRef>;$/;"	m	class:bustub::Planner::std
tuple	include/planner/planner.h	/^      -> std::tuple<std::string, std::shared_ptr<ColumnValueExpression>>;$/;"	m	class:bustub::Planner::std
tuple_	include/concurrency/transaction.h	/^  Tuple tuple_;$/;"	m	struct:bustub::UndoLog
tuple_idx_	include/execution/expressions/column_value_expression.h	/^  uint32_t tuple_idx_;$/;"	m	class:bustub::ColumnValueExpression
tuple_info_	include/storage/page/table_page.h	/^  TupleInfo tuple_info_[0];$/;"	m	class:bustub::TablePage
tuple_length_	include/execution/executors/external_merge_sort_executor.h	/^  uint32_t tuple_length_;$/;"	m	class:bustub::SortPage
tuples_	include/execution/executors/external_merge_sort_executor.h	/^    std::vector<Tuple> tuples_;$/;"	m	class:bustub::MergeSortRun::Iterator
txn_id_	include/concurrency/lock_manager.h	/^    txn_id_t txn_id_;$/;"	m	class:bustub::LockManager::LockRequest
txn_id_	include/concurrency/transaction.h	/^  const txn_id_t txn_id_;$/;"	m	class:bustub::Transaction
txn_manager_	include/common/bustub_instance.h	/^  std::unique_ptr<TransactionManager> txn_manager_;$/;"	m	class:bustub::BusTubInstance
txn_manager_	include/concurrency/lock_manager.h	/^  TransactionManager *txn_manager_;$/;"	m	class:bustub::LockManager
txn_map_	include/concurrency/transaction_manager.h	/^  std::unordered_map<txn_id_t, std::shared_ptr<Transaction>> txn_map_;$/;"	m	class:bustub::TransactionManager
txn_map_mutex_	include/concurrency/transaction_manager.h	/^  std::shared_mutex txn_map_mutex_;$/;"	m	class:bustub::TransactionManager
txn_mgr_	include/execution/execution_engine.h	/^  [[maybe_unused]] TransactionManager *txn_mgr_;$/;"	m	class:bustub::ExecutionEngine
txn_mgr_	include/execution/executor_context.h	/^  TransactionManager *txn_mgr_;$/;"	m	class:bustub::ExecutorContext
type_	include/binder/bound_order_by.h	/^  OrderByType type_;$/;"	m	class:bustub::BoundOrderBy
type_	include/binder/bound_statement.h	/^  StatementType type_;$/;"	m	class:bustub::BoundStatement
type_	include/binder/simplified_token.h	/^  SimplifiedTokenType type_;$/;"	m	struct:bustub::SimplifiedToken
type_	include/binder/statement/set_show_statement.h	/^  std::string type_;$/;"	m	class:bustub::TransactionStatement
type_	include/catalog/table_generator.h	/^    const TypeId type_;$/;"	m	struct:bustub::TableGenerator::ColumnInsertMeta
type_	include/common/exception.h	/^  ExceptionType type_;$/;"	m	class:bustub::Exception
type_	include/execution/expressions/abstract_expression.h	/^      : children_{std::move(children)}, ret_type_{std::move(ret_type)}, type_(type) {}$/;"	f	class:bustub::AbstractExpression
type_	include/execution/expressions/abstract_expression.h	/^  ExecExpressionType type_;$/;"	m	class:bustub::AbstractExpression
type_	include/execution/plans/window_plan.h	/^    WindowFunctionType type_;$/;"	m	struct:bustub::WindowFunctionPlanNode::WindowFunction
type_id_	include/type/type.h	/^  TypeId type_id_;$/;"	m	class:bustub::CmpBool::Type
type_id_	include/type/value.h	/^  TypeId type_id_;$/;"	m	class:bustub::Value
uint32_t	include/container/disk/hash/disk_extendible_hash_table.h	/^  auto Hash(K key) const -> uint32_t;$/;"	m	class:bustub::DiskExtendibleHashTable
uint32_t	include/storage/page/extendible_htable_bucket_page.h	/^  auto Size() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableBucketPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetGlobalDepth() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetGlobalDepthMask() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetLocalDepth(uint32_t bucket_idx) const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetLocalDepthMask(uint32_t bucket_idx) const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetMaxDepth() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto GetSplitImageIndex(uint32_t bucket_idx) const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto HashToBucketIndex(uint32_t hash) const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto MaxSize() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_directory_page.h	/^  auto Size() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableDirectoryPage
uint32_t	include/storage/page/extendible_htable_header_page.h	/^  auto HashToDirectoryIndex(uint32_t hash) const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableHeaderPage
uint32_t	include/storage/page/extendible_htable_header_page.h	/^  auto MaxSize() const -> uint32_t;$/;"	m	class:bustub::ExtendibleHTableHeaderPage
uint32_t	include/storage/page/hash_table_block_page.h	/^  auto NumReadable() -> uint32_t;$/;"	m	class:bustub::HashTableBlockPage
uint32_t	include/storage/page/hash_table_bucket_page.h	/^  auto NumReadable() -> uint32_t;$/;"	m	class:bustub::HashTableBucketPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto GetGlobalDepth() -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto GetGlobalDepthMask() -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto GetLocalDepth(uint32_t bucket_idx) -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto GetLocalDepthMask(uint32_t bucket_idx) -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto GetLocalHighBit(uint32_t bucket_idx) -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto GetSplitImageIndex(uint32_t bucket_idx) -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/page/hash_table_directory_page.h	/^  auto Size() -> uint32_t;$/;"	m	class:bustub::HashTableDirectoryPage
uint32_t	include/storage/table/table_heap.h	/^  auto GetTupleNum() const -> uint32_t;$/;"	m	class:bustub::TableHeap
uint32_t	include/type/type.h	/^  virtual auto GetStorageSize(const Value &val) const -> uint32_t;$/;"	m	class:bustub::CmpBool::Type
uint32_t	primer/trie.cpp	/^template auto Trie::Get(std::string_view key) const -> const uint32_t *;$/;"	m	namespace:bustub	file:
uint64_t	include/primer/hyperloglog.h	/^  auto PositionOfLeftmostOne(const std::bitset<BITSET_CAPACITY> &bset) const -> uint64_t;$/;"	m	class:bustub::HyperLogLog
uint64_t	include/type/type.h	/^  static auto GetTypeSize(TypeId type_id) -> uint64_t;$/;"	m	class:bustub::CmpBool::Type
uint64_t	primer/trie.cpp	/^template auto Trie::Get(std::string_view key) const -> const uint64_t *;$/;"	m	namespace:bustub	file:
uint8_t	include/binder/statement/explain_statement.h	/^enum ExplainOptions : uint8_t {$/;"	g
undo_logs_	include/concurrency/transaction.h	/^  std::vector<UndoLog> undo_logs_;$/;"	m	class:bustub::Transaction
uninlined_columns_	include/catalog/schema.h	/^  std::vector<uint32_t> uninlined_columns_;$/;"	m	class:bustub::Schema
unique_ptr	include/binder/binder.h	/^                                       const std::vector<std::string> &col_name) -> std::unique_ptr<BoundColumnRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^                                      const std::vector<std::string> &col_name) -> std::unique_ptr<BoundColumnRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^                            duckdb_libpgquery::PGWindowDef *node) -> std::unique_ptr<BoundWindow>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^      -> std::unique_ptr<BoundColumnRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^      -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^      -> std::unique_ptr<BoundSubqueryRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^      -> std::unique_ptr<BoundWindow>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindAExpr(duckdb_libpgquery::PGAExpr *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindBaseTableRef(std::string table_name, std::optional<std::string> alias) -> std::unique_ptr<BoundBaseTableRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindBoolExpr(duckdb_libpgquery::PGBoolExpr *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindColumnRef(duckdb_libpgquery::PGColumnRef *node) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindConstant(duckdb_libpgquery::PGAConst *node) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindCreate(duckdb_libpgquery::PGCreateStmt *pg_stmt) -> std::unique_ptr<CreateStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindDelete(duckdb_libpgquery::PGDeleteStmt *stmt) -> std::unique_ptr<DeleteStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindExplain(duckdb_libpgquery::PGExplainStmt *stmt) -> std::unique_ptr<ExplainStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindExpression(duckdb_libpgquery::PGNode *node) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindFrom(duckdb_libpgquery::PGList *list) -> std::unique_ptr<BoundTableRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindFuncCall(duckdb_libpgquery::PGFuncCall *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindHaving(duckdb_libpgquery::PGNode *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindIndex(duckdb_libpgquery::PGIndexStmt *stmt) -> std::unique_ptr<IndexStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindInsert(duckdb_libpgquery::PGInsertStmt *pg_stmt) -> std::unique_ptr<InsertStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindJoin(duckdb_libpgquery::PGJoinExpr *root) -> std::unique_ptr<BoundTableRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindLimitCount(duckdb_libpgquery::PGNode *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindLimitOffset(duckdb_libpgquery::PGNode *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindRangeSubselect(duckdb_libpgquery::PGRangeSubselect *root) -> std::unique_ptr<BoundTableRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindRangeVar(duckdb_libpgquery::PGRangeVar *table_ref) -> std::unique_ptr<BoundTableRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindResTarget(duckdb_libpgquery::PGResTarget *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindSelect(duckdb_libpgquery::PGSelectStmt *pg_stmt) -> std::unique_ptr<SelectStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindStar(duckdb_libpgquery::PGAStar *node) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindStatement(duckdb_libpgquery::PGNode *stmt) -> std::unique_ptr<BoundStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindTableRef(duckdb_libpgquery::PGNode *node) -> std::unique_ptr<BoundTableRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindTransaction(duckdb_libpgquery::PGTransactionStmt *stmt) -> std::unique_ptr<TransactionStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindUpdate(duckdb_libpgquery::PGUpdateStmt *stmt) -> std::unique_ptr<UpdateStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindValuesList(duckdb_libpgquery::PGList *list) -> std::unique_ptr<BoundExpressionListRef>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindVariableSet(duckdb_libpgquery::PGVariableSetStmt *stmt) -> std::unique_ptr<VariableSetStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindVariableShow(duckdb_libpgquery::PGVariableShowStmt *stmt) -> std::unique_ptr<VariableShowStatement>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/binder/binder.h	/^  auto BindWhere(duckdb_libpgquery::PGNode *root) -> std::unique_ptr<BoundExpression>;$/;"	m	class:bustub::Binder::std
unique_ptr	include/common/bustub_instance.h	/^  auto MakeExecutorContext(Transaction *txn, bool is_modify) -> std::unique_ptr<ExecutorContext>;$/;"	m	class:bustub::BusTubInstance::std
unique_ptr	include/execution/executor_factory.h	/^      -> std::unique_ptr<AbstractExecutor>;$/;"	m	class:bustub::ExecutorFactory::std
unique_ptr	include/execution/expressions/abstract_expression.h	/^      -> std::unique_ptr<AbstractExpression> = 0;$/;"	m	class:bustub::AbstractExpression::std
unique_ptr	include/execution/plans/abstract_plan.h	/^      -> std::unique_ptr<AbstractPlanNode> = 0;$/;"	m	class:bustub::AbstractPlanNode::std
update_rid_	include/recovery/log_record.h	/^  RID update_rid_;$/;"	m	class:bustub::LogRecord
upgrading_	include/concurrency/lock_manager.h	/^    txn_id_t upgrading_ = INVALID_TXN_ID;$/;"	m	class:bustub::LockManager::LockRequestQueue
val_	include/binder/expressions/bound_constant.h	/^  Value val_;$/;"	m	class:bustub::BoundConstant
val_	include/execution/expressions/constant_value_expression.h	/^  Value val_;$/;"	m	class:bustub::ConstantValueExpression
value_	include/binder/statement/set_show_statement.h	/^  std::string value_;$/;"	m	class:bustub::VariableSetStatement
value_	include/primer/trie.h	/^  std::shared_ptr<T> value_;$/;"	m	class:bustub::TrieNodeWithValue
value_	include/primer/trie_store.h	/^  const T &value_;$/;"	m	class:bustub::ValueGuard
value_	include/type/value.h	/^  } value_;$/;"	m	class:bustub::Value	typeref:union:bustub::Value::Val
values_	include/binder/table_ref/bound_expression_list_ref.h	/^  std::vector<std::vector<std::unique_ptr<BoundExpression>>> values_;$/;"	m	class:bustub::BoundExpressionListRef
values_	include/common/bustub_instance.h	/^  std::vector<std::vector<std::string>> values_;$/;"	m	class:bustub::StringVectorWriter
values_	include/execution/plans/values_plan.h	/^  std::vector<std::vector<AbstractExpressionRef>> values_;$/;"	m	class:bustub::ValuesPlanNode
variable_	include/binder/statement/set_show_statement.h	/^  std::string variable_;$/;"	m	class:bustub::VariableSetStatement
variable_	include/binder/statement/set_show_statement.h	/^  std::string variable_;$/;"	m	class:bustub::VariableShowStatement
varlen_	include/type/value.h	/^    char *varlen_;$/;"	m	union:bustub::Value::Val
vector	include/binder/binder.h	/^  auto BindCTE(duckdb_libpgquery::PGWithClause *node) -> std::vector<std::unique_ptr<BoundSubqueryRef>>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  auto BindExpressionList(duckdb_libpgquery::PGList *list) -> std::vector<std::unique_ptr<BoundExpression>>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  auto BindGroupBy(duckdb_libpgquery::PGList *list) -> std::vector<std::unique_ptr<BoundExpression>>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  auto BindSelectList(duckdb_libpgquery::PGList *list) -> std::vector<std::unique_ptr<BoundExpression>>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  auto BindSort(duckdb_libpgquery::PGList *list) -> std::vector<std::unique_ptr<BoundOrderBy>>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  auto GetAllColumns(const BoundTableRef &scope) -> std::vector<std::unique_ptr<BoundExpression>>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  static auto KeywordList() -> std::vector<ParserKeyword>;$/;"	m	class:bustub::Binder::std
vector	include/binder/binder.h	/^  static auto Tokenize(const std::string &query) -> std::vector<SimplifiedToken>;$/;"	m	class:bustub::Binder::std
vector	include/catalog/table_generator.h	/^  auto GenNumericValues(ColumnInsertMeta *col_meta, uint32_t count) -> std::vector<Value>;$/;"	m	class:bustub::TableGenerator::std
vector	include/catalog/table_generator.h	/^  auto MakeValues(ColumnInsertMeta *col_meta, uint32_t count) -> std::vector<Value>;$/;"	m	class:bustub::TableGenerator::std
vector	include/common/util/string_util.h	/^  static auto Split(const std::string &input, const std::string &split) -> std::vector<std::string>;$/;"	m	class:bustub::StringUtil::std
vector	include/common/util/string_util.h	/^  static auto Split(const std::string &str, char delimiter) -> std::vector<std::string>;$/;"	m	class:bustub::StringUtil::std
vector	include/concurrency/lock_manager.h	/^  auto GetEdgeList() -> std::vector<std::pair<txn_id_t, txn_id_t>>;$/;"	m	class:bustub::LockManager::std
vector	include/primer/orset.h	/^  auto Elements() const -> std::vector<T>;$/;"	m	class:bustub::ORSet::std
vector	include/type/value.h	/^  auto GetVector() const -> std::vector<double>;$/;"	m	class:bustub::Value::std
vector	include/type/vector_type.h	/^  auto GetVector(const Value &val) const -> std::vector<double>;$/;"	m	class:bustub::VectorType::std
version_counter_	include/primer/orset_driver.h	/^  std::vector<uint32_t> version_counter_;$/;"	m	class:bustub::ORSetDriver
version_info_	include/concurrency/transaction_manager.h	/^  std::unordered_map<page_id_t, std::shared_ptr<PageVersionInfo>> version_info_;$/;"	m	class:bustub::TransactionManager
version_info_mutex_	include/concurrency/transaction_manager.h	/^  std::shared_mutex version_info_mutex_;$/;"	m	class:bustub::TransactionManager
wait_	include/primer/trie.h	/^  std::future<int> wait_;$/;"	m	class:bustub::MoveBlocked
waits_for_	include/concurrency/lock_manager.h	/^  std::unordered_map<txn_id_t, std::vector<txn_id_t>> waits_for_;$/;"	m	class:bustub::LockManager
waits_for_latch_	include/concurrency/lock_manager.h	/^  std::mutex waits_for_latch_;$/;"	m	class:bustub::LockManager
watermark_	include/concurrency/watermark.h	/^  timestamp_t watermark_;$/;"	m	class:bustub::Watermark
where_	include/binder/statement/select_statement.h	/^  std::unique_ptr<BoundExpression> where_;$/;"	m	class:bustub::SelectStatement
window_functions_	include/execution/plans/window_plan.h	/^  std::unordered_map<uint32_t, WindowFunction> window_functions_;$/;"	m	class:bustub::WindowFunctionPlanNode
write_lock_	include/primer/trie_store.h	/^  std::mutex write_lock_;$/;"	m	class:bustub::TrieStore
write_set_	include/concurrency/transaction.h	/^  std::unordered_map<table_oid_t, std::unordered_set<RID>> write_set_;$/;"	m	class:bustub::Transaction
write_set_	include/storage/index/b_plus_tree.h	/^  std::deque<WritePageGuard> write_set_;$/;"	m	class:bustub::Context
~BusTubInstance	common/bustub_instance.cpp	/^BusTubInstance::~BusTubInstance() {$/;"	f	class:bustub::BusTubInstance
~ContextGuard	include/binder/binder.h	/^    ~ContextGuard() {$/;"	f	class:bustub::Binder::ContextGuard
~ContextGuard	include/planner/planner.h	/^    ~ContextGuard() { *ctx_ptr_ = std::move(old_ctx_); }$/;"	f	class:bustub::Planner::ContextGuard
~DiskScheduler	storage/disk/disk_scheduler.cpp	/^DiskScheduler::~DiskScheduler() {$/;"	f	class:bustub::DiskScheduler
~LockManager	include/concurrency/lock_manager.h	/^  ~LockManager() {$/;"	f	class:bustub::LockManager
~LogManager	include/recovery/log_manager.h	/^  ~LogManager() {$/;"	f	class:bustub::LogManager
~LogRecovery	include/recovery/log_recovery.h	/^  ~LogRecovery() {$/;"	f	class:bustub::LogRecovery
~ReadPageGuard	storage/page/page_guard.cpp	/^ReadPageGuard::~ReadPageGuard() { Drop(); }$/;"	f	class:bustub::ReadPageGuard
~Value	type/value.cpp	/^Value::~Value() {$/;"	f	class:bustub::Value
~WritePageGuard	storage/page/page_guard.cpp	/^WritePageGuard::~WritePageGuard() { Drop(); }$/;"	f	class:bustub::WritePageGuard
